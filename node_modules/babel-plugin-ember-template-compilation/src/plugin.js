"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const babel_import_util_1 = require("babel-import-util");
const expression_parser_1 = require("./expression-parser");
const INLINE_PRECOMPILE_MODULES = [
    {
        moduleName: 'ember-cli-htmlbars',
        export: 'hbs',
        allowTemplateLiteral: true,
        enableScope: false,
    },
    {
        moduleName: 'ember-cli-htmlbars-inline-precompile',
        export: 'default',
        allowTemplateLiteral: true,
        enableScope: false,
    },
    {
        moduleName: 'htmlbars-inline-precompile',
        export: 'default',
        allowTemplateLiteral: true,
        enableScope: false,
    },
    {
        moduleName: '@ember/template-compilation',
        export: 'precompileTemplate',
        allowTemplateLiteral: false,
        enableScope: true,
    },
];
function makePlugin(
// receives the Babel plugin options, returns Ember's precompiler
loadPrecompiler) {
    return function htmlbarsInlinePrecompile(babel) {
        let t = babel.types;
        function insertCompiledTemplate(target, state, template, userTypedOptions) {
            let options = Object.assign({ contents: template }, userTypedOptions);
            let precompile = state.precompile;
            let precompileResultString;
            if (options.insertRuntimeErrors) {
                try {
                    precompileResultString = precompile(template, options);
                }
                catch (error) {
                    target.replaceWith(runtimeErrorIIFE(babel, { ERROR_MESSAGE: error.message }));
                    return;
                }
            }
            else {
                precompileResultString = precompile(template, options);
            }
            let precompileResultAST = babel.parse(`var precompileResult = ${precompileResultString};`, {
                babelrc: false,
                configFile: false,
            });
            let templateExpression = precompileResultAST.program.body[0]
                .declarations[0].init;
            t.addComment(templateExpression, 'leading', `\n  ${template.replace(/\*\//g, '*\\/')}\n`, 
            /* line comment? */ false);
            let templateFactoryIdentifier = state.util.import(target, state.templateFactory.moduleName, state.templateFactory.exportName);
            target.replaceWith(t.callExpression(templateFactoryIdentifier, [templateExpression]));
        }
        return {
            visitor: {
                Program: {
                    enter(path, state) {
                        var _a, _b;
                        let moduleName = '@ember/template-factory';
                        let exportName = 'createTemplateFactory';
                        let overrides = (_b = (_a = state.opts.outputModuleOverrides) === null || _a === void 0 ? void 0 : _a[moduleName]) === null || _b === void 0 ? void 0 : _b[exportName];
                        state.templateFactory = overrides
                            ? { exportName: overrides[0], moduleName: overrides[1] }
                            : { exportName, moduleName };
                        state.util = new babel_import_util_1.ImportUtil(t, path);
                        state.precompile = loadPrecompiler(state.opts);
                    },
                    exit(_path, state) {
                        for (let { moduleName, export: exportName } of configuredModules(state)) {
                            state.util.removeImport(moduleName, exportName);
                        }
                    },
                },
                TaggedTemplateExpression(path, state) {
                    let tagPath = path.get('tag');
                    if (!tagPath.isIdentifier()) {
                        return;
                    }
                    let options = referencesInlineCompiler(tagPath, state);
                    if (!options) {
                        return;
                    }
                    if (!options.allowTemplateLiteral) {
                        throw path.buildCodeFrameError(`Attempted to use \`${tagPath.node.name}\` as a template tag, but it can only be called as a function with a string passed to it: ${tagPath.node.name}('content here')`);
                    }
                    if (path.node.quasi.expressions.length) {
                        throw path.buildCodeFrameError('placeholders inside a tagged template string are not supported');
                    }
                    let template = path.node.quasi.quasis.map((quasi) => quasi.value.cooked).join('');
                    insertCompiledTemplate(path, state, template, {});
                },
                CallExpression(path, state) {
                    let calleePath = path.get('callee');
                    if (!calleePath.isIdentifier()) {
                        return;
                    }
                    let options = referencesInlineCompiler(calleePath, state);
                    if (!options) {
                        return;
                    }
                    let [firstArg, secondArg, ...restArgs] = path.get('arguments');
                    let template;
                    switch (firstArg === null || firstArg === void 0 ? void 0 : firstArg.node.type) {
                        case 'StringLiteral':
                            template = firstArg.node.value;
                            break;
                        case 'TemplateLiteral':
                            if (firstArg.node.expressions.length) {
                                throw path.buildCodeFrameError('placeholders inside a template string are not supported');
                            }
                            else {
                                template = firstArg.node.quasis.map((quasi) => quasi.value.cooked).join('');
                            }
                            break;
                        case 'TaggedTemplateExpression':
                            throw path.buildCodeFrameError(`tagged template strings inside ${calleePath.node.name} are not supported`);
                        default:
                            throw path.buildCodeFrameError(`${calleePath.node.name} should be invoked with at least a single argument (the template string)`);
                    }
                    let userTypedOptions;
                    if (!secondArg) {
                        userTypedOptions = {};
                    }
                    else {
                        if (!secondArg.isObjectExpression()) {
                            throw path.buildCodeFrameError(`${calleePath.node.name} can only be invoked with 2 arguments: the template string, and any static options`);
                        }
                        userTypedOptions = new expression_parser_1.ExpressionParser(babel).parseObjectExpression(calleePath.node.name, secondArg, true);
                    }
                    if (restArgs.length > 0) {
                        throw path.buildCodeFrameError(`${calleePath.node.name} can only be invoked with 2 arguments: the template string, and any static options`);
                    }
                    insertCompiledTemplate(path, state, template, userTypedOptions);
                },
            },
        };
    };
}
exports.default = makePlugin;
function* configuredModules(state) {
    var _a;
    for (let moduleConfig of INLINE_PRECOMPILE_MODULES) {
        if (moduleConfig.moduleName !== '@ember/template-compilation' &&
            !((_a = state.opts.enableLegacyModules) === null || _a === void 0 ? void 0 : _a.includes(moduleConfig.moduleName))) {
            continue;
        }
        yield moduleConfig;
    }
}
function referencesInlineCompiler(path, state) {
    for (let moduleConfig of configuredModules(state)) {
        if (path.referencesImport(moduleConfig.moduleName, moduleConfig.export)) {
            return moduleConfig;
        }
    }
    return undefined;
}
function runtimeErrorIIFE(babel, replacements) {
    let statement = babel.template(`(function() {\n  throw new Error('ERROR_MESSAGE');\n})();`)(replacements);
    return statement.expression;
}
//# sourceMappingURL=data:application/json;base64,