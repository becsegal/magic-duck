{"version":3,"file":"macros-config.js","sourceRoot":"","sources":["macros-config.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport crypto from 'crypto';\nimport findUp from 'find-up';\nimport type { PluginItem } from '@babel/core';\nimport { PackageCache, getOrCreate } from '@embroider/shared-internals';\nimport { FirstTransformParams, makeFirstTransform, makeSecondTransform } from './glimmer/ast-transform';\nimport State from './babel/state';\nimport partition from 'lodash/partition';\n\nexport type SourceOfConfig = (config: object) => {\n  readonly name: string;\n  readonly root: string;\n  readonly version: string;\n};\n\nexport type Merger = (\n  configs: object[],\n  params: {\n    sourceOfConfig: SourceOfConfig;\n  }\n) => object;\n\n// Do not change this type signature without pondering deeply the mysteries of\n// being compatible with unwritten future versions of this library.\ntype GlobalSharedState = WeakMap<\n  any,\n  {\n    configs: Map<string, object[]>;\n    configSources: WeakMap<object, string>;\n    mergers: Map<string, { merger: Merger; fromPath: string }>;\n  }\n>;\n\n// this is a module-scoped cache. If multiple callers ask _this copy_ of\n// @embroider/macros for a shared MacrosConfig, they'll all get the same one.\n// And if somebody asks a *different* copy of @embroider/macros for the shared\n// MacrosConfig, it will have its own instance with its own code, but will still\n// share the GlobalSharedState beneath.\nlet localSharedState: WeakMap<any, MacrosConfig> = new WeakMap();\n\nfunction gatherAddonCacheKeyWorker(item: any, memo: Set<string>) {\n  item.addons.forEach((addon: any) => {\n    let key = `${addon.pkg.name}@${addon.pkg.version}`;\n    memo.add(key);\n    gatherAddonCacheKeyWorker(addon, memo);\n  });\n}\n\nlet addonCacheKey: WeakMap<any, string> = new WeakMap();\n// creates a string representing all addons and their versions\n// (foo@1.0.0|bar@2.0.0) to use as a cachekey\nfunction gatherAddonCacheKey(project: any): string {\n  let cacheKey = addonCacheKey.get(project);\n  if (cacheKey) {\n    return cacheKey;\n  }\n\n  let memo: Set<string> = new Set();\n  project.addons.forEach((addon: any) => {\n    let key = `${addon.pkg.name}@${addon.pkg.version}`;\n    memo.add(key);\n    gatherAddonCacheKeyWorker(addon, memo);\n  });\n\n  cacheKey = [...memo].join('|');\n  addonCacheKey.set(project, cacheKey);\n\n  return cacheKey;\n}\n\nexport default class MacrosConfig {\n  static for(key: any, appRoot: string): MacrosConfig {\n    let found = localSharedState.get(key);\n    if (found) {\n      return found;\n    }\n\n    let g = global as any as { __embroider_macros_global__: GlobalSharedState | undefined };\n    if (!g.__embroider_macros_global__) {\n      g.__embroider_macros_global__ = new WeakMap();\n    }\n\n    let shared = g.__embroider_macros_global__.get(key);\n    if (shared) {\n      // if an earlier version of @embroider/macros created the shared state, it\n      // would have configSources.\n      if (!shared.configSources) {\n        shared.configSources = new WeakMap();\n      }\n    } else {\n      shared = {\n        configs: new Map(),\n        configSources: new WeakMap(),\n        mergers: new Map(),\n      };\n      g.__embroider_macros_global__.set(key, shared);\n    }\n\n    let config = new MacrosConfig(appRoot);\n    config.configs = shared.configs;\n    config.configSources = shared.configSources;\n    config.mergers = shared.mergers;\n    localSharedState.set(key, config);\n    return config;\n  }\n\n  private mode: 'compile-time' | 'run-time' = 'compile-time';\n  private globalConfig: { [key: string]: unknown } = {};\n\n  private isDevelopingPackageRoots: Set<string> = new Set();\n\n  enableRuntimeMode() {\n    if (this.mode !== 'run-time') {\n      if (!this._configWritable) {\n        throw new Error(`[Embroider:MacrosConfig] attempted to enableRuntimeMode after configs have been finalized`);\n      }\n      this.mode = 'run-time';\n    }\n  }\n\n  enablePackageDevelopment(packageRoot: string) {\n    if (!this.isDevelopingPackageRoots.has(packageRoot)) {\n      if (!this._configWritable) {\n        throw new Error(\n          `[Embroider:MacrosConfig] attempted to enablePackageDevelopment after configs have been finalized`\n        );\n      }\n      this.isDevelopingPackageRoots.add(packageRoot);\n    }\n  }\n\n  private _importSyncImplementation: 'cjs' | 'eager' = 'cjs';\n\n  get importSyncImplementation() {\n    return this._importSyncImplementation;\n  }\n\n  set importSyncImplementation(value: 'cjs' | 'eager') {\n    if (!this._configWritable) {\n      throw new Error(\n        `[Embroider:MacrosConfig] attempted to set importSyncImplementation after configs have been finalized`\n      );\n    }\n    this._importSyncImplementation = value;\n  }\n\n  private packageCache: PackageCache;\n\n  private constructor(private appRoot: string) {\n    // this uses globalConfig because these things truly are global. Even if a\n    // package doesn't have a dep or peerDep on @embroider/macros, it's legit\n    // for them to want to know the answer to these questions, and there is only\n    // one answer throughout the whole dependency graph.\n    this.globalConfig['@embroider/macros'] = {\n      // this powers the `isTesting` macro. It always starts out false here,\n      // because:\n      //  - if this is a production build, we will evaluate all macros at build\n      //    time and isTesting will stay false, so test-only code will not be\n      //    included.\n      //  - if this is a dev build, we evaluate macros at runtime, which allows\n      //    both \"I'm running my app in development\" and \"I'm running my test\n      //    suite\" to coexist within a single build. When you run the test\n      //    suite, early in the runtime boot process we can flip isTesting to\n      //    true to distinguish the two.\n      isTesting: false,\n    };\n    this.packageCache = PackageCache.shared('embroider-stage3', appRoot);\n  }\n\n  private _configWritable = true;\n  private configs: Map<string, object[]> = new Map();\n  private configSources: WeakMap<object, string> = new WeakMap();\n  private mergers: Map<string, { merger: Merger; fromPath: string }> = new Map();\n\n  // Registers a new source of configuration to be given to the named package.\n  // Your config type must be json-serializable. You must always set fromPath to\n  // `__filename`.\n  setConfig(fromPath: string, packageName: string, config: object) {\n    return this.internalSetConfig(fromPath, packageName, config);\n  }\n\n  // Registers a new source of configuration to be given to your own package.\n  // Your config type must be json-serializable. You must always set fromPath to\n  // `__filename`.\n  setOwnConfig(fromPath: string, config: object) {\n    return this.internalSetConfig(fromPath, undefined, config);\n  }\n\n  // Registers a new source of configuration to be shared globally within the\n  // app. USE GLOBALS SPARINGLY! Prefer setConfig or setOwnConfig instead,\n  // unless your state is truly, necessarily global.\n  //\n  // Include a relevant package name in your key to help avoid collisions.\n  //\n  // Your value must be json-serializable. You must always set fromPath to\n  // `__filename`.\n  setGlobalConfig(fromPath: string, key: string, value: object) {\n    if (!this._configWritable) {\n      throw new Error(\n        `[Embroider:MacrosConfig] attempted to set global config after configs have been finalized from: '${fromPath}'`\n      );\n    }\n    this.globalConfig[key] = value;\n  }\n\n  private internalSetConfig(fromPath: string, packageName: string | undefined, config: object) {\n    if (!this._configWritable) {\n      throw new Error(\n        `[Embroider:MacrosConfig] attempted to set config after configs have been finalized from: '${fromPath}'`\n      );\n    }\n\n    if (!isSerializable(config)) {\n      throw new Error(\n        `[Embroider:MacrosConfig] the given config from '${fromPath}' for packageName '${packageName}' is not JSON serializable.`\n      );\n    }\n\n    let targetPackage = this.resolvePackage(fromPath, packageName);\n    let peers = getOrCreate(this.configs, targetPackage.root, () => []);\n    peers.push(config);\n    this.configSources.set(config, fromPath);\n  }\n\n  // Allows you to set the merging strategy used for your package's config. The\n  // merging strategy applies when multiple other packages all try to send\n  // configuration to you.\n  useMerger(fromPath: string, merger: Merger) {\n    if (this._configWritable) {\n      throw new Error(`[Embroider:MacrosConfig] attempted to call useMerger after configs have been finalized`);\n    }\n\n    let targetPackage = this.resolvePackage(fromPath, undefined);\n    let other = this.mergers.get(targetPackage.root);\n    if (other) {\n      throw new Error(\n        `[Embroider:MacrosConfig] conflicting mergers registered for package ${targetPackage.name} at ${targetPackage.root}. See ${other.fromPath} and ${fromPath}.`\n      );\n    }\n    this.mergers.set(targetPackage.root, { merger, fromPath });\n  }\n\n  private cachedUserConfigs: { [packageRoot: string]: object } | undefined;\n\n  private get userConfigs() {\n    if (this._configWritable) {\n      throw new Error('[Embroider:MacrosConfig] cannot read userConfigs until MacrosConfig has been finalized.');\n    }\n\n    if (!this.cachedUserConfigs) {\n      let userConfigs: { [packageRoot: string]: object } = {};\n      let sourceOfConfig = this.makeConfigSourcer(this.configSources);\n      for (let [pkgRoot, configs] of this.configs) {\n        let combined: object;\n        if (configs.length > 1) {\n          combined = this.mergerFor(pkgRoot)(configs, { sourceOfConfig });\n        } else {\n          combined = configs[0];\n        }\n        userConfigs[pkgRoot] = combined;\n      }\n      for (let [oldPath, newPath] of this.moves) {\n        userConfigs[newPath] = userConfigs[oldPath];\n      }\n      this.cachedUserConfigs = userConfigs;\n    }\n\n    return this.cachedUserConfigs;\n  }\n\n  private makeConfigSourcer(configSources: WeakMap<object, string>): SourceOfConfig {\n    return config => {\n      let fromPath = configSources.get(config);\n      if (!fromPath) {\n        throw new Error(\n          `unknown object passed to sourceOfConfig(). You can only pass back the configs you were given.`\n        );\n      }\n      let maybePkg = this.packageCache.ownerOfFile(fromPath);\n      if (!maybePkg) {\n        throw new Error(\n          `bug: unexpected error, we always check that fromPath is owned during internalSetConfig so this should never happen`\n        );\n      }\n      let pkg = maybePkg;\n      return {\n        get name() {\n          return pkg.name;\n        },\n        get version() {\n          return pkg.version;\n        },\n        get root() {\n          return pkg.root;\n        },\n      };\n    };\n  }\n\n  // to be called from within your build system. Returns the thing you should\n  // push into your babel plugins list.\n  //\n  // owningPackageRoot is needed when the files you will process (1) all belongs\n  // to one package, (2) will not be located in globally correct paths such that\n  // normal node_modules resolution can find their dependencies. In other words,\n  // owningPackageRoot is needed when you use this inside classic ember-cli, and\n  // it's not appropriate inside embroider.\n  babelPluginConfig(appOrAddonInstance?: any): PluginItem[] {\n    let self = this;\n    let owningPackageRoot = appOrAddonInstance ? appOrAddonInstance.root || appOrAddonInstance.project.root : null;\n    let opts: State['opts'] = {\n      // this is deliberately lazy because we want to allow everyone to finish\n      // setting config before we generate the userConfigs\n      get userConfigs() {\n        return self.userConfigs;\n      },\n      get globalConfig() {\n        return self.globalConfig;\n      },\n      owningPackageRoot,\n\n      isDevelopingPackageRoots: [...this.isDevelopingPackageRoots].map(root => this.moves.get(root) || root),\n      appPackageRoot: this.moves.get(this.appRoot) ?? this.appRoot,\n\n      // This is used as a signature so we can detect ourself among the plugins\n      // emitted from v1 addons.\n      embroiderMacrosConfigMarker: true,\n\n      get mode() {\n        return self.mode;\n      },\n\n      importSyncImplementation: this.importSyncImplementation,\n    };\n\n    let lockFilePath = findUp.sync(['yarn.lock', 'package-lock.json', 'pnpm-lock.yaml'], { cwd: opts.appPackageRoot });\n\n    if (!lockFilePath) {\n      lockFilePath = findUp.sync('package.json', { cwd: opts.appPackageRoot });\n    }\n\n    let lockFileBuffer = lockFilePath ? fs.readFileSync(lockFilePath) : 'no-cache-key';\n\n    // @embroider/macros provides a macro called dependencySatisfies which checks if a given\n    // package name satisfies a given semver version range. Due to the way babel caches this can\n    // cause a problem where the macro plugin does not run (because it has been cached) but the version\n    // of the dependency being checked for changes (due to installing a different version). This will lead to\n    // the old evaluated state being used which might be invalid. This cache busting plugin keeps track of a\n    // hash representing the lock file of the app and if it ever changes forces babel to rerun its plugins.\n    // more information in issue #906\n    let hash = crypto.createHash('sha256');\n    hash = hash.update(lockFileBuffer);\n    if (appOrAddonInstance) {\n      // ensure that the actual running addon names and versions are accounted\n      // for in the cache key; this ensures that we still invalidate the cache\n      // when linking another project (e.g. ember-source) which would normally\n      // not cause the lockfile to change;\n      hash = hash.update(gatherAddonCacheKey(appOrAddonInstance.project));\n    }\n    let cacheKey = hash.digest('hex');\n\n    return [\n      [join(__dirname, 'babel', 'macros-babel-plugin.js'), opts],\n      [\n        require.resolve('@embroider/shared-internals/src/babel-plugin-cache-busting.js'),\n        { version: cacheKey },\n        `@embroider/macros cache buster: ${owningPackageRoot}`,\n      ],\n    ];\n  }\n\n  static astPlugins(owningPackageRoot?: string): {\n    plugins: Function[];\n    setConfig: (config: MacrosConfig) => void;\n    lazyParams: FirstTransformParams;\n  } {\n    let configs: MacrosConfig | undefined;\n\n    let lazyParams = {\n      // this is deliberately lazy because we want to allow everyone to finish\n      // setting config before we generate the userConfigs\n      get configs() {\n        if (!configs) {\n          throw new Error(`Bug: @embroider/macros ast-transforms were not plugged into a MacrosConfig`);\n        }\n        return configs.userConfigs;\n      },\n      packageRoot: owningPackageRoot,\n      get appRoot() {\n        if (!configs) {\n          throw new Error(`Bug: @embroider/macros ast-transforms were not plugged into a MacrosConfig`);\n        }\n        return configs.appRoot;\n      },\n    };\n\n    let plugins = [makeFirstTransform(lazyParams), makeSecondTransform()].reverse();\n    function setConfig(c: MacrosConfig) {\n      configs = c;\n    }\n    return { plugins, setConfig, lazyParams };\n  }\n\n  private mergerFor(pkgRoot: string) {\n    let entry = this.mergers.get(pkgRoot);\n    if (entry) {\n      return entry.merger;\n    }\n    return defaultMergerFor(pkgRoot);\n  }\n\n  // this exists because @embroider/compat rewrites and moves v1 addons, and\n  // their macro configs need to follow them to their new homes.\n  packageMoved(oldPath: string, newPath: string) {\n    if (!this._configWritable) {\n      throw new Error(`[Embroider:MacrosConfig] attempted to call packageMoved after configs have been finalized`);\n    }\n\n    this.moves.set(oldPath, newPath);\n  }\n\n  private moves: Map<string, string> = new Map();\n\n  private resolvePackage(fromPath: string, packageName?: string | undefined) {\n    let us = this.packageCache.ownerOfFile(fromPath);\n    if (!us) {\n      throw new Error(`[Embroider:MacrosConfig] unable to determine which npm package owns the file ${fromPath}`);\n    }\n    if (packageName) {\n      return this.packageCache.resolve(packageName, us);\n    } else {\n      return us;\n    }\n  }\n\n  finalize() {\n    this._configWritable = false;\n  }\n}\n\nfunction defaultMergerFor(pkgRoot: string) {\n  return function defaultMerger(configs: object[], { sourceOfConfig }: { sourceOfConfig: SourceOfConfig }): object {\n    let [ownConfigs, otherConfigs] = partition(configs, c => sourceOfConfig(c as object).root === pkgRoot);\n    return Object.assign({}, ...ownConfigs, ...otherConfigs);\n  };\n}\n\nfunction isSerializable(obj: object): boolean {\n  if (isScalar(obj)) {\n    return true;\n  }\n\n  if (Array.isArray(obj)) {\n    return !obj.some((arrayItem: any) => !isSerializable(arrayItem));\n  }\n\n  if (isPlainObject(obj)) {\n    for (let property in obj) {\n      let value = obj[property] as any;\n      if (!isSerializable(value)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  console.error('non serializable item found in config:', obj);\n  return false;\n}\n\nfunction isScalar(val: any): boolean {\n  return (\n    typeof val === 'undefined' ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    val === null\n  );\n}\n\nfunction isPlainObject(obj: any): obj is Record<string, any> {\n  return typeof obj === 'object' && obj.constructor === Object && obj.toString() === '[object Object]';\n}\n"]}