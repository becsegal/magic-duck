{"version":3,"file":"evaluate-json.js","sourceRoot":"","sources":["evaluate-json.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport type * as Babel from '@babel/core';\nimport type { types as t } from '@babel/core';\nimport State from './state';\nimport dependencySatisfies from './dependency-satisfies';\nimport moduleExists from './module-exists';\nimport getConfig from './get-config';\n\ntype OpValue = string | boolean | number;\n\nconst binops: { [operator: string]: any } = {\n  '||': function (a: OpValue, b: OpValue) {\n    return a || b;\n  },\n  '&&': function (a: OpValue, b: OpValue) {\n    return a && b;\n  },\n  '|': function (a: any, b: any) {\n    return a | b;\n  },\n  '^': function (a: any, b: any) {\n    return a ^ b;\n  },\n  '&': function (a: any, b: any) {\n    return a & b;\n  },\n  '==': function (a: OpValue, b: OpValue) {\n    // eslint-disable-next-line eqeqeq\n    return a == b;\n  },\n  '!=': function (a: OpValue, b: OpValue) {\n    // eslint-disable-next-line eqeqeq\n    return a != b;\n  },\n  '===': function (a: OpValue, b: OpValue) {\n    return a === b;\n  },\n  '!==': function (a: OpValue, b: OpValue) {\n    return a !== b;\n  },\n  '<': function (a: OpValue, b: OpValue) {\n    return a < b;\n  },\n  '>': function (a: OpValue, b: OpValue) {\n    return a > b;\n  },\n  '<=': function (a: OpValue, b: OpValue) {\n    return a <= b;\n  },\n  '>=': function (a: OpValue, b: OpValue) {\n    return a >= b;\n  },\n  '<<': function (a: any, b: any) {\n    return a << b;\n  },\n  '>>': function (a: any, b: any) {\n    return a >> b;\n  },\n  '>>>': function (a: any, b: any) {\n    return a >>> b;\n  },\n  '+': function (a: any, b: any) {\n    return a + b;\n  },\n  '-': function (a: any, b: any) {\n    return a - b;\n  },\n  '*': function (a: any, b: any) {\n    return a * b;\n  },\n  '/': function (a: any, b: any) {\n    return a / b;\n  },\n  '%': function (a: any, b: any) {\n    return a % b;\n  },\n  '??': function (a: any, b: any) {\n    if (a === null || a === undefined) {\n      return b;\n    }\n    return a;\n  },\n};\n\nconst unops: { [operator: string]: any } = {\n  '-': function (a: OpValue) {\n    return -a;\n  },\n  '+': function (a: OpValue) {\n    return +a;\n  },\n  '~': function (a: OpValue) {\n    return ~a;\n  },\n  '!': function (a: OpValue) {\n    return !a;\n  },\n  void: function () {\n    return undefined;\n  },\n};\n\nexport interface ConfidentResult {\n  confident: true;\n  value: any;\n}\n\nexport interface UnknownResult {\n  confident: false;\n}\n\nexport type EvaluateResult = ConfidentResult | UnknownResult;\n\n// this is needed to make our strict types work when inter-operating with\n// babel's own built-in evaluator\nfunction isConfidentResult(result: { confident: boolean; value: any }): result is ConfidentResult {\n  return result.confident;\n}\n\nexport interface EvaluationEnv {\n  knownPaths?: Map<NodePath, EvaluateResult>;\n  locals?: { [localVar: string]: any };\n  state?: State;\n}\n\nexport class Evaluator {\n  private knownPaths: Map<NodePath, EvaluateResult>;\n  private locals: { [localVar: string]: any };\n  private state: State | undefined;\n\n  constructor(env: EvaluationEnv = {}) {\n    this.knownPaths = env.knownPaths || new Map();\n    this.locals = env.locals || {};\n    this.state = env.state;\n  }\n\n  evaluateMember(\n    path: NodePath<t.MemberExpression | t.OptionalMemberExpression>,\n    optionalChain: boolean\n  ): EvaluateResult {\n    let propertyPath = assertNotArray(path.get('property'));\n    let property: EvaluateResult;\n    if (path.node.computed) {\n      property = this.evaluate(propertyPath);\n    } else {\n      property = this.evaluateKey(propertyPath);\n    }\n    if (property.confident) {\n      let objectPath = path.get('object');\n      let object = this.evaluate(objectPath);\n      if (object.confident) {\n        let confidentObject = object;\n        let confidentProperty = property;\n        return {\n          confident: true,\n          get value() {\n            if (optionalChain) {\n              return confidentObject.value != null\n                ? confidentObject.value[confidentProperty.value]\n                : confidentObject.value;\n            } else {\n              return confidentObject.value[confidentProperty.value];\n            }\n          },\n        };\n      }\n    }\n    return { confident: false };\n  }\n\n  evaluateKey(path: NodePath): EvaluateResult {\n    let first = this.evaluate(path);\n    if (first.confident) {\n      return first;\n    }\n    if (path.isIdentifier()) {\n      return { confident: true, value: path.node.name };\n    }\n    return { confident: false };\n  }\n\n  evaluate(path: NodePath): EvaluateResult {\n    let known = this.knownPaths.get(path);\n    if (known) {\n      return known;\n    }\n    let result = this.realEvaluate(path);\n    return result;\n  }\n\n  private realEvaluate(path: NodePath): EvaluateResult {\n    let builtIn = path.evaluate();\n    if (isConfidentResult(builtIn)) {\n      return builtIn;\n    }\n\n    if (path.isMemberExpression()) {\n      return this.evaluateMember(path, false);\n    }\n\n    // Here we are glossing over the lack of a real OptionalMemberExpression type\n    // in our @babel/traverse typings.\n    if (path.node.type === 'OptionalMemberExpression') {\n      return this.evaluateMember(path as NodePath<t.OptionalMemberExpression>, true);\n    }\n\n    if (path.isStringLiteral()) {\n      return { confident: true, value: path.node.value };\n    }\n\n    if (path.isNumericLiteral()) {\n      return { confident: true, value: path.node.value };\n    }\n\n    if (path.isBooleanLiteral()) {\n      return { confident: true, value: path.node.value };\n    }\n\n    if (path.isNullLiteral()) {\n      return { confident: true, value: null };\n    }\n\n    if (path.isObjectExpression()) {\n      let props = assertArray(path.get('properties')).map(p => {\n        if (p.isSpreadElement()) {\n          return [{ confident: false }, { confident: false }];\n        }\n        let key = assertNotArray(p.get('key'));\n        let keyEvalValue = this.evaluateKey(key);\n        let value = assertNotArray(p.get('value'));\n        let valueEvalValue = this.evaluate(value);\n        return [keyEvalValue, valueEvalValue];\n      });\n      for (let [k, v] of props) {\n        if (!k.confident || !v.confident) {\n          return { confident: false };\n        }\n      }\n      let confidentProps = props as ConfidentResult[][];\n      return {\n        confident: true,\n        get value() {\n          let result: any = {};\n          for (let [k, v] of confidentProps) {\n            result[k.value] = v.value;\n          }\n          return result;\n        },\n      };\n    }\n\n    if (path.isArrayExpression()) {\n      let elements = path.get('elements').map(element => {\n        return this.evaluate(element as NodePath);\n      });\n      if (elements.every(element => element.confident)) {\n        let confidentElements = elements as ConfidentResult[];\n        return {\n          confident: true,\n          get value() {\n            return confidentElements.map(element => element.value);\n          },\n        };\n      }\n    }\n\n    if (path.isAssignmentExpression()) {\n      let leftPath = path.get('left');\n      if (leftPath.isIdentifier()) {\n        let rightPath = path.get('right');\n        let right = this.evaluate(rightPath);\n        if (right.confident) {\n          this.locals[leftPath.node.name] = right.value;\n          return right;\n        }\n      }\n    }\n\n    if (path.isCallExpression()) {\n      let result = this.maybeEvaluateRuntimeConfig(path);\n      if (result.confident) {\n        return result;\n      }\n      result = this.evaluateMacroCall(path);\n      if (result.confident) {\n        return result;\n      }\n    }\n\n    if (path.isLogicalExpression() || path.isBinaryExpression()) {\n      let operator = path.node.operator as string;\n      if (binops[operator]) {\n        let leftOperand = this.evaluate(path.get('left') as NodePath<t.Expression>);\n        if (leftOperand.confident) {\n          let rightOperand = this.evaluate(path.get('right') as NodePath<t.Expression>);\n          if (leftOperand.confident && rightOperand.confident) {\n            let value = binops[operator](leftOperand.value, rightOperand.value);\n            return { confident: true, value };\n          }\n        }\n      }\n      return { confident: false };\n    }\n\n    if (path.isConditionalExpression()) {\n      let test = this.evaluate(path.get('test'));\n      if (test.confident) {\n        let result = test.value ? this.evaluate(path.get('consequent')) : this.evaluate(path.get('alternate'));\n        if (result.confident) {\n          return result;\n        }\n      }\n    }\n\n    if (path.isUnaryExpression()) {\n      let operator = path.node.operator as string;\n      if (unops[operator]) {\n        let operand = this.evaluate(path.get('argument') as NodePath<t.Expression>);\n        if (operand.confident) {\n          let value = unops[operator](operand.value);\n          return { confident: true, value };\n        }\n      }\n      return { confident: false };\n    }\n\n    if (path.isIdentifier()) {\n      if (!this.locals.hasOwnProperty(path.node.name)) {\n        return { confident: false };\n      }\n      return { confident: true, value: this.locals[path.node.name] };\n    }\n\n    return { confident: false };\n  }\n\n  // This handles the presence of our runtime-mode getConfig functions. We want\n  // to designate them as { confident: true }, because it's important that we\n  // give feedback even in runtime-mode if the developer is trying to pass\n  // non-static arguments somewhere they're not supposed to. But we don't\n  // actually want to calculate their value here because that has been deferred\n  // to runtime. That's why we've made `value` lazy. It lets us check the\n  // confidence without actually forcing the value.\n  private maybeEvaluateRuntimeConfig(path: NodePath<t.CallExpression>): EvaluateResult {\n    if (!this.state) {\n      return { confident: false };\n    }\n    let callee = path.get('callee');\n    if (callee.isIdentifier()) {\n      // Does the identifier refer to our runtime config?\n      if (callee.referencesImport(this.state.pathToOurAddon('runtime'), 'config')) {\n        return {\n          confident: true,\n          get value() {\n            throw new Error(`bug in @embroider/macros: didn't expect to need to evaluate this value`);\n          },\n        };\n      }\n    }\n    return { confident: false };\n  }\n\n  evaluateMacroCall(path: NodePath<t.CallExpression>): EvaluateResult {\n    if (!this.state) {\n      return { confident: false };\n    }\n    let callee = path.get('callee');\n    if (callee.referencesImport('@embroider/macros', 'dependencySatisfies')) {\n      return { confident: true, value: dependencySatisfies(path, this.state) };\n    }\n    if (callee.referencesImport('@embroider/macros', 'moduleExists')) {\n      return { confident: true, value: moduleExists(path, this.state) };\n    }\n    if (callee.referencesImport('@embroider/macros', 'getConfig')) {\n      return { confident: true, value: getConfig(path, this.state, 'package') };\n    }\n    if (callee.referencesImport('@embroider/macros', 'getOwnConfig')) {\n      return { confident: true, value: getConfig(path, this.state, 'own') };\n    }\n    if (callee.referencesImport('@embroider/macros', 'getGlobalConfig')) {\n      return { confident: true, value: getConfig(path, this.state, 'getGlobalConfig') };\n    }\n    if (callee.referencesImport('@embroider/macros', 'isDevelopingApp')) {\n      return {\n        confident: true,\n        value: Boolean(\n          this.state.opts.appPackageRoot &&\n            this.state.opts.isDevelopingPackageRoots.includes(this.state.opts.appPackageRoot)\n        ),\n      };\n    }\n    if (callee.referencesImport('@embroider/macros', 'isDevelopingThisPackage')) {\n      return {\n        confident: true,\n        value: this.state.opts.isDevelopingPackageRoots.includes(this.state.owningPackage().root),\n      };\n    }\n    if (callee.referencesImport('@embroider/macros', 'isTesting')) {\n      let g = getConfig(path, this.state, 'getGlobalConfig') as any;\n      let e = g && g['@embroider/macros'];\n      let value = Boolean(e && e.isTesting);\n      return { confident: true, value };\n    }\n    return { confident: false };\n  }\n}\n\n// these next two functions are here because the type definitions we're using\n// don't seem to know exactly which NodePath properties are arrays and which\n// aren't.\nexport function assertNotArray<T>(input: T | T[]): T {\n  if (Array.isArray(input)) {\n    throw new Error(`bug: not supposed to be an array`);\n  }\n  return input;\n}\nexport function assertArray<T>(input: T | T[]): T[] {\n  if (!Array.isArray(input)) {\n    throw new Error(`bug: supposed to be an array`);\n  }\n  return input;\n}\n\nexport function buildLiterals(\n  value: unknown | undefined,\n  babelContext: typeof Babel\n): t.Identifier | t.ObjectExpression {\n  if (typeof value === 'undefined') {\n    return babelContext.types.identifier('undefined');\n  }\n  let statement = babelContext.parse(`a(${JSON.stringify(value)})`) as t.File;\n  let expression = (statement.program.body[0] as t.ExpressionStatement).expression as t.CallExpression;\n  return expression.arguments[0] as t.ObjectExpression;\n}\n"]}