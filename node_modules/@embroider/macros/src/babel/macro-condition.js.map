{"version":3,"file":"macro-condition.js","sourceRoot":"","sources":["macro-condition.ts"],"names":[],"mappings":";;;;;;AACA,mDAA4C;AAE5C,oDAA4B;AAO5B,SAAgB,oBAAoB,CAClC,IAAuD;IAEvD,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAI,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,EAAE;YAClE,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAXD,oDAWC;AAED,SAAwB,cAAc,CAAC,eAAmC,EAAE,KAAY;IACtF,IAAI,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACxD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,IAAA,eAAK,EAAC,eAAe,EAAE,2DAA2D,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KACxG;IAED,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;IAC3B,IAAI,SAAS,GAAG,IAAI,yBAAS,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACjE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;QACxB,MAAM,IAAA,eAAK,EAAC,IAAI,CAAC,CAAC,CAAC,EAAE,+DAA+D,CAAC,CAAC;KACvF;IAED,IAAI,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACnD,IAAI,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAEjD,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;QAClC,IAAI,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC;KACxG;SAAM;QACL,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9G,IAAI,IAAI,EAAE;YACR,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;SACnC;aAAM;YACL,eAAe,CAAC,MAAM,EAAE,CAAC;SAC1B;QACD,IAAI,OAAO,EAAE;YACX,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAC5B;KACF;AACH,CAAC;AA7BD,iCA6BC","sourcesContent":["import type { NodePath } from '@babel/traverse';\nimport { Evaluator } from './evaluate-json';\nimport type { types as t } from '@babel/core';\nimport error from './error';\nimport State from './state';\n\nexport type MacroConditionPath = NodePath<t.IfStatement | t.ConditionalExpression> & {\n  get(test: 'test'): NodePath<t.CallExpression> & { get(callee: 'callee'): NodePath<t.Identifier> };\n};\n\nexport function isMacroConditionPath(\n  path: NodePath<t.IfStatement | t.ConditionalExpression>\n): path is MacroConditionPath {\n  let test = path.get('test');\n  if (test.isCallExpression()) {\n    let callee = test.get('callee');\n    if (callee.referencesImport('@embroider/macros', 'macroCondition')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default function macroCondition(conditionalPath: MacroConditionPath, state: State) {\n  let args = conditionalPath.get('test').get('arguments');\n  if (args.length !== 1) {\n    throw error(conditionalPath, `macroCondition accepts exactly one argument, you passed ${args.length}`);\n  }\n\n  let [predicatePath] = args;\n  let predicate = new Evaluator({ state }).evaluate(predicatePath);\n  if (!predicate.confident) {\n    throw error(args[0], `the first argument to macroCondition must be statically known`);\n  }\n\n  let consequent = conditionalPath.get('consequent');\n  let alternate = conditionalPath.get('alternate');\n\n  if (state.opts.mode === 'run-time') {\n    let callee = conditionalPath.get('test').get('callee');\n    callee.replaceWith(state.importUtil.import(callee, state.pathToOurAddon('runtime'), 'macroCondition'));\n  } else {\n    let [kept, removed] = predicate.value ? [consequent.node, alternate.node] : [alternate.node, consequent.node];\n    if (kept) {\n      conditionalPath.replaceWith(kept);\n    } else {\n      conditionalPath.remove();\n    }\n    if (removed) {\n      state.removed.add(removed);\n    }\n  }\n}\n"]}