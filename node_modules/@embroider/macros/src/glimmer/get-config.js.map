{"version":3,"file":"get-config.js","sourceRoot":"","sources":["get-config.ts"],"names":[],"mappings":";;AAEA,SAAwB,SAAS,CAC/B,IAAS,EACT,WAA+C;AAC/C,4EAA4E;AAC5E,8EAA8E;AAC9E,8EAA8E;AAC9E,wEAAwE;AACxE,OAA2B,EAC3B,UAAkB,EAClB,GAAY,EACZ,YAA0B;IAE1B,IAAI,YAAY,CAAC;IACjB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACjC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC,EAAE;QACzD,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,0BAA0B,CAAC,CAAC;KAC7G;IAED,IAAI,EAAE,GAAG,YAAY,CAAC,WAAW,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC;IACzD,IAAI,CAAC,EAAE,EAAE;QACP,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,GAAG,EAAE;QACP,YAAY,GAAG,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;KACrC;SAAM;QACL,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SAClE;QACD,IAAI,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5D,YAAY,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC5C;IACD,OAAO,OAAO,YAAY,KAAK,QAAQ,IAAI,YAAY,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5E,IAAI,GAAG,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QACzB,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAQ,CAAC;KAC/C;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAtCD,4BAsCC","sourcesContent":["import type { PackageCache } from '@embroider/shared-internals';\n\nexport default function getConfig(\n  node: any,\n  userConfigs: { [packageRoot: string]: unknown },\n  // when we're running in traditional ember-cli, baseDir is configured and we\n  // do all lookups relative to that (single) package. But when we're running in\n  // embroider stage3 we process all packages simultaneously, so baseDir is left\n  // unconfigured and moduleName will be the full path to the source file.\n  baseDir: string | undefined,\n  moduleName: string,\n  own: boolean,\n  packageCache: PackageCache\n) {\n  let targetConfig;\n  let params = node.params.slice();\n  if (!params.every((p: any) => p.type === 'StringLiteral')) {\n    throw new Error(`all arguments to ${own ? 'macroGetOwnConfig' : 'macroGetConfig'} must be string literals`);\n  }\n\n  let us = packageCache.ownerOfFile(baseDir || moduleName);\n  if (!us) {\n    return undefined;\n  }\n\n  if (own) {\n    targetConfig = userConfigs[us.root];\n  } else {\n    let packageName = params.shift();\n    if (!packageName) {\n      throw new Error(`macroGetConfig requires at least one argument`);\n    }\n    let targetPkg = packageCache.resolve(packageName.value, us);\n    targetConfig = userConfigs[targetPkg.root];\n  }\n  while (typeof targetConfig === 'object' && targetConfig && params.length > 0) {\n    let key = params.shift();\n    targetConfig = targetConfig[key.value] as any;\n  }\n  return targetConfig;\n}\n"]}