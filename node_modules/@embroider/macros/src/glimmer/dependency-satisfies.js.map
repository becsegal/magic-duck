{"version":3,"file":"dependency-satisfies.js","sourceRoot":"","sources":["dependency-satisfies.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAGnC,SAAwB,mBAAmB,CACzC,IAAS;AACT,4EAA4E;AAC5E,8EAA8E;AAC9E,8EAA8E;AAC9E,wEAAwE;AACxE,OAA2B,EAC3B,UAAkB,EAClB,YAA0B;IAE1B,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,+DAA+D,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;KACtG;IAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,eAAe,CAAC,EAAE;QAC9D,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;KACtF;IAED,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACvC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAEjC,IAAI,EAAE,GAAG,YAAY,CAAC,WAAW,CAAC,OAAO,IAAI,UAAU,CAAC,CAAC;IACzD,IAAI,CAAC,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,aAAa,CAAC,WAAW,CAAC,CAAA,EAAE;QACnC,OAAO,KAAK,CAAC;KACd;IAED,IAAI,GAAG,CAAC;IACR,IAAI;QACF,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;KAC7C;IAAC,OAAO,GAAG,EAAE;QACZ,sEAAsE;KACvE;IAED,IAAI,GAAG,EAAE;QACP,OAAO,IAAA,kBAAS,EAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE;YACnC,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;KACJ;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAvCD,sCAuCC","sourcesContent":["import { satisfies } from 'semver';\nimport type { PackageCache } from '@embroider/shared-internals';\n\nexport default function dependencySatisfies(\n  node: any,\n  // when we're running in traditional ember-cli, baseDir is configured and we\n  // do all lookups relative to that (single) package. But when we're running in\n  // embroider stage3 we process all packages simultaneously, so baseDir is left\n  // unconfigured and moduleName will be the full path to the source file.\n  baseDir: string | undefined,\n  moduleName: string,\n  packageCache: PackageCache\n) {\n  if (node.params.length !== 2) {\n    throw new Error(`macroDependencySatisfies requires two arguments, you passed ${node.params.length}`);\n  }\n\n  if (!node.params.every((p: any) => p.type === 'StringLiteral')) {\n    throw new Error(`all arguments to macroDependencySatisfies must be string literals`);\n  }\n\n  let packageName = node.params[0].value;\n  let range = node.params[1].value;\n\n  let us = packageCache.ownerOfFile(baseDir || moduleName);\n  if (!us?.hasDependency(packageName)) {\n    return false;\n  }\n\n  let pkg;\n  try {\n    pkg = packageCache.resolve(packageName, us);\n  } catch (err) {\n    // it's not an error if we can't resolve it, we just don't satisfy it.\n  }\n\n  if (pkg) {\n    return satisfies(pkg.version, range, {\n      includePrerelease: true,\n    });\n  }\n  return false;\n}\n"]}