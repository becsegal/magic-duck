{"version":3,"file":"ast-transform.js","sourceRoot":"","sources":["ast-transform.ts"],"names":[],"mappings":"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","sourcesContent":["import literal from './literal';\nimport getConfig from './get-config';\nimport dependencySatisfies from './dependency-satisfies';\nimport { maybeAttrs } from './macro-maybe-attrs';\nimport { macroIfBlock, macroIfExpression, macroIfMustache } from './macro-condition';\nimport { failBuild } from './fail-build';\nimport { PackageCache } from '@embroider/shared-internals';\n\nexport interface BuildPluginParams {\n  // Glimmer requires this on ast transforms.\n  name: string;\n\n  // this is the location of @embroider/macros itself. Glimmer requires this on\n  // ast transforms.\n  baseDir: string;\n\n  methodName: string;\n\n  firstTransformParams: FirstTransformParams;\n}\n\nexport interface FirstTransformParams {\n  // this is the location of the particular package (app or addon) that is\n  // depending on @embroider/macros *if* we're in a classic build. Under\n  // embroider the build is global and there's no single packageRoot.\n  packageRoot: string | undefined;\n\n  // this is the path to the topmost package\n  appRoot: string;\n\n  // this holds all the actual user configs that were sent into the macros\n  configs: { [packageRoot: string]: object };\n}\n\nexport function buildPlugin(params: BuildPluginParams) {\n  return {\n    name: params.name,\n    plugin:\n      params.methodName === 'makeFirstTransform'\n        ? makeFirstTransform(params.firstTransformParams)\n        : makeSecondTransform(),\n    baseDir: () => params.baseDir,\n  };\n}\n\nexport function makeFirstTransform(opts: FirstTransformParams) {\n  function embroiderFirstMacrosTransform(env: {\n    syntax: { builders: any };\n    meta: { moduleName: string };\n    filename: string;\n  }) {\n    if (!opts.packageRoot && !env.filename) {\n      throw new Error(`bug in @embroider/macros. Running without packageRoot but don't have filename.`);\n    }\n\n    let packageCache = PackageCache.shared('embroider-stage3', opts.appRoot);\n\n    let scopeStack: string[][] = [];\n\n    // packageRoot is set when we run inside classic ember-cli. Otherwise we're in\n    // Embroider, where we can use absolute filenames.\n    const moduleName = opts.packageRoot ? env.meta.moduleName : env.filename;\n\n    return {\n      name: '@embroider/macros/first',\n\n      visitor: {\n        Program: {\n          enter(node: any) {\n            if (node.blockParams.length > 0) {\n              scopeStack.push(node.blockParams);\n            }\n          },\n          exit(node: any) {\n            if (node.blockParams.length > 0) {\n              scopeStack.pop();\n            }\n          },\n        },\n        SubExpression(node: any) {\n          if (node.path.type !== 'PathExpression') {\n            return;\n          }\n          if (inScope(scopeStack, node.path.parts[0])) {\n            return;\n          }\n          if (node.path.original === 'macroGetOwnConfig') {\n            return literal(\n              getConfig(node, opts.configs, opts.packageRoot, moduleName, true, packageCache),\n              env.syntax.builders\n            );\n          }\n          if (node.path.original === 'macroGetConfig') {\n            return literal(\n              getConfig(node, opts.configs, opts.packageRoot, moduleName, false, packageCache),\n              env.syntax.builders\n            );\n          }\n          if (node.path.original === 'macroDependencySatisfies') {\n            return literal(dependencySatisfies(node, opts.packageRoot, moduleName, packageCache), env.syntax.builders);\n          }\n        },\n        MustacheStatement(node: any) {\n          if (node.path.type !== 'PathExpression') {\n            return;\n          }\n          if (inScope(scopeStack, node.path.parts[0])) {\n            return;\n          }\n          if (node.path.original === 'macroGetOwnConfig') {\n            return env.syntax.builders.mustache(\n              literal(\n                getConfig(node, opts.configs, opts.packageRoot, moduleName, true, packageCache),\n                env.syntax.builders\n              )\n            );\n          }\n          if (node.path.original === 'macroGetConfig') {\n            return env.syntax.builders.mustache(\n              literal(\n                getConfig(node, opts.configs, opts.packageRoot, moduleName, false, packageCache),\n                env.syntax.builders\n              )\n            );\n          }\n          if (node.path.original === 'macroDependencySatisfies') {\n            return env.syntax.builders.mustache(\n              literal(dependencySatisfies(node, opts.packageRoot, moduleName, packageCache), env.syntax.builders)\n            );\n          }\n        },\n      },\n    };\n  }\n  (embroiderFirstMacrosTransform as any).embroiderMacrosASTMarker = true;\n  (embroiderFirstMacrosTransform as any).parallelBabel = {\n    requireFile: __filename,\n    buildUsing: 'makeFirstTransform',\n    get params(): FirstTransformParams {\n      return opts;\n    },\n  };\n  return embroiderFirstMacrosTransform;\n}\n\nexport function makeSecondTransform() {\n  function embroiderSecondMacrosTransform(env: { syntax: { builders: any } }) {\n    let scopeStack: string[][] = [];\n    return {\n      name: '@embroider/macros/second',\n\n      visitor: {\n        Program: {\n          enter(node: any) {\n            if (node.blockParams.length > 0) {\n              scopeStack.push(node.blockParams);\n            }\n          },\n          exit(node: any) {\n            if (node.blockParams.length > 0) {\n              scopeStack.pop();\n            }\n          },\n        },\n        BlockStatement(node: any) {\n          if (node.path.type !== 'PathExpression') {\n            return;\n          }\n          if (inScope(scopeStack, node.path.parts[0])) {\n            return;\n          }\n          if (node.path.original === 'if') {\n            return macroIfBlock(node);\n          }\n        },\n        SubExpression(node: any) {\n          if (node.path.type !== 'PathExpression') {\n            return;\n          }\n          if (inScope(scopeStack, node.path.parts[0])) {\n            return;\n          }\n          if (node.path.original === 'if') {\n            return macroIfExpression(node, env.syntax.builders);\n          }\n          if (node.path.original === 'macroFailBuild') {\n            failBuild(node);\n          }\n        },\n        ElementNode(node: any) {\n          node.modifiers = node.modifiers.filter((modifier: any) => {\n            if (\n              modifier.path.type === 'SubExpression' &&\n              modifier.path.path.type === 'PathExpression' &&\n              modifier.path.path.original === 'if'\n            ) {\n              modifier.path = macroIfExpression(modifier.path, env.syntax.builders);\n              if (modifier.path.type === 'UndefinedLiteral') {\n                return false;\n              }\n            }\n            if (modifier.path.type !== 'PathExpression') {\n              return true;\n            }\n            if (inScope(scopeStack, modifier.path.parts[0])) {\n              return true;\n            }\n            if (modifier.path.original === 'macroMaybeAttrs') {\n              maybeAttrs(node, modifier, env.syntax.builders);\n            } else {\n              return true;\n            }\n          });\n        },\n        MustacheStatement(node: any) {\n          if (node.path.type !== 'PathExpression') {\n            return;\n          }\n          if (inScope(scopeStack, node.path.parts[0])) {\n            return;\n          }\n          if (node.path.original === 'if') {\n            return macroIfMustache(node, env.syntax.builders);\n          }\n          if (node.path.original === 'macroFailBuild') {\n            failBuild(node);\n          }\n        },\n      },\n    };\n  }\n  (embroiderSecondMacrosTransform as any).embroiderMacrosASTMarker = true;\n  (embroiderSecondMacrosTransform as any).parallelBabel = {\n    requireFile: __filename,\n    buildUsing: 'makeSecondTransform',\n    params: undefined,\n  };\n  return embroiderSecondMacrosTransform;\n}\n\nfunction inScope(scopeStack: string[][], name: string) {\n  for (let scope of scopeStack) {\n    if (scope.includes(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}