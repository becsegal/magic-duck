{"version":3,"file":"ember-addon-main.js","sourceRoot":"","sources":["ember-addon-main.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppInstance } from '@embroider/shared-internals';\nimport { join } from 'path';\nimport { BuildPluginParams } from './glimmer/ast-transform';\nimport { MacrosConfig, isEmbroiderMacrosPlugin } from './node';\n\nlet hasWrappedToTree = false;\n\nexport = {\n  name: '@embroider/macros',\n  included(this: any, parent: any) {\n    this._super.included.apply(this, arguments);\n    this.options.babel = { plugins: [] };\n    let parentOptions = (parent.options = parent.options || {});\n    let ownOptions = (parentOptions['@embroider/macros'] = parentOptions['@embroider/macros'] || {});\n\n    let appInstance: AppInstance = this._findHost();\n    let macrosConfig = getMacrosConfig(appInstance);\n    this.setMacrosConfig(macrosConfig);\n\n    // if parent is an addon it has root. If it's an app it has project.root.\n    let source = parent.root || parent.project.root;\n\n    if (ownOptions.setOwnConfig) {\n      macrosConfig.setOwnConfig(source, ownOptions.setOwnConfig);\n    }\n\n    if (ownOptions.setConfig) {\n      for (let [packageName, config] of Object.entries(ownOptions.setConfig)) {\n        macrosConfig.setConfig(source, packageName, config as object);\n      }\n    }\n\n    if (appInstance.env !== 'production') {\n      // tell the macros our app is under development\n      macrosConfig.enablePackageDevelopment(getAppRoot(appInstance));\n      // also tell them our root project is under development. This can be\n      // different, in the case where this is an addon and the app is the dummy\n      // app.\n      macrosConfig.enablePackageDevelopment(appInstance.project.root);\n      // keep the macros in runtime mode for development & testing\n      macrosConfig.enableRuntimeMode();\n    }\n\n    // add our babel plugin to our parent's babel\n    this.installBabelPlugin(parent);\n\n    // and to our own babel, because we may need to inline runtime config into\n    // our source code\n    this.installBabelPlugin(this);\n\n    appInstance.import('vendor/embroider-macros-test-support.js', { type: 'test' });\n\n    const originalToTree = appInstance.toTree;\n\n    if (!hasWrappedToTree) {\n      // When we're used inside the traditional ember-cli build pipeline without\n      // Embroider, we unfortunately need to hook into here uncleanly because we\n      // need to delineate the point in time after which writing macro config is\n      // forbidden and consuming it becomes allowed. There's no existing hook with\n      // that timing.\n      appInstance.toTree = function (...args) {\n        macrosConfig.finalize();\n        return originalToTree.apply(appInstance, args);\n      };\n      hasWrappedToTree = true;\n    }\n  },\n\n  // Other addons are allowed to call this. It's needed if an addon needs to\n  // emit code containing macros into that addon's parent (via a babel plugin,\n  // for exmple). This is only an issue in classic builds, under embroider all\n  // babel plugins should be thought of as *language extensions* that are\n  // available everywhere, we don't scope them so narrowly so this probably\n  // doesn't come up.\n  installBabelPlugin(this: any, appOrAddonInstance: any) {\n    let babelOptions = (appOrAddonInstance.options.babel = appOrAddonInstance.options.babel || {});\n    let babelPlugins = (babelOptions.plugins = babelOptions.plugins || []);\n    if (!babelPlugins.some(isEmbroiderMacrosPlugin)) {\n      let appInstance = this._findHost();\n      babelPlugins.unshift(...getMacrosConfig(appInstance).babelPluginConfig(appOrAddonInstance));\n    }\n  },\n\n  setupPreprocessorRegistry(this: any, type: 'parent' | 'self', registry: any) {\n    if (type === 'parent') {\n      // the htmlbars-ast-plugins are split into two parts because order is\n      // important. Weirdly, they appear to run in the reverse order that you\n      // register them here.\n      //\n      // MacrosConfig.astPlugins is static because in classic ember-cli, at this\n      // point there's not yet an appInstance, so we defer getting it and\n      // calling setConfig until our included hook.\n      let { plugins, setConfig, lazyParams } = MacrosConfig.astPlugins((this as any).parent.root);\n      this.setMacrosConfig = setConfig;\n      plugins.forEach((plugin, index) => {\n        let name = `@embroider/macros/${index}`;\n        let baseDir = join(__dirname, '..');\n\n        let params: BuildPluginParams = {\n          name,\n          firstTransformParams: lazyParams,\n          methodName: index === 0 ? 'makeSecondTransform' : 'makeFirstTransform',\n          baseDir,\n        };\n\n        registry.add('htmlbars-ast-plugin', {\n          name,\n          plugin,\n          parallelBabel: {\n            requireFile: join(__dirname, 'glimmer', 'ast-transform.js'),\n            buildUsing: 'buildPlugin',\n            params,\n          },\n          baseDir: () => baseDir,\n        });\n      });\n    }\n  },\n\n  options: {},\n};\n\n// this can differ from appInstance.project.root because Dummy apps are terrible\nfunction getAppRoot(appInstance: AppInstance): string {\n  return join(appInstance.project.configPath(), '..', '..');\n}\n\nfunction getMacrosConfig(appInstance: AppInstance): MacrosConfig {\n  let appRoot = join(appInstance.project.configPath(), '..', '..');\n  return MacrosConfig.for(appInstance, appRoot);\n}\n"]}