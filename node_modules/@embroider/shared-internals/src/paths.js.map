{"version":3,"file":"paths.js","sourceRoot":"","sources":["paths.ts"],"names":[],"mappings":";;;AAAA,+BAAqE;AAErE,8EAA8E;AAC9E,UAAU;AACV,6BAA6B;AAC7B,+BAA+B;AAC/B,2BAA2B;AAC3B,EAAE;AACF,SAAgB,gBAAgB,CAAC,OAAe,EAAE,MAAc;IAC9D,IAAI,MAAM,GAAG,IAAA,WAAI,EAAC,IAAA,eAAQ,EAAC,OAAO,EAAE,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC,EAAE,IAAA,eAAQ,EAAC,MAAM,CAAC,CAAC,CAAC;IACxE,IAAI,CAAC,IAAA,iBAAU,EAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAClD,MAAM,GAAG,IAAI,GAAG,MAAM,CAAC;KACxB;IACD,IAAI,IAAA,iBAAU,EAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACjD,4CAA4C;QAC5C,yEAAyE;QACzE,yEAAyE;QACzE,kCAAkC;QAClC,OAAO,MAAM,CAAC;KACf;IAED,qEAAqE;IACrE,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QAC5B,OAAO,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAC/B;IAED,wEAAwE;IACxE,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QAC7B,OAAO,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAChC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAxBD,4CAwBC;AAED,iFAAiF;AACjF,uBAAuB;AACvB,SAAgB,iBAAiB,CAAC,UAAoB;IACpD,OAAO,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC5F,CAAC;AAFD,8CAEC","sourcesContent":["import { relative, isAbsolute, dirname, join, basename } from 'path';\n\n// by \"explicit\", I mean that we want \"./local/thing\" instead of \"local/thing\"\n// because\n//     import \"./local/thing\"\n// has a different meaning than\n//     import \"local/thing\"\n//\nexport function explicitRelative(fromDir: string, toFile: string) {\n  let result = join(relative(fromDir, dirname(toFile)), basename(toFile));\n  if (!isAbsolute(result) && !result.startsWith('.')) {\n    result = './' + result;\n  }\n  if (isAbsolute(toFile) && result.endsWith(toFile)) {\n    // this prevents silly \"relative\" paths like\n    // \"../../../../../Users/you/projects/your/stuff\" when we could have just\n    // said \"/Users/you/projects/your/stuff\". The silly path isn't incorrect,\n    // but it's unnecessarily verbose.\n    return toFile;\n  }\n\n  // windows supports both \"./\" and \".\\\", but webpack 5 insists on \"./\"\n  if (result.startsWith('.\\\\')) {\n    return './' + result.slice(2);\n  }\n\n  // windows supports both \"../\" and \"..\\\", but webpack 5 insists on \"../\"\n  if (result.startsWith('..\\\\')) {\n    return '../' + result.slice(3);\n  }\n\n  return result;\n}\n\n// given a list like ['.js', '.ts'], return a regular expression for files ending\n// in those extensions.\nexport function extensionsPattern(extensions: string[]): RegExp {\n  return new RegExp(`(${extensions.map(e => `${e.replace('.', '\\\\.')}`).join('|')})$`, 'i');\n}\n"]}