{"version":3,"file":"ember-cli-models.js","sourceRoot":"","sources":["ember-cli-models.ts"],"names":[],"mappings":";;;AAiIA,SAAgB,mBAAmB,CAAC,KAAoB;IACtD,OAAO,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,CAAC;AACxC,CAAC;AAFD,kDAEC;AAED,SAAgB,gBAAgB,CAAC,KAAoB;IACnD,IAAI,mBAAmB,CAAC,KAAK,CAAC,EAAE;QAC9B,OAAO,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACvC;SAAM;QACL,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAND,4CAMC","sourcesContent":["import type { Funnel } from 'broccoli-funnel';\nimport type { Node } from 'broccoli-node-api';\nimport { PackageInfo } from './metadata';\nexport interface Project {\n  targets: unknown;\n  ui: {\n    write(...args: any[]): void;\n  };\n  pkg: PackageInfo;\n  root: string;\n  addons: AddonInstance[];\n  name(): string;\n  configPath(): string;\n}\n\nexport interface AppInstance {\n  env: 'development' | 'test' | 'production';\n  project: Project;\n  options: any;\n  addonPostprocessTree: (which: string, tree: Node) => Node;\n  import(path: string, opts?: { type?: string }): void;\n  toTree(additionalTrees?: Node[]): Node;\n}\n\nexport type FilePath = string;\nexport type OutputFileToInputFileMap = { [filePath: string]: FilePath[] };\n\ninterface PreprocessPlugin {\n  name: string;\n  ext: string;\n}\nexport interface EmberCliPreprocessRegistry {\n  extensionsForType(type: string): string[];\n  load(type: string): PreprocessPlugin[];\n  registeredForType(type: string): PreprocessPlugin[];\n  add(type: string, plugin: PreprocessPlugin): void;\n  remove(type: string, pluginName: string): void;\n}\n\nexport interface EmberAppInstance {\n  env: 'development' | 'test' | 'production';\n  name: string;\n  _scriptOutputFiles: OutputFileToInputFileMap;\n  _styleOutputFiles: OutputFileToInputFileMap;\n  legacyTestFilesToAppend: FilePath[];\n  vendorTestStaticStyles: FilePath[];\n  _customTransformsMap: Map<string, any>;\n  _nodeModules: Map<string, { name: string; path: FilePath }>;\n  options: any;\n  tests: boolean;\n  trees: any;\n  project: Project;\n  registry: EmberCliPreprocessRegistry;\n  testIndex(): Node;\n  getLintTests(): Node;\n  otherAssetPaths: any[];\n  addonPostprocessTree: (which: string, tree: Node) => Node;\n}\n\ninterface BaseAddonInstance {\n  registry: EmberCliPreprocessRegistry;\n  project: Project;\n  pkg: PackageInfo;\n  app: {\n    options: any;\n  };\n  root: string;\n  options: any;\n  addons: AddonInstance[];\n  name: string;\n  _name: string;\n  _super: any;\n  _meta_: any;\n  _buildFastbootConfigTree(config: any): Node;\n  _shouldIncludeFiles(): boolean;\n  outputReady(config: any): any;\n  moduleName?(): string;\n  shouldCompileTemplates(): boolean;\n  isDevelopingAddon?(): boolean;\n  hintingEnabled(): boolean;\n  jshintAddonTree(): Node | undefined;\n  preprocessJs(tree: Node, sep: any, moduleName: any, config: any): Node;\n  compileStyles(tree: Node): Node;\n  cacheKeyForTree?(treeName: string): string;\n  getEngineConfigContents?(): any;\n  engineConfig?(env: string, config: any): any;\n  treeGenerator(path: string): Node;\n  treeForFastBoot(tree: Funnel | undefined): Node | undefined;\n  _findHost(): AppInstance;\n  _treeFor(treeName: string): Node;\n  treePaths: {\n    // app: string;\n    // styles: string;\n    // templates: string;\n    // addon: 'addon';\n    // 'addon-styles': string;\n    // 'addon-templates': string;\n    // vendor: string;\n    // 'test-support': string;\n    // 'addon-test-support': string;\n    // public: string;\n\n    addon: string;\n    'addon-styles': string;\n    styles: string;\n    'addon-test-support': string;\n    'test-support': string;\n    app: string;\n    public: string;\n    vendor: string;\n  };\n  treeForMethods: Record<string, string>;\n}\n\nexport type AddonTreePath = keyof BaseAddonInstance['treePaths'];\n\nexport interface DeepAddonInstance extends BaseAddonInstance {\n  // this is how it looks when an addon is beneath another addon\n  parent: AddonInstance;\n}\n\nexport interface ShallowAddonInstance extends BaseAddonInstance {\n  // this is how it looks when an addon is directly beneath the app\n  parent: Project;\n  app: AppInstance;\n}\n\nexport type AddonInstance = DeepAddonInstance | ShallowAddonInstance;\n\nexport function isDeepAddonInstance(addon: AddonInstance): addon is DeepAddonInstance {\n  return addon.parent !== addon.project;\n}\n\nexport function findTopmostAddon(addon: AddonInstance): ShallowAddonInstance {\n  if (isDeepAddonInstance(addon)) {\n    return findTopmostAddon(addon.parent);\n  } else {\n    return addon;\n  }\n}\n"]}