"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportUtil = void 0;
class ImportUtil {
    constructor(t, program) {
        this.t = t;
        this.program = program;
    }
    removeImport(moduleSpecifier, exportedName) {
        for (let topLevelPath of this.program.get('body')) {
            if (!topLevelPath.isImportDeclaration() ||
                topLevelPath.get('source').node.value !== moduleSpecifier) {
                continue;
            }
            let importSpecifierPath = topLevelPath
                .get('specifiers')
                .find((specifierPath) => exportedName === 'default'
                ? specifierPath.isImportDefaultSpecifier()
                : specifierPath.isImportSpecifier() &&
                    name(specifierPath.node.imported) === exportedName);
            if (importSpecifierPath) {
                if (topLevelPath.node.specifiers.length === 1) {
                    topLevelPath.remove();
                }
                else {
                    importSpecifierPath.remove();
                }
            }
        }
    }
    // Import the given value (if needed) and return an Identifier representing
    // it.
    import(
    // the spot at which you will insert the Identifier we return to you
    target, 
    // the path to the module you're importing from
    moduleSpecifier, 
    // the name you're importing from that module (use "default" for the default
    // export)
    exportedName, 
    // Optional hint for helping us pick a name for the imported binding
    nameHint) {
        var _a;
        let declaration = this.program
            .get('body')
            .find((elt) => elt.isImportDeclaration() && elt.node.source.value === moduleSpecifier);
        if (declaration) {
            let specifier = declaration
                .get('specifiers')
                .find((spec) => exportedName === 'default'
                ? spec.isImportDefaultSpecifier()
                : spec.isImportSpecifier() && name(spec.node.imported) === exportedName);
            if (specifier && ((_a = target.scope.getBinding(specifier.node.local.name)) === null || _a === void 0 ? void 0 : _a.kind) === 'module') {
                return this.t.identifier(specifier.node.local.name);
            }
            else {
                return this.addSpecifier(target, declaration, exportedName, nameHint);
            }
        }
        else {
            this.program.node.body.unshift(this.t.importDeclaration([], this.t.stringLiteral(moduleSpecifier)));
            return this.addSpecifier(target, this.program.get(`body.0`), exportedName, nameHint);
        }
    }
    addSpecifier(target, declaration, exportedName, nameHint) {
        let local = this.t.identifier(unusedNameLike(target, desiredName(nameHint, exportedName, target)));
        let specifier = exportedName === 'default'
            ? this.t.importDefaultSpecifier(local)
            : this.t.importSpecifier(local, this.t.identifier(exportedName));
        declaration.node.specifiers.push(specifier);
        declaration.scope.registerBinding('module', declaration.get(`specifiers.${declaration.node.specifiers.length - 1}`));
        return local;
    }
}
exports.ImportUtil = ImportUtil;
function unusedNameLike(path, name) {
    let candidate = name;
    let counter = 0;
    while (path.scope.hasBinding(candidate)) {
        candidate = `${name}${counter++}`;
    }
    return candidate;
}
function name(node) {
    if (node.type === 'StringLiteral') {
        return node.value;
    }
    else {
        return node.name;
    }
}
function desiredName(nameHint, exportedName, target) {
    if (nameHint) {
        return nameHint;
    }
    if (exportedName === 'default') {
        if (target.isIdentifier()) {
            return target.node.name;
        }
        else {
            return target.scope.generateUidIdentifierBasedOnNode(target.node).name;
        }
    }
    else {
        return exportedName;
    }
}
//# sourceMappingURL=data:application/json;base64,