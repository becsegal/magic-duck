"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.node = node;

var _util = require("@glimmer/util");

function node(name) {
  if (name !== undefined) {
    var type = name;
    return {
      fields: function fields() {
        return /*#__PURE__*/function () {
          function _class(fields) {
            this.type = type;
            (0, _util.assign)(this, fields);
          }

          return _class;
        }();
      }
    };
  } else {
    return {
      fields: function fields() {
        return /*#__PURE__*/function () {
          function _class2(fields) {
            (0, _util.assign)(this, fields);
          }

          return _class2;
        }();
      }
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdjItYS9vYmplY3RzL25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQTRDTSxTQUFBLElBQUEsQ0FBQSxJQUFBLEVBQ0k7QUFRUixNQUFJLElBQUksS0FBUixTQUFBLEVBQXdCO0FBQ3RCLFFBQU0sSUFBSSxHQUFWLElBQUE7QUFDQSxXQUFPO0FBQ0wsTUFBQSxNQURLLEVBQUEsU0FBQSxNQUFBLEdBQ0M7QUFDSixlQUFBLGFBQUEsWUFBQTtBQUtFLG1CQUFBLE1BQUEsQ0FBQSxNQUFBLEVBQTJDO0FBQ3pDLGlCQUFBLElBQUEsR0FBQSxJQUFBO0FBQ0EsOEJBQU0sSUFBTixFQUFBLE1BQUE7QUFDRDs7QUFSSCxpQkFBQSxNQUFBO0FBQUEsU0FBQSxFQUFBO0FBVUQ7QUFaSSxLQUFQO0FBRkYsR0FBQSxNQWdCTztBQUNMLFdBQU87QUFDTCxNQUFBLE1BREssRUFBQSxTQUFBLE1BQUEsR0FDQztBQUNKLGVBQUEsYUFBQSxZQUFBO0FBSUUsbUJBQUEsT0FBQSxDQUFBLE1BQUEsRUFBMkM7QUFDekMsOEJBQU0sSUFBTixFQUFBLE1BQUE7QUFDRDs7QUFOSCxpQkFBQSxPQUFBO0FBQUEsU0FBQSxFQUFBO0FBUUQ7QUFWSSxLQUFQO0FBWUQ7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2lnbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5pbXBvcnQgeyBTb3VyY2VTcGFuIH0gZnJvbSAnLi4vLi4vc291cmNlL3NwYW4nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VOb2RlRmllbGRzIHtcbiAgbG9jOiBTb3VyY2VTcGFuO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgQVNUdjIgbm9kZXMsIHdpdGggYW4gb3B0aW9uYWwgbmFtZSBhbmQgdGhlIG5vZGUnc1xuICogb3B0aW9ucy5cbiAqXG4gKiBgYGB0c1xuICogZXhwb3J0IGNsYXNzIEh0bWxUZXh0IGV4dGVuZHMgbm9kZSgnSHRtbFRleHQnKS5maWVsZHM8eyBjaGFyczogc3RyaW5nIH0+KCkge31cbiAqIGBgYFxuICpcbiAqIFRoaXMgY3JlYXRlcyBhIG5ldyBBU1R2MiBub2RlIHdpdGggdGhlIG5hbWUgYCdIdG1sVGV4dCdgIGFuZCBvbmUgZmllbGQgYGNoYXJzOiBzdHJpbmdgIChpblxuICogYWRkaXRpb24gdG8gYSBgbG9jOiBTb3VyY2VPZmZzZXRzYCBmaWVsZCwgd2hpY2ggYWxsIG5vZGVzIGhhdmUpLlxuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY2xhc3MgQXJncyBleHRlbmRzIG5vZGUoKS5maWVsZHM8e1xuICogIHBvc2l0aW9uYWw6IFBvc2l0aW9uYWxBcmd1bWVudHM7XG4gKiAgbmFtZWQ6IE5hbWVkQXJndW1lbnRzXG4gKiB9PigpIHt9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGNyZWF0ZXMgYSBuZXcgdW4tbmFtZWQgQVNUdjIgbm9kZSB3aXRoIHR3byBmaWVsZHMgKGBwb3NpdGlvbmFsOiBQb3NpdGlvbmFsYCBhbmQgYG5hbWVkOlxuICogTmFtZWRgLCBpbiBhZGRpdGlvbiB0byB0aGUgZ2VuZXJpYyBgbG9jOiBTb3VyY2VPZmZzZXRzYCBmaWVsZCkuXG4gKlxuICogT25jZSB5b3UgY3JlYXRlIGEgbm9kZSB1c2luZyBgbm9kZWAsIGl0IGlzIGluc3RhbnRpYXRlZCB3aXRoIGFsbCBvZiBpdHMgZmllbGRzIChpbmNsdWRpbmcgYGxvY2ApOlxuICpcbiAqIGBgYHRzXG4gKiBuZXcgSHRtbFRleHQoeyBsb2M6IG9mZnNldHMsIGNoYXJzOiBzb21lU3RyaW5nIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlKCk6IHtcbiAgZmllbGRzPEZpZWxkcyBleHRlbmRzIG9iamVjdD4oKTogTm9kZUNvbnN0cnVjdG9yPEZpZWxkcyAmIEJhc2VOb2RlRmllbGRzPjtcbn07XG5leHBvcnQgZnVuY3Rpb24gbm9kZTxUIGV4dGVuZHMgc3RyaW5nPihcbiAgbmFtZTogVFxuKToge1xuICBmaWVsZHM8RmllbGRzIGV4dGVuZHMgb2JqZWN0PigpOiBUeXBlZE5vZGVDb25zdHJ1Y3RvcjxULCBGaWVsZHMgJiBCYXNlTm9kZUZpZWxkcz47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbm9kZTxUIGV4dGVuZHMgc3RyaW5nPihcbiAgbmFtZT86IFRcbik6XG4gIHwge1xuICAgICAgZmllbGRzPEZpZWxkcyBleHRlbmRzIG9iamVjdD4oKTogVHlwZWROb2RlQ29uc3RydWN0b3I8VCwgRmllbGRzICYgQmFzZU5vZGVGaWVsZHM+O1xuICAgIH1cbiAgfCB7XG4gICAgICBmaWVsZHM8RmllbGRzIGV4dGVuZHMgb2JqZWN0PigpOiBOb2RlQ29uc3RydWN0b3I8RmllbGRzICYgQmFzZU5vZGVGaWVsZHM+O1xuICAgIH0ge1xuICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgdHlwZSA9IG5hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZWxkczxGaWVsZHMgZXh0ZW5kcyBvYmplY3Q+KCk6IFR5cGVkTm9kZUNvbnN0cnVjdG9yPFQsIEJhc2VOb2RlRmllbGRzICYgRmllbGRzPiB7XG4gICAgICAgIHJldHVybiBjbGFzcyB7XG4gICAgICAgICAgLy8gU0FGRVRZOiBpbml0aWFsaXplZCB2aWEgYGFzc2lnbmAgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgIGRlY2xhcmUgcmVhZG9ubHkgbG9jOiBTb3VyY2VTcGFuO1xuICAgICAgICAgIHJlYWRvbmx5IHR5cGU6IFQ7XG5cbiAgICAgICAgICBjb25zdHJ1Y3RvcihmaWVsZHM6IEJhc2VOb2RlRmllbGRzICYgRmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgYXNzaWduKHRoaXMsIGZpZWxkcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIFR5cGVkTm9kZUNvbnN0cnVjdG9yPFQsIEJhc2VOb2RlRmllbGRzICYgRmllbGRzPjtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmllbGRzPEZpZWxkcz4oKTogTm9kZUNvbnN0cnVjdG9yPEZpZWxkcyAmIEJhc2VOb2RlRmllbGRzPiB7XG4gICAgICAgIHJldHVybiBjbGFzcyB7XG4gICAgICAgICAgLy8gU0FGRVRZOiBpbml0aWFsaXplZCB2aWEgYGFzc2lnbmAgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgIGRlY2xhcmUgcmVhZG9ubHkgbG9jOiBTb3VyY2VTcGFuO1xuXG4gICAgICAgICAgY29uc3RydWN0b3IoZmllbGRzOiBCYXNlTm9kZUZpZWxkcyAmIEZpZWxkcykge1xuICAgICAgICAgICAgYXNzaWduKHRoaXMsIGZpZWxkcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIE5vZGVDb25zdHJ1Y3RvcjxCYXNlTm9kZUZpZWxkcyAmIEZpZWxkcz47XG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb2RlQ29uc3RydWN0b3I8RmllbGRzPiB7XG4gIG5ldyAoZmllbGRzOiBGaWVsZHMpOiBSZWFkb25seTxGaWVsZHM+O1xufVxuXG50eXBlIFR5cGVkTm9kZTxUIGV4dGVuZHMgc3RyaW5nLCBGaWVsZHM+ID0geyB0eXBlOiBUIH0gJiBSZWFkb25seTxGaWVsZHM+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkTm9kZUNvbnN0cnVjdG9yPFQgZXh0ZW5kcyBzdHJpbmcsIEZpZWxkcz4ge1xuICBuZXcgKG9wdGlvbnM6IEZpZWxkcyk6IFR5cGVkTm9kZTxULCBGaWVsZHM+O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==