"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleElement = exports.InvokeComponent = exports.InvokeBlock = exports.AppendContent = exports.HtmlComment = exports.HtmlText = exports.GlimmerComment = void 0;

var _spanList = require("../../source/span-list");

var _args = require("./args");

var _node = require("./node");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var GlimmerComment = /*#__PURE__*/function (_node$fields) {
  _inheritsLoose(GlimmerComment, _node$fields);

  function GlimmerComment() {
    return _node$fields.apply(this, arguments) || this;
  }

  return GlimmerComment;
}((0, _node.node)('GlimmerComment').fields());

exports.GlimmerComment = GlimmerComment;

var HtmlText = /*#__PURE__*/function (_node$fields2) {
  _inheritsLoose(HtmlText, _node$fields2);

  function HtmlText() {
    return _node$fields2.apply(this, arguments) || this;
  }

  return HtmlText;
}((0, _node.node)('HtmlText').fields());

exports.HtmlText = HtmlText;

var HtmlComment = /*#__PURE__*/function (_node$fields3) {
  _inheritsLoose(HtmlComment, _node$fields3);

  function HtmlComment() {
    return _node$fields3.apply(this, arguments) || this;
  }

  return HtmlComment;
}((0, _node.node)('HtmlComment').fields());

exports.HtmlComment = HtmlComment;

var AppendContent = /*#__PURE__*/function (_node$fields4) {
  _inheritsLoose(AppendContent, _node$fields4);

  function AppendContent() {
    return _node$fields4.apply(this, arguments) || this;
  }

  _createClass(AppendContent, [{
    key: "callee",
    get: function get() {
      if (this.value.type === 'Call') {
        return this.value.callee;
      } else {
        return this.value;
      }
    }
  }, {
    key: "args",
    get: function get() {
      if (this.value.type === 'Call') {
        return this.value.args;
      } else {
        return _args.Args.empty(this.value.loc.collapse('end'));
      }
    }
  }]);

  return AppendContent;
}((0, _node.node)('AppendContent').fields());

exports.AppendContent = AppendContent;

var InvokeBlock = /*#__PURE__*/function (_node$fields5) {
  _inheritsLoose(InvokeBlock, _node$fields5);

  function InvokeBlock() {
    return _node$fields5.apply(this, arguments) || this;
  }

  return InvokeBlock;
}((0, _node.node)('InvokeBlock').fields());
/**
 * Corresponds to a component invocation. When the content of a component invocation contains no
 * named blocks, `blocks` contains a single named block named `"default"`. When a component
 * invocation is self-closing, `blocks` is empty.
 */


exports.InvokeBlock = InvokeBlock;

var InvokeComponent = /*#__PURE__*/function (_node$fields6) {
  _inheritsLoose(InvokeComponent, _node$fields6);

  function InvokeComponent() {
    return _node$fields6.apply(this, arguments) || this;
  }

  _createClass(InvokeComponent, [{
    key: "args",
    get: function get() {
      var entries = this.componentArgs.map(function (a) {
        return a.toNamedArgument();
      });
      return _args.Args.named(new _args.NamedArguments({
        loc: _spanList.SpanList.range(entries, this.callee.loc.collapse('end')),
        entries: entries
      }));
    }
  }]);

  return InvokeComponent;
}((0, _node.node)('InvokeComponent').fields());
/**
 * Corresponds to a simple HTML element. The AST allows component arguments and modifiers to support
 * future extensions.
 */


exports.InvokeComponent = InvokeComponent;

var SimpleElement = /*#__PURE__*/function (_node$fields7) {
  _inheritsLoose(SimpleElement, _node$fields7);

  function SimpleElement() {
    return _node$fields7.apply(this, arguments) || this;
  }

  _createClass(SimpleElement, [{
    key: "args",
    get: function get() {
      var entries = this.componentArgs.map(function (a) {
        return a.toNamedArgument();
      });
      return _args.Args.named(new _args.NamedArguments({
        loc: _spanList.SpanList.range(entries, this.tag.loc.collapse('end')),
        entries: entries
      }));
    }
  }]);

  return SimpleElement;
}((0, _node.node)('SimpleElement').fields());

exports.SimpleElement = SimpleElement;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,