"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NamedArgument = exports.NamedArguments = exports.PositionalArguments = exports.Args = void 0;

var _node = require("./node");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/**
 * Corresponds to syntaxes with positional and named arguments:
 *
 * - SubExpression
 * - Invoking Append
 * - Invoking attributes
 * - InvokeBlock
 *
 * If `Args` is empty, the `SourceOffsets` for this node should be the collapsed position
 * immediately after the parent call node's `callee`.
 */
var Args = /*#__PURE__*/function (_node$fields) {
  _inheritsLoose(Args, _node$fields);

  function Args() {
    return _node$fields.apply(this, arguments) || this;
  }

  Args.empty = function empty(loc) {
    return new Args({
      loc: loc,
      positional: PositionalArguments.empty(loc),
      named: NamedArguments.empty(loc)
    });
  };

  Args.named = function named(_named) {
    return new Args({
      loc: _named.loc,
      positional: PositionalArguments.empty(_named.loc.collapse('end')),
      named: _named
    });
  };

  var _proto = Args.prototype;

  _proto.nth = function nth(offset) {
    return this.positional.nth(offset);
  };

  _proto.get = function get(name) {
    return this.named.get(name);
  };

  _proto.isEmpty = function isEmpty() {
    return this.positional.isEmpty() && this.named.isEmpty();
  };

  return Args;
}((0, _node.node)().fields());
/**
 * Corresponds to positional arguments.
 *
 * If `PositionalArguments` is empty, the `SourceOffsets` for this node should be the collapsed
 * position immediately after the parent call node's `callee`.
 */


exports.Args = Args;

var PositionalArguments = /*#__PURE__*/function (_node$fields2) {
  _inheritsLoose(PositionalArguments, _node$fields2);

  function PositionalArguments() {
    return _node$fields2.apply(this, arguments) || this;
  }

  PositionalArguments.empty = function empty(loc) {
    return new PositionalArguments({
      loc: loc,
      exprs: []
    });
  };

  var _proto2 = PositionalArguments.prototype;

  _proto2.nth = function nth(offset) {
    return this.exprs[offset] || null;
  };

  _proto2.isEmpty = function isEmpty() {
    return this.exprs.length === 0;
  };

  _createClass(PositionalArguments, [{
    key: "size",
    get: function get() {
      return this.exprs.length;
    }
  }]);

  return PositionalArguments;
}((0, _node.node)().fields());
/**
 * Corresponds to named arguments.
 *
 * If `PositionalArguments` and `NamedArguments` are empty, the `SourceOffsets` for this node should
 * be the same as the `Args` node that contains this node.
 *
 * If `PositionalArguments` is not empty but `NamedArguments` is empty, the `SourceOffsets` for this
 * node should be the collapsed position immediately after the last positional argument.
 */


exports.PositionalArguments = PositionalArguments;

var NamedArguments = /*#__PURE__*/function (_node$fields3) {
  _inheritsLoose(NamedArguments, _node$fields3);

  function NamedArguments() {
    return _node$fields3.apply(this, arguments) || this;
  }

  NamedArguments.empty = function empty(loc) {
    return new NamedArguments({
      loc: loc,
      entries: []
    });
  };

  var _proto3 = NamedArguments.prototype;

  _proto3.get = function get(name) {
    var entry = this.entries.filter(function (e) {
      return e.name.chars === name;
    })[0];
    return entry ? entry.value : null;
  };

  _proto3.isEmpty = function isEmpty() {
    return this.entries.length === 0;
  };

  _createClass(NamedArguments, [{
    key: "size",
    get: function get() {
      return this.entries.length;
    }
  }]);

  return NamedArguments;
}((0, _node.node)().fields());
/**
 * Corresponds to a single named argument.
 *
 * ```hbs
 * x=<expr>
 * ```
 */


exports.NamedArguments = NamedArguments;

var NamedArgument = function NamedArgument(options) {
  this.loc = options.name.loc.extend(options.value.loc);
  this.name = options.name;
  this.value = options.value;
};

exports.NamedArgument = NamedArgument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,