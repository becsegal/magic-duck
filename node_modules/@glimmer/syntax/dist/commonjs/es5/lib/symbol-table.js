"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockSymbolTable = exports.ProgramSymbolTable = exports.SymbolTable = void 0;

var _util = require("@glimmer/util");

var _utils = require("./utils");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var SymbolTable = /*#__PURE__*/function () {
  function SymbolTable() {}

  SymbolTable.top = function top(locals, customizeComponentName) {
    return new ProgramSymbolTable(locals, customizeComponentName);
  };

  var _proto = SymbolTable.prototype;

  _proto.child = function child(locals) {
    var _this = this;

    var symbols = locals.map(function (name) {
      return _this.allocate(name);
    });
    return new BlockSymbolTable(this, locals, symbols);
  };

  return SymbolTable;
}();

exports.SymbolTable = SymbolTable;

var ProgramSymbolTable = /*#__PURE__*/function (_SymbolTable) {
  _inheritsLoose(ProgramSymbolTable, _SymbolTable);

  function ProgramSymbolTable(templateLocals, customizeComponentName) {
    var _this2;

    _this2 = _SymbolTable.call(this) || this;
    _this2.templateLocals = templateLocals;
    _this2.customizeComponentName = customizeComponentName;
    _this2.symbols = [];
    _this2.upvars = [];
    _this2.size = 1;
    _this2.named = (0, _util.dict)();
    _this2.blocks = (0, _util.dict)();
    _this2.usedTemplateLocals = [];
    _this2._hasEval = false;
    return _this2;
  }

  var _proto2 = ProgramSymbolTable.prototype;

  _proto2.getUsedTemplateLocals = function getUsedTemplateLocals() {
    return this.usedTemplateLocals;
  };

  _proto2.setHasEval = function setHasEval() {
    this._hasEval = true;
  };

  _proto2.has = function has(name) {
    return this.templateLocals.indexOf(name) !== -1;
  };

  _proto2.get = function get(name) {
    var index = this.usedTemplateLocals.indexOf(name);

    if (index !== -1) {
      return [index, true];
    }

    index = this.usedTemplateLocals.length;
    this.usedTemplateLocals.push(name);
    return [index, true];
  };

  _proto2.getLocalsMap = function getLocalsMap() {
    return (0, _util.dict)();
  };

  _proto2.getEvalInfo = function getEvalInfo() {
    var locals = this.getLocalsMap();
    return Object.keys(locals).map(function (symbol) {
      return locals[symbol];
    });
  };

  _proto2.allocateFree = function allocateFree(name, resolution) {
    // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run
    // the optional `customizeComponentName` function provided to the precompiler.
    if (resolution.resolution() === 39
    /* GetFreeAsComponentHead */
    && resolution.isAngleBracket && (0, _utils.isUpperCase)(name)) {
      name = this.customizeComponentName(name);
    }

    var index = this.upvars.indexOf(name);

    if (index !== -1) {
      return index;
    }

    index = this.upvars.length;
    this.upvars.push(name);
    return index;
  };

  _proto2.allocateNamed = function allocateNamed(name) {
    var named = this.named[name];

    if (!named) {
      named = this.named[name] = this.allocate(name);
    }

    return named;
  };

  _proto2.allocateBlock = function allocateBlock(name) {
    if (name === 'inverse') {
      name = 'else';
    }

    var block = this.blocks[name];

    if (!block) {
      block = this.blocks[name] = this.allocate("&" + name);
    }

    return block;
  };

  _proto2.allocate = function allocate(identifier) {
    this.symbols.push(identifier);
    return this.size++;
  };

  _createClass(ProgramSymbolTable, [{
    key: "hasEval",
    get: function get() {
      return this._hasEval;
    }
  }]);

  return ProgramSymbolTable;
}(SymbolTable);

exports.ProgramSymbolTable = ProgramSymbolTable;

var BlockSymbolTable = /*#__PURE__*/function (_SymbolTable2) {
  _inheritsLoose(BlockSymbolTable, _SymbolTable2);

  function BlockSymbolTable(parent, symbols, slots) {
    var _this3;

    _this3 = _SymbolTable2.call(this) || this;
    _this3.parent = parent;
    _this3.symbols = symbols;
    _this3.slots = slots;
    return _this3;
  }

  var _proto3 = BlockSymbolTable.prototype;

  _proto3.has = function has(name) {
    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);
  };

  _proto3.get = function get(name) {
    var slot = this.symbols.indexOf(name);
    return slot === -1 ? this.parent.get(name) : [this.slots[slot], false];
  };

  _proto3.getLocalsMap = function getLocalsMap() {
    var _this4 = this;

    var dict = this.parent.getLocalsMap();
    this.symbols.forEach(function (symbol) {
      return dict[symbol] = _this4.get(symbol)[0];
    });
    return dict;
  };

  _proto3.getEvalInfo = function getEvalInfo() {
    var locals = this.getLocalsMap();
    return Object.keys(locals).map(function (symbol) {
      return locals[symbol];
    });
  };

  _proto3.setHasEval = function setHasEval() {
    this.parent.setHasEval();
  };

  _proto3.allocateFree = function allocateFree(name, resolution) {
    return this.parent.allocateFree(name, resolution);
  };

  _proto3.allocateNamed = function allocateNamed(name) {
    return this.parent.allocateNamed(name);
  };

  _proto3.allocateBlock = function allocateBlock(name) {
    return this.parent.allocateBlock(name);
  };

  _proto3.allocate = function allocate(identifier) {
    return this.parent.allocate(identifier);
  };

  _createClass(BlockSymbolTable, [{
    key: "locals",
    get: function get() {
      return this.symbols;
    }
  }]);

  return BlockSymbolTable;
}(SymbolTable);

exports.BlockSymbolTable = BlockSymbolTable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,