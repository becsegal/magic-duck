"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isKeyword = isKeyword;
exports.KEYWORDS_TYPES = void 0;

function isKeyword(word) {
  return word in KEYWORDS_TYPES;
}
/**
 * This includes the full list of keywords currently in use in the template
 * language, and where their valid usages are.
 */


var KEYWORDS_TYPES = {
  component: ['Call', 'Append', 'Block'],
  "debugger": ['Append'],
  'each-in': ['Block'],
  each: ['Block'],
  'has-block-params': ['Call', 'Append'],
  'has-block': ['Call', 'Append'],
  helper: ['Call', 'Append'],
  "if": ['Call', 'Append', 'Block'],
  'in-element': ['Block'],
  "let": ['Block'],
  'link-to': ['Append', 'Block'],
  log: ['Call', 'Append'],
  modifier: ['Call'],
  mount: ['Append'],
  mut: ['Call', 'Append'],
  outlet: ['Append'],
  'query-params': ['Call'],
  readonly: ['Call', 'Append'],
  unbound: ['Call', 'Append'],
  unless: ['Call', 'Append', 'Block'],
  "with": ['Block'],
  "yield": ['Append']
};
exports.KEYWORDS_TYPES = KEYWORDS_TYPES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIva2V5d29yZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFTSxTQUFBLFNBQUEsQ0FBQSxJQUFBLEVBQWdDO0FBQ3BDLFNBQU8sSUFBSSxJQUFYLGNBQUE7QUFDRDtBQUVEOzs7Ozs7QUFJTyxJQUFNLGNBQWMsR0FBcUM7QUFDOUQsRUFBQSxTQUFTLEVBQUUsQ0FBQSxNQUFBLEVBQUEsUUFBQSxFQURtRCxPQUNuRCxDQURtRDtBQUU5RCxjQUFVLENBRm9ELFFBRXBELENBRm9EO0FBRzlELGFBQVcsQ0FIbUQsT0FHbkQsQ0FIbUQ7QUFJOUQsRUFBQSxJQUFJLEVBQUUsQ0FKd0QsT0FJeEQsQ0FKd0Q7QUFLOUQsc0JBQW9CLENBQUEsTUFBQSxFQUwwQyxRQUsxQyxDQUwwQztBQU05RCxlQUFhLENBQUEsTUFBQSxFQU5pRCxRQU1qRCxDQU5pRDtBQU85RCxFQUFBLE1BQU0sRUFBRSxDQUFBLE1BQUEsRUFQc0QsUUFPdEQsQ0FQc0Q7QUFROUQsUUFBSSxDQUFBLE1BQUEsRUFBQSxRQUFBLEVBUjBELE9BUTFELENBUjBEO0FBUzlELGdCQUFjLENBVGdELE9BU2hELENBVGdEO0FBVTlELFNBQUssQ0FWeUQsT0FVekQsQ0FWeUQ7QUFXOUQsYUFBVyxDQUFBLFFBQUEsRUFYbUQsT0FXbkQsQ0FYbUQ7QUFZOUQsRUFBQSxHQUFHLEVBQUUsQ0FBQSxNQUFBLEVBWnlELFFBWXpELENBWnlEO0FBYTlELEVBQUEsUUFBUSxFQUFFLENBYm9ELE1BYXBELENBYm9EO0FBYzlELEVBQUEsS0FBSyxFQUFFLENBZHVELFFBY3ZELENBZHVEO0FBZTlELEVBQUEsR0FBRyxFQUFFLENBQUEsTUFBQSxFQWZ5RCxRQWV6RCxDQWZ5RDtBQWdCOUQsRUFBQSxNQUFNLEVBQUUsQ0FoQnNELFFBZ0J0RCxDQWhCc0Q7QUFpQjlELGtCQUFnQixDQWpCOEMsTUFpQjlDLENBakI4QztBQWtCOUQsRUFBQSxRQUFRLEVBQUUsQ0FBQSxNQUFBLEVBbEJvRCxRQWtCcEQsQ0FsQm9EO0FBbUI5RCxFQUFBLE9BQU8sRUFBRSxDQUFBLE1BQUEsRUFuQnFELFFBbUJyRCxDQW5CcUQ7QUFvQjlELEVBQUEsTUFBTSxFQUFFLENBQUEsTUFBQSxFQUFBLFFBQUEsRUFwQnNELE9Bb0J0RCxDQXBCc0Q7QUFxQjlELFVBQU0sQ0FyQndELE9BcUJ4RCxDQXJCd0Q7QUFzQjlELFdBQU8sQ0FBQSxRQUFBO0FBdEJ1RCxDQUF6RCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEtleXdvcmRUeXBlID0gJ0NhbGwnIHwgJ01vZGlmaWVyJyB8ICdBcHBlbmQnIHwgJ0Jsb2NrJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5d29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHdvcmQgaW4gS0VZV09SRFNfVFlQRVM7XG59XG5cbi8qKlxuICogVGhpcyBpbmNsdWRlcyB0aGUgZnVsbCBsaXN0IG9mIGtleXdvcmRzIGN1cnJlbnRseSBpbiB1c2UgaW4gdGhlIHRlbXBsYXRlXG4gKiBsYW5ndWFnZSwgYW5kIHdoZXJlIHRoZWlyIHZhbGlkIHVzYWdlcyBhcmUuXG4gKi9cbmV4cG9ydCBjb25zdCBLRVlXT1JEU19UWVBFUzogeyBba2V5OiBzdHJpbmddOiBLZXl3b3JkVHlwZVtdIH0gPSB7XG4gIGNvbXBvbmVudDogWydDYWxsJywgJ0FwcGVuZCcsICdCbG9jayddLFxuICBkZWJ1Z2dlcjogWydBcHBlbmQnXSxcbiAgJ2VhY2gtaW4nOiBbJ0Jsb2NrJ10sXG4gIGVhY2g6IFsnQmxvY2snXSxcbiAgJ2hhcy1ibG9jay1wYXJhbXMnOiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gICdoYXMtYmxvY2snOiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIGhlbHBlcjogWydDYWxsJywgJ0FwcGVuZCddLFxuICBpZjogWydDYWxsJywgJ0FwcGVuZCcsICdCbG9jayddLFxuICAnaW4tZWxlbWVudCc6IFsnQmxvY2snXSxcbiAgbGV0OiBbJ0Jsb2NrJ10sXG4gICdsaW5rLXRvJzogWydBcHBlbmQnLCAnQmxvY2snXSxcbiAgbG9nOiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIG1vZGlmaWVyOiBbJ0NhbGwnXSxcbiAgbW91bnQ6IFsnQXBwZW5kJ10sXG4gIG11dDogWydDYWxsJywgJ0FwcGVuZCddLFxuICBvdXRsZXQ6IFsnQXBwZW5kJ10sXG4gICdxdWVyeS1wYXJhbXMnOiBbJ0NhbGwnXSxcbiAgcmVhZG9ubHk6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgdW5ib3VuZDogWydDYWxsJywgJ0FwcGVuZCddLFxuICB1bmxlc3M6IFsnQ2FsbCcsICdBcHBlbmQnLCAnQmxvY2snXSxcbiAgd2l0aDogWydCbG9jayddLFxuICB5aWVsZDogWydBcHBlbmQnXSxcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9