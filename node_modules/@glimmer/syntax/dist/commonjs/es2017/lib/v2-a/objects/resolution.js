"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadResolution = loadResolution;
exports.ARGUMENT_RESOLUTION = exports.LooseModeResolution = exports.STRICT_RESOLUTION = exports.StrictResolution = void 0;

/**
 * A free variable is resolved according to a resolution rule:
 *
 * 1. Strict resolution
 * 2. Namespaced resolution
 * 3. Fallback resolution
 */

/**
 * Strict resolution is used:
 *
 * 1. in a strict mode template
 * 2. in an unambiguous invocation with dot paths
 */
class StrictResolution {
  constructor() {
    this.isAngleBracket = false;
  }

  resolution() {
    return 31
    /* GetStrictFree */
    ;
  }

  serialize() {
    return 'Strict';
  }

}

exports.StrictResolution = StrictResolution;
const STRICT_RESOLUTION = new StrictResolution();
/**
 * A `LooseModeResolution` includes:
 *
 * - 0 or more namespaces to resolve the variable in
 * - optional fallback behavior
 *
 * In practice, there are a limited number of possible combinations of these degrees of freedom,
 * and they are captured by the `Ambiguity` union below.
 */

exports.STRICT_RESOLUTION = STRICT_RESOLUTION;

class LooseModeResolution {
  constructor(ambiguity, isAngleBracket = false) {
    this.ambiguity = ambiguity;
    this.isAngleBracket = isAngleBracket;
  }
  /**
   * Namespaced resolution is used in an unambiguous syntax position:
   *
   * 1. `(sexp)` (namespace: `Helper`)
   * 2. `{{#block}}` (namespace: `Component`)
   * 3. `<a {{modifier}}>` (namespace: `Modifier`)
   * 4. `<Component />` (namespace: `Component`)
   *
   * @see {NamespacedAmbiguity}
   */


  static namespaced(namespace, isAngleBracket = false) {
    return new LooseModeResolution({
      namespaces: [namespace],
      fallback: false
    }, isAngleBracket);
  }
  /**
   * Fallback resolution is used when no namespaced resolutions are possible, but fallback
   * resolution is still allowed.
   *
   * ```hbs
   * {{x.y}}
   * ```
   *
   * @see {FallbackAmbiguity}
   */


  static fallback() {
    return new LooseModeResolution({
      namespaces: [],
      fallback: true
    });
  }
  /**
   * Append resolution is used when the variable should be resolved in both the `component` and
   * `helper` namespaces. Fallback resolution is optional.
   *
   * ```hbs
   * {{x}}
   * ```
   *
   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.
   *
   * ```hbs
   * {{x y}}
   * ```
   *
   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback
   * resolution.
   *
   * @see {ComponentOrHelperAmbiguity}
   */


  static append({
    invoke
  }) {
    return new LooseModeResolution({
      namespaces: ["Component"
      /* Component */
      , "Helper"
      /* Helper */
      ],
      fallback: !invoke
    });
  }
  /**
   * Trusting append resolution is used when the variable should be resolved in both the `component` and
   * `helper` namespaces. Fallback resolution is optional.
   *
   * ```hbs
   * {{{x}}}
   * ```
   *
   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.
   *
   * ```hbs
   * {{{x y}}}
   * ```
   *
   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback
   * resolution.
   *
   * @see {HelperAmbiguity}
   */


  static trustingAppend({
    invoke
  }) {
    return new LooseModeResolution({
      namespaces: ["Helper"
      /* Helper */
      ],
      fallback: !invoke
    });
  }
  /**
   * Attribute resolution is used when the variable should be resolved as a `helper` with fallback
   * resolution.
   *
   * ```hbs
   * <a href={{x}} />
   * <a href="{{x}}.html" />
   * ```
   *
   * ^ resolved in the `helper` namespace with fallback
   *
   * @see {HelperAmbiguity}
   */


  static attr() {
    return new LooseModeResolution({
      namespaces: ["Helper"
      /* Helper */
      ],
      fallback: true
    });
  }

  resolution() {
    if (this.ambiguity.namespaces.length === 0) {
      return 31
      /* GetStrictFree */
      ;
    } else if (this.ambiguity.namespaces.length === 1) {
      if (this.ambiguity.fallback) {
        // simple namespaced resolution with fallback must be attr={{x}}
        return 36
        /* GetFreeAsHelperHeadOrThisFallback */
        ;
      } else {
        // simple namespaced resolution without fallback
        switch (this.ambiguity.namespaces[0]) {
          case "Helper"
          /* Helper */
          :
            return 37
            /* GetFreeAsHelperHead */
            ;

          case "Modifier"
          /* Modifier */
          :
            return 38
            /* GetFreeAsModifierHead */
            ;

          case "Component"
          /* Component */
          :
            return 39
            /* GetFreeAsComponentHead */
            ;
        }
      }
    } else if (this.ambiguity.fallback) {
      // component or helper + fallback ({{something}})
      return 34
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
      ;
    } else {
        // component or helper without fallback ({{something something}})
        return 35
        /* GetFreeAsComponentOrHelperHead */
        ;
      }
  }

  serialize() {
    if (this.ambiguity.namespaces.length === 0) {
      return 'Loose';
    } else if (this.ambiguity.namespaces.length === 1) {
      if (this.ambiguity.fallback) {
        // simple namespaced resolution with fallback must be attr={{x}}
        return ['ambiguous', "Attr"
        /* Attr */
        ];
      } else {
        return ['ns', this.ambiguity.namespaces[0]];
      }
    } else if (this.ambiguity.fallback) {
      // component or helper + fallback ({{something}})
      return ['ambiguous', "Append"
      /* Append */
      ];
    } else {
      // component or helper without fallback ({{something something}})
      return ['ambiguous', "Invoke"
      /* Invoke */
      ];
    }
  }

}

exports.LooseModeResolution = LooseModeResolution;
const ARGUMENT_RESOLUTION = LooseModeResolution.fallback();
exports.ARGUMENT_RESOLUTION = ARGUMENT_RESOLUTION;

function loadResolution(resolution) {
  if (typeof resolution === 'string') {
    switch (resolution) {
      case 'Loose':
        return LooseModeResolution.fallback();

      case 'Strict':
        return STRICT_RESOLUTION;
    }
  }

  switch (resolution[0]) {
    case 'ambiguous':
      switch (resolution[1]) {
        case "Append"
        /* Append */
        :
          return LooseModeResolution.append({
            invoke: false
          });

        case "Attr"
        /* Attr */
        :
          return LooseModeResolution.attr();

        case "Invoke"
        /* Invoke */
        :
          return LooseModeResolution.append({
            invoke: true
          });
      }

    case 'ns':
      return LooseModeResolution.namespaced(resolution[1]);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,