"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTemplateLocals = getTemplateLocals;

var _keywords = require("./keywords");

var _tokenizerEventHandlers = require("./parser/tokenizer-event-handlers");

var _traverse = _interopRequireDefault(require("./traversal/traverse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets the correct Token from the Node based on it's type
 */
function tokensFromType(node, scopedTokens, options) {
  if (node.type === 'PathExpression') {
    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {
      return;
    }

    const possbleToken = node.head.name;

    if (scopedTokens.indexOf(possbleToken) === -1) {
      return possbleToken;
    }
  } else if (node.type === 'ElementNode') {
    const {
      tag
    } = node;
    const char = tag.charAt(0);

    if (char === ':' || char === '@') {
      return;
    }

    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {
      return;
    }

    if (tag.substr(0, 5) === 'this.') {
      return;
    }

    if (scopedTokens.indexOf(tag) !== -1) {
      return;
    }

    return tag;
  }
}
/**
 * Adds tokens to the tokensSet based on their node.type
 */


function addTokens(tokensSet, node, scopedTokens, options) {
  const maybeTokens = tokensFromType(node, scopedTokens, options);
  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach(maybeToken => {
    if (maybeToken !== undefined && maybeToken[0] !== '@') {
      tokensSet.add(maybeToken.split('.')[0]);
    }
  });
}
/**
 * Parses and traverses a given handlebars html template to extract all template locals
 * referenced that could possible come from the praent scope. Can exclude known keywords
 * optionally.
 */


function getTemplateLocals(html, options = {
  includeHtmlElements: false,
  includeKeywords: false
}) {
  const ast = (0, _tokenizerEventHandlers.preprocess)(html);
  const tokensSet = new Set();
  const scopedTokens = [];
  (0, _traverse.default)(ast, {
    Block: {
      enter({
        blockParams
      }) {
        blockParams.forEach(param => {
          scopedTokens.push(param);
        });
      },

      exit({
        blockParams
      }) {
        blockParams.forEach(() => {
          scopedTokens.pop();
        });
      }

    },
    ElementNode: {
      enter(node) {
        node.blockParams.forEach(param => {
          scopedTokens.push(param);
        });
        addTokens(tokensSet, node, scopedTokens, options);
      },

      exit({
        blockParams
      }) {
        blockParams.forEach(() => {
          scopedTokens.pop();
        });
      }

    },

    PathExpression(node) {
      addTokens(tokensSet, node, scopedTokens, options);
    }

  });
  let tokens = [];
  tokensSet.forEach(s => tokens.push(s));

  if (!(options === null || options === void 0 ? void 0 : options.includeKeywords)) {
    tokens = tokens.filter(token => !(0, _keywords.isKeyword)(token));
  }

  return tokens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvZ2V0LXRlbXBsYXRlLWxvY2Fscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFRQTs7O0FBR0EsU0FBQSxjQUFBLENBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBR21DO0FBRWpDLE1BQUksSUFBSSxDQUFKLElBQUEsS0FBSixnQkFBQSxFQUFvQztBQUNsQyxRQUFJLElBQUksQ0FBSixJQUFBLENBQUEsSUFBQSxLQUFBLFFBQUEsSUFBK0IsSUFBSSxDQUFKLElBQUEsQ0FBQSxJQUFBLEtBQW5DLFVBQUEsRUFBa0U7QUFDaEU7QUFDRDs7QUFFRCxVQUFNLFlBQVksR0FBRyxJQUFJLENBQUosSUFBQSxDQUFyQixJQUFBOztBQUVBLFFBQUksWUFBWSxDQUFaLE9BQUEsQ0FBQSxZQUFBLE1BQXVDLENBQTNDLENBQUEsRUFBK0M7QUFDN0MsYUFBQSxZQUFBO0FBQ0Q7QUFUSCxHQUFBLE1BVU8sSUFBSSxJQUFJLENBQUosSUFBQSxLQUFKLGFBQUEsRUFBaUM7QUFDdEMsVUFBTTtBQUFFLE1BQUE7QUFBRixRQUFOLElBQUE7QUFFQSxVQUFNLElBQUksR0FBRyxHQUFHLENBQUgsTUFBQSxDQUFiLENBQWEsQ0FBYjs7QUFFQSxRQUFJLElBQUksS0FBSixHQUFBLElBQWdCLElBQUksS0FBeEIsR0FBQSxFQUFrQztBQUNoQztBQUNEOztBQUVELFFBQUksQ0FBQyxPQUFPLENBQVIsbUJBQUEsSUFBZ0MsR0FBRyxDQUFILE9BQUEsQ0FBQSxHQUFBLE1BQXFCLENBQXJELENBQUEsSUFBMkQsR0FBRyxDQUFILFdBQUEsT0FBL0QsR0FBQSxFQUEwRjtBQUN4RjtBQUNEOztBQUVELFFBQUksR0FBRyxDQUFILE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxNQUFKLE9BQUEsRUFBa0M7QUFDaEM7QUFDRDs7QUFFRCxRQUFJLFlBQVksQ0FBWixP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IHsgaXNLZXl3b3JkIH0gZnJvbSAnLi9rZXl3b3Jkcyc7XG5pbXBvcnQgeyBwcmVwcm9jZXNzIH0gZnJvbSAnLi9wYXJzZXIvdG9rZW5pemVyLWV2ZW50LWhhbmRsZXJzJztcbmltcG9ydCB0cmF2ZXJzZSBmcm9tICcuL3RyYXZlcnNhbC90cmF2ZXJzZSc7XG5pbXBvcnQgKiBhcyBBU1R2MSBmcm9tICcuL3YxL2FwaSc7XG5cbmludGVyZmFjZSBHZXRUZW1wbGF0ZUxvY2Fsc09wdGlvbnMge1xuICBpbmNsdWRlS2V5d29yZHM/OiBib29sZWFuO1xuICBpbmNsdWRlSHRtbEVsZW1lbnRzPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBjb3JyZWN0IFRva2VuIGZyb20gdGhlIE5vZGUgYmFzZWQgb24gaXQncyB0eXBlXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc0Zyb21UeXBlKFxuICBub2RlOiBBU1R2MS5Ob2RlLFxuICBzY29wZWRUb2tlbnM6IHN0cmluZ1tdLFxuICBvcHRpb25zOiBHZXRUZW1wbGF0ZUxvY2Fsc09wdGlvbnNcbik6IHN0cmluZyB8IHZvaWQge1xuICBpZiAobm9kZS50eXBlID09PSAnUGF0aEV4cHJlc3Npb24nKSB7XG4gICAgaWYgKG5vZGUuaGVhZC50eXBlID09PSAnQXRIZWFkJyB8fCBub2RlLmhlYWQudHlwZSA9PT0gJ1RoaXNIZWFkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvc3NibGVUb2tlbiA9IG5vZGUuaGVhZC5uYW1lO1xuXG4gICAgaWYgKHNjb3BlZFRva2Vucy5pbmRleE9mKHBvc3NibGVUb2tlbikgPT09IC0xKSB7XG4gICAgICByZXR1cm4gcG9zc2JsZVRva2VuO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdFbGVtZW50Tm9kZScpIHtcbiAgICBjb25zdCB7IHRhZyB9ID0gbm9kZTtcblxuICAgIGNvbnN0IGNoYXIgPSB0YWcuY2hhckF0KDApO1xuXG4gICAgaWYgKGNoYXIgPT09ICc6JyB8fCBjaGFyID09PSAnQCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMuaW5jbHVkZUh0bWxFbGVtZW50cyAmJiB0YWcuaW5kZXhPZignLicpID09PSAtMSAmJiB0YWcudG9Mb3dlckNhc2UoKSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRhZy5zdWJzdHIoMCwgNSkgPT09ICd0aGlzLicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2NvcGVkVG9rZW5zLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFnO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyB0b2tlbnMgdG8gdGhlIHRva2Vuc1NldCBiYXNlZCBvbiB0aGVpciBub2RlLnR5cGVcbiAqL1xuZnVuY3Rpb24gYWRkVG9rZW5zKFxuICB0b2tlbnNTZXQ6IFNldDxzdHJpbmc+LFxuICBub2RlOiBBU1R2MS5Ob2RlLFxuICBzY29wZWRUb2tlbnM6IHN0cmluZ1tdLFxuICBvcHRpb25zOiBHZXRUZW1wbGF0ZUxvY2Fsc09wdGlvbnNcbikge1xuICBjb25zdCBtYXliZVRva2VucyA9IHRva2Vuc0Zyb21UeXBlKG5vZGUsIHNjb3BlZFRva2Vucywgb3B0aW9ucyk7XG5cbiAgKEFycmF5LmlzQXJyYXkobWF5YmVUb2tlbnMpID8gbWF5YmVUb2tlbnMgOiBbbWF5YmVUb2tlbnNdKS5mb3JFYWNoKChtYXliZVRva2VuKSA9PiB7XG4gICAgaWYgKG1heWJlVG9rZW4gIT09IHVuZGVmaW5lZCAmJiBtYXliZVRva2VuWzBdICE9PSAnQCcpIHtcbiAgICAgIHRva2Vuc1NldC5hZGQobWF5YmVUb2tlbi5zcGxpdCgnLicpWzBdKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhbmQgdHJhdmVyc2VzIGEgZ2l2ZW4gaGFuZGxlYmFycyBodG1sIHRlbXBsYXRlIHRvIGV4dHJhY3QgYWxsIHRlbXBsYXRlIGxvY2Fsc1xuICogcmVmZXJlbmNlZCB0aGF0IGNvdWxkIHBvc3NpYmxlIGNvbWUgZnJvbSB0aGUgcHJhZW50IHNjb3BlLiBDYW4gZXhjbHVkZSBrbm93biBrZXl3b3Jkc1xuICogb3B0aW9uYWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRlbXBsYXRlTG9jYWxzKFxuICBodG1sOiBzdHJpbmcsXG4gIG9wdGlvbnM6IEdldFRlbXBsYXRlTG9jYWxzT3B0aW9ucyA9IHtcbiAgICBpbmNsdWRlSHRtbEVsZW1lbnRzOiBmYWxzZSxcbiAgICBpbmNsdWRlS2V5d29yZHM6IGZhbHNlLFxuICB9XG4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGFzdCA9IHByZXByb2Nlc3MoaHRtbCk7XG4gIGNvbnN0IHRva2Vuc1NldCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBjb25zdCBzY29wZWRUb2tlbnM6IHN0cmluZ1tdID0gW107XG5cbiAgdHJhdmVyc2UoYXN0LCB7XG4gICAgQmxvY2s6IHtcbiAgICAgIGVudGVyKHsgYmxvY2tQYXJhbXMgfSkge1xuICAgICAgICBibG9ja1BhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICAgIHNjb3BlZFRva2Vucy5wdXNoKHBhcmFtKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBleGl0KHsgYmxvY2tQYXJhbXMgfSkge1xuICAgICAgICBibG9ja1BhcmFtcy5mb3JFYWNoKCgpID0+IHtcbiAgICAgICAgICBzY29wZWRUb2tlbnMucG9wKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgRWxlbWVudE5vZGU6IHtcbiAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgbm9kZS5ibG9ja1BhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICAgIHNjb3BlZFRva2Vucy5wdXNoKHBhcmFtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFkZFRva2Vucyh0b2tlbnNTZXQsIG5vZGUsIHNjb3BlZFRva2Vucywgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICBleGl0KHsgYmxvY2tQYXJhbXMgfSkge1xuICAgICAgICBibG9ja1BhcmFtcy5mb3JFYWNoKCgpID0+IHtcbiAgICAgICAgICBzY29wZWRUb2tlbnMucG9wKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgUGF0aEV4cHJlc3Npb24obm9kZSkge1xuICAgICAgYWRkVG9rZW5zKHRva2Vuc1NldCwgbm9kZSwgc2NvcGVkVG9rZW5zLCBvcHRpb25zKTtcbiAgICB9LFxuICB9KTtcblxuICBsZXQgdG9rZW5zOiBzdHJpbmdbXSA9IFtdO1xuXG4gIHRva2Vuc1NldC5mb3JFYWNoKChzKSA9PiB0b2tlbnMucHVzaChzKSk7XG5cbiAgaWYgKCFvcHRpb25zPy5pbmNsdWRlS2V5d29yZHMpIHtcbiAgICB0b2tlbnMgPSB0b2tlbnMuZmlsdGVyKCh0b2tlbikgPT4gIWlzS2V5d29yZCh0b2tlbikpO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=