"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isKeyword = isKeyword;
exports.KEYWORDS_TYPES = void 0;

function isKeyword(word) {
  return word in KEYWORDS_TYPES;
}
/**
 * This includes the full list of keywords currently in use in the template
 * language, and where their valid usages are.
 */


const KEYWORDS_TYPES = {
  component: ['Call', 'Append', 'Block'],
  debugger: ['Append'],
  'each-in': ['Block'],
  each: ['Block'],
  'has-block-params': ['Call', 'Append'],
  'has-block': ['Call', 'Append'],
  helper: ['Call', 'Append'],
  if: ['Call', 'Append', 'Block'],
  'in-element': ['Block'],
  let: ['Block'],
  'link-to': ['Append', 'Block'],
  log: ['Call', 'Append'],
  modifier: ['Call'],
  mount: ['Append'],
  mut: ['Call', 'Append'],
  outlet: ['Append'],
  'query-params': ['Call'],
  readonly: ['Call', 'Append'],
  unbound: ['Call', 'Append'],
  unless: ['Call', 'Append', 'Block'],
  with: ['Block'],
  yield: ['Append']
};
exports.KEYWORDS_TYPES = KEYWORDS_TYPES;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIva2V5d29yZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFTSxTQUFBLFNBQUEsQ0FBQSxJQUFBLEVBQWdDO0FBQ3BDLFNBQU8sSUFBSSxJQUFYLGNBQUE7QUFDRDtBQUVEOzs7Ozs7QUFJTyxNQUFNLGNBQWMsR0FBcUM7QUFDOUQsRUFBQSxTQUFTLEVBQUUsQ0FBQSxNQUFBLEVBQUEsUUFBQSxFQURtRCxPQUNuRCxDQURtRDtBQUU5RCxFQUFBLFFBQVEsRUFBRSxDQUZvRCxRQUVwRCxDQUZvRDtBQUc5RCxhQUFXLENBSG1ELE9BR25ELENBSG1EO0FBSTlELEVBQUEsSUFBSSxFQUFFLENBSndELE9BSXhELENBSndEO0FBSzlELHNCQUFvQixDQUFBLE1BQUEsRUFMMEMsUUFLMUMsQ0FMMEM7QUFNOUQsZUFBYSxDQUFBLE1BQUEsRUFOaUQsUUFNakQsQ0FOaUQ7QUFPOUQsRUFBQSxNQUFNLEVBQUUsQ0FBQSxNQUFBLEVBUHNELFFBT3RELENBUHNEO0FBUTlELEVBQUEsRUFBRSxFQUFFLENBQUEsTUFBQSxFQUFBLFFBQUEsRUFSMEQsT0FRMUQsQ0FSMEQ7QUFTOUQsZ0JBQWMsQ0FUZ0QsT0FTaEQsQ0FUZ0Q7QUFVOUQsRUFBQSxHQUFHLEVBQUUsQ0FWeUQsT0FVekQsQ0FWeUQ7QUFXOUQsYUFBVyxDQUFBLFFBQUEsRUFYbUQsT0FXbkQsQ0FYbUQ7QUFZOUQsRUFBQSxHQUFHLEVBQUUsQ0FBQSxNQUFBLEVBWnlELFFBWXpELENBWnlEO0FBYTlELEVBQUEsUUFBUSxFQUFFLENBYm9ELE1BYXBELENBYm9EO0FBYzlELEVBQUEsS0FBSyxFQUFFLENBZHVELFFBY3ZELENBZHVEO0FBZTlELEVBQUEsR0FBRyxFQUFFLENBQUEsTUFBQSxFQWZ5RCxRQWV6RCxDQWZ5RDtBQWdCOUQsRUFBQSxNQUFNLEVBQUUsQ0FoQnNELFFBZ0J0RCxDQWhCc0Q7QUFpQjlELGtCQUFnQixDQWpCOEMsTUFpQjlDLENBakI4QztBQWtCOUQsRUFBQSxRQUFRLEVBQUUsQ0FBQSxNQUFBLEVBbEJvRCxRQWtCcEQsQ0FsQm9EO0FBbUI5RCxFQUFBLE9BQU8sRUFBRSxDQUFBLE1BQUEsRUFuQnFELFFBbUJyRCxDQW5CcUQ7QUFvQjlELEVBQUEsTUFBTSxFQUFFLENBQUEsTUFBQSxFQUFBLFFBQUEsRUFwQnNELE9Bb0J0RCxDQXBCc0Q7QUFxQjlELEVBQUEsSUFBSSxFQUFFLENBckJ3RCxPQXFCeEQsQ0FyQndEO0FBc0I5RCxFQUFBLEtBQUssRUFBRSxDQUFBLFFBQUE7QUF0QnVELENBQXpEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgS2V5d29yZFR5cGUgPSAnQ2FsbCcgfCAnTW9kaWZpZXInIHwgJ0FwcGVuZCcgfCAnQmxvY2snO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNLZXl3b3JkKHdvcmQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gd29yZCBpbiBLRVlXT1JEU19UWVBFUztcbn1cblxuLyoqXG4gKiBUaGlzIGluY2x1ZGVzIHRoZSBmdWxsIGxpc3Qgb2Yga2V5d29yZHMgY3VycmVudGx5IGluIHVzZSBpbiB0aGUgdGVtcGxhdGVcbiAqIGxhbmd1YWdlLCBhbmQgd2hlcmUgdGhlaXIgdmFsaWQgdXNhZ2VzIGFyZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEtFWVdPUkRTX1RZUEVTOiB7IFtrZXk6IHN0cmluZ106IEtleXdvcmRUeXBlW10gfSA9IHtcbiAgY29tcG9uZW50OiBbJ0NhbGwnLCAnQXBwZW5kJywgJ0Jsb2NrJ10sXG4gIGRlYnVnZ2VyOiBbJ0FwcGVuZCddLFxuICAnZWFjaC1pbic6IFsnQmxvY2snXSxcbiAgZWFjaDogWydCbG9jayddLFxuICAnaGFzLWJsb2NrLXBhcmFtcyc6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgJ2hhcy1ibG9jayc6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgaGVscGVyOiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIGlmOiBbJ0NhbGwnLCAnQXBwZW5kJywgJ0Jsb2NrJ10sXG4gICdpbi1lbGVtZW50JzogWydCbG9jayddLFxuICBsZXQ6IFsnQmxvY2snXSxcbiAgJ2xpbmstdG8nOiBbJ0FwcGVuZCcsICdCbG9jayddLFxuICBsb2c6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgbW9kaWZpZXI6IFsnQ2FsbCddLFxuICBtb3VudDogWydBcHBlbmQnXSxcbiAgbXV0OiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIG91dGxldDogWydBcHBlbmQnXSxcbiAgJ3F1ZXJ5LXBhcmFtcyc6IFsnQ2FsbCddLFxuICByZWFkb25seTogWydDYWxsJywgJ0FwcGVuZCddLFxuICB1bmJvdW5kOiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIHVubGVzczogWydDYWxsJywgJ0FwcGVuZCcsICdCbG9jayddLFxuICB3aXRoOiBbJ0Jsb2NrJ10sXG4gIHlpZWxkOiBbJ0FwcGVuZCddLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=