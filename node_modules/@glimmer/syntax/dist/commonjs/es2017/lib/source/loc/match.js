"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.match = match;
exports.IsInvisible = exports.MatchAny = void 0;

var _util = require("@glimmer/util");

/**
 * This file implements the DSL used by span and offset in places where they need to exhaustively
 * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken
 * offsets).
 *
 * It's probably overkill, but it makes the code that uses it clear. It could be refactored or
 * removed.
 */
const MatchAny = 'MATCH_ANY';
exports.MatchAny = MatchAny;
const IsInvisible = 'IS_INVISIBLE';
exports.IsInvisible = IsInvisible;

class WhenList {
  constructor(whens) {
    this._whens = whens;
  }

  first(kind) {
    for (let when of this._whens) {
      let value = when.match(kind);

      if ((0, _util.isPresent)(value)) {
        return value[0];
      }
    }

    return null;
  }

}

class When {
  constructor() {
    this._map = new Map();
  }

  get(pattern, or) {
    let value = this._map.get(pattern);

    if (value) {
      return value;
    }

    value = or();

    this._map.set(pattern, value);

    return value;
  }

  add(pattern, out) {
    this._map.set(pattern, out);
  }

  match(kind) {
    let pattern = patternFor(kind);
    let out = [];

    let exact = this._map.get(pattern);

    let fallback = this._map.get(MatchAny);

    if (exact) {
      out.push(exact);
    }

    if (fallback) {
      out.push(fallback);
    }

    return out;
  }

}

function match(callback) {
  return callback(new Matcher()).check();
}

class Matcher {
  constructor() {
    this._whens = new When();
  }
  /**
   * You didn't exhaustively match all possibilities.
   */


  check() {
    return (left, right) => this.matchFor(left.kind, right.kind)(left, right);
  }

  matchFor(left, right) {
    let nesteds = this._whens.match(left);

    false && (0, _util.assert)((0, _util.isPresent)(nesteds), `no match defined for (${left}, ${right}) and no AnyMatch defined either`);
    let callback = new WhenList(nesteds).first(right);
    false && (0, _util.assert)(callback !== null, `no match defined for (${left}, ${right}) and no AnyMatch defined either`);
    return callback;
  }

  when(left, right, // eslint-disable-next-line @typescript-eslint/no-explicit-any
  callback) {
    this._whens.get(left, () => new When()).add(right, callback);

    return this;
  }

}

function patternFor(kind) {
  switch (kind) {
    case "Broken"
    /* Broken */
    :
    case "InternalsSynthetic"
    /* InternalsSynthetic */
    :
    case "NonExistent"
    /* NonExistent */
    :
      return IsInvisible;

    default:
      return kind;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,