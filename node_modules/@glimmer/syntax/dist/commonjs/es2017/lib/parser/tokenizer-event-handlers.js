"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preprocess = preprocess;
exports.TokenizerEventHandlers = void 0;

var _util = require("@glimmer/util");

var _parser = require("@handlebars/parser");

var _simpleHtmlTokenizer = require("simple-html-tokenizer");

var _print = _interopRequireDefault(require("../generation/print"));

var _printer = require("../generation/printer");

var _source = require("../source/source");

var _span = require("../source/span");

var _syntaxError = require("../syntax-error");

var _traverse = _interopRequireDefault(require("../traversal/traverse"));

var _walker = _interopRequireDefault(require("../traversal/walker"));

var _utils = require("../utils");

var _parserBuilders = _interopRequireDefault(require("../v1/parser-builders"));

var _publicBuilders = _interopRequireDefault(require("../v1/public-builders"));

var _handlebarsNodeVisitors = require("./handlebars-node-visitors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class TokenizerEventHandlers extends _handlebarsNodeVisitors.HandlebarsNodeVisitors {
  constructor() {
    super(...arguments);
    this.tagOpenLine = 0;
    this.tagOpenColumn = 0;
  }

  reset() {
    this.currentNode = null;
  } // Comment


  beginComment() {
    this.currentNode = _parserBuilders.default.comment('', this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn));
  }

  appendToCommentData(char) {
    this.currentComment.value += char;
  }

  finishComment() {
    (0, _utils.appendChild)(this.currentElement(), this.finish(this.currentComment));
  } // Data


  beginData() {
    this.currentNode = _parserBuilders.default.text({
      chars: '',
      loc: this.offset().collapsed()
    });
  }

  appendToData(char) {
    this.currentData.chars += char;
  }

  finishData() {
    this.currentData.loc = this.currentData.loc.withEnd(this.offset());
    (0, _utils.appendChild)(this.currentElement(), this.currentData);
  } // Tags - basic


  tagOpen() {
    this.tagOpenLine = this.tokenizer.line;
    this.tagOpenColumn = this.tokenizer.column;
  }

  beginStartTag() {
    this.currentNode = {
      type: 'StartTag',
      name: '',
      attributes: [],
      modifiers: [],
      comments: [],
      selfClosing: false,
      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
    };
  }

  beginEndTag() {
    this.currentNode = {
      type: 'EndTag',
      name: '',
      attributes: [],
      modifiers: [],
      comments: [],
      selfClosing: false,
      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
    };
  }

  finishTag() {
    let tag = this.finish(this.currentTag);

    if (tag.type === 'StartTag') {
      this.finishStartTag();

      if (tag.name === ':') {
        throw (0, _syntaxError.generateSyntaxError)('Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter', this.source.spanFor({
          start: this.currentTag.loc.toJSON(),
          end: this.offset().toJSON()
        }));
      }

      if (_printer.voidMap[tag.name] || tag.selfClosing) {
        this.finishEndTag(true);
      }
    } else if (tag.type === 'EndTag') {
      this.finishEndTag(false);
    }
  }

  finishStartTag() {
    let {
      name,
      attributes: attrs,
      modifiers,
      comments,
      selfClosing,
      loc
    } = this.finish(this.currentStartTag);

    let element = _parserBuilders.default.element({
      tag: name,
      selfClosing,
      attrs,
      modifiers,
      comments,
      children: [],
      blockParams: [],
      loc
    });

    this.elementStack.push(element);
  }

  finishEndTag(isVoid) {
    let tag = this.finish(this.currentTag);
    let element = this.elementStack.pop();
    let parent = this.currentElement();
    this.validateEndTag(tag, element, isVoid);
    element.loc = element.loc.withEnd(this.offset());
    (0, _utils.parseElementBlockParams)(element);
    (0, _utils.appendChild)(parent, element);
  }

  markTagAsSelfClosing() {
    this.currentTag.selfClosing = true;
  } // Tags - name


  appendToTagName(char) {
    this.currentTag.name += char;
  } // Tags - attributes


  beginAttribute() {
    let offset = this.offset();
    this.currentAttribute = {
      name: '',
      parts: [],
      currentPart: null,
      isQuoted: false,
      isDynamic: false,
      start: offset,
      valueSpan: offset.collapsed()
    };
  }

  appendToAttributeName(char) {
    this.currentAttr.name += char;
  }

  beginAttributeValue(isQuoted) {
    this.currentAttr.isQuoted = isQuoted;
    this.startTextPart();
    this.currentAttr.valueSpan = this.offset().collapsed();
  }

  appendToAttributeValue(char) {
    let parts = this.currentAttr.parts;
    let lastPart = parts[parts.length - 1];
    let current = this.currentAttr.currentPart;

    if (current) {
      current.chars += char; // update end location for each added char

      current.loc = current.loc.withEnd(this.offset());
    } else {
      // initially assume the text node is a single char
      let loc = this.offset(); // the tokenizer line/column have already been advanced, correct location info

      if (char === '\n') {
        loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();
      } else {
        loc = loc.move(-1);
      }

      this.currentAttr.currentPart = _parserBuilders.default.text({
        chars: char,
        loc: loc.collapsed()
      });
    }
  }

  finishAttributeValue() {
    this.finalizeTextPart();
    let tag = this.currentTag;
    let tokenizerPos = this.offset();

    if (tag.type === 'EndTag') {
      throw (0, _syntaxError.generateSyntaxError)(`Invalid end tag: closing tag must not have attributes`, this.source.spanFor({
        start: tag.loc.toJSON(),
        end: tokenizerPos.toJSON()
      }));
    }

    let {
      name,
      parts,
      start,
      isQuoted,
      isDynamic,
      valueSpan
    } = this.currentAttr;
    let value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));
    value.loc = valueSpan.withEnd(tokenizerPos);

    let attribute = _parserBuilders.default.attr({
      name,
      value,
      loc: start.until(tokenizerPos)
    });

    this.currentStartTag.attributes.push(attribute);
  }

  reportSyntaxError(message) {
    throw (0, _syntaxError.generateSyntaxError)(message, this.offset().collapsed());
  }

  assembleConcatenatedValue(parts) {
    for (let i = 0; i < parts.length; i++) {
      let part = parts[i];

      if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {
        throw (0, _syntaxError.generateSyntaxError)('Unsupported node in quoted attribute value: ' + part['type'], part.loc);
      }
    }

    (0, _util.assertPresent)(parts, `the concatenation parts of an element should not be empty`);
    let first = parts[0];
    let last = parts[parts.length - 1];
    return _parserBuilders.default.concat(parts, this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)));
  }

  validateEndTag(tag, element, selfClosing) {
    let error;

    if (_printer.voidMap[tag.name] && !selfClosing) {
      // EngTag is also called by StartTag for void and self-closing tags (i.e.
      // <input> or <br />, so we need to check for that here. Otherwise, we would
      // throw an error for those cases.
      error = `<${tag.name}> elements do not need end tags. You should remove it`;
    } else if (element.tag === undefined) {
      error = `Closing tag </${tag.name}> without an open tag`;
    } else if (element.tag !== tag.name) {
      error = `Closing tag </${tag.name}> did not match last open tag <${element.tag}> (on line ${element.loc.startPosition.line})`;
    }

    if (error) {
      throw (0, _syntaxError.generateSyntaxError)(error, tag.loc);
    }
  }

  assembleAttributeValue(parts, isQuoted, isDynamic, span) {
    if (isDynamic) {
      if (isQuoted) {
        return this.assembleConcatenatedValue(parts);
      } else {
        if (parts.length === 1 || parts.length === 2 && parts[1].type === 'TextNode' && parts[1].chars === '/') {
          return parts[0];
        } else {
          throw (0, _syntaxError.generateSyntaxError)(`An unquoted attribute value must be a string or a mustache, ` + `preceded by whitespace or a '=' character, and ` + `followed by whitespace, a '>' character, or '/>'`, span);
        }
      }
    } else {
      return parts.length > 0 ? parts[0] : _parserBuilders.default.text({
        chars: '',
        loc: span
      });
    }
  }

}

exports.TokenizerEventHandlers = TokenizerEventHandlers;
const syntax = {
  parse: preprocess,
  builders: _publicBuilders.default,
  print: _print.default,
  traverse: _traverse.default,
  Walker: _walker.default
};

class CodemodEntityParser extends _simpleHtmlTokenizer.EntityParser {
  // match upstream types, but never match an entity
  constructor() {
    super({});
  }

  parse() {
    return undefined;
  }

}

function preprocess(input, options = {}) {
  var _a, _b, _c;

  let mode = options.mode || 'precompile';
  let source;
  let ast;

  if (typeof input === 'string') {
    source = new _source.Source(input, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);

    if (mode === 'codemod') {
      ast = (0, _parser.parseWithoutProcessing)(input, options.parseOptions);
    } else {
      ast = (0, _parser.parse)(input, options.parseOptions);
    }
  } else if (input instanceof _source.Source) {
    source = input;

    if (mode === 'codemod') {
      ast = (0, _parser.parseWithoutProcessing)(input.source, options.parseOptions);
    } else {
      ast = (0, _parser.parse)(input.source, options.parseOptions);
    }
  } else {
    source = new _source.Source('', (_b = options.meta) === null || _b === void 0 ? void 0 : _b.moduleName);
    ast = input;
  }

  let entityParser = undefined;

  if (mode === 'codemod') {
    entityParser = new CodemodEntityParser();
  }

  let offsets = _span.SourceSpan.forCharPositions(source, 0, source.source.length);

  ast.loc = {
    source: '(program)',
    start: offsets.startPosition,
    end: offsets.endPosition
  };
  let program = new TokenizerEventHandlers(source, entityParser, mode).acceptTemplate(ast);

  if (options.strictMode) {
    program.blockParams = (_c = options.locals) !== null && _c !== void 0 ? _c : [];
  }

  if (options && options.plugins && options.plugins.ast) {
    for (let i = 0, l = options.plugins.ast.length; i < l; i++) {
      let transform = options.plugins.ast[i];
      let env = (0, _util.assign)({}, options, {
        syntax
      }, {
        plugins: undefined
      });
      let pluginResult = transform(env);
      (0, _traverse.default)(program, pluginResult.visitor);
    }
  }

  return program;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,