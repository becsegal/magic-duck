// eslint-disable-next-line import/no-extraneous-dependencies
import { DEBUG } from '@glimmer/env';
import { assertNever } from '@glimmer/util';
import { BROKEN_LOCATION, NON_EXISTENT_LOCATION } from '../location';
import { SourceSlice } from '../slice';
import { IsInvisible, match, MatchAny } from './match';
import { BROKEN, CharPosition, HbsPosition, InvisiblePosition } from './offset';
/**
 * A `SourceSpan` object represents a span of characters inside of a template source.
 *
 * There are three kinds of `SourceSpan` objects:
 *
 * - `ConcreteSourceSpan`, which contains byte offsets
 * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be
 *   converted to byte offsets on demand.
 * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,
 *   because:
 *     - they were created synthetically
 *     - their location is nonsensical (the span is broken)
 *     - they represent nothing in the source (this currently happens only when a bug in the
 *       upstream Handlebars parser fails to assign a location to empty blocks)
 *
 * At a high level, all `SourceSpan` objects provide:
 *
 * - byte offsets
 * - source in column and line format
 *
 * And you can do these operations on `SourceSpan`s:
 *
 * - collapse it to a `SourceSpan` representing its starting or ending position
 * - slice out some characters, optionally skipping some characters at the beginning or end
 * - create a new `SourceSpan` with a different starting or ending offset
 *
 * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan
 * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.
 *
 * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which
 * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.
 *
 * The goal is to avoid creating any problems for use-cases like AST Explorer.
 */

export class SourceSpan {
  constructor(data) {
    this.data = data;
    this.isInvisible = data.kind !== "CharPosition"
    /* CharPosition */
    && data.kind !== "HbsPosition"
    /* HbsPosition */
    ;
  }

  static get NON_EXISTENT() {
    return new InvisibleSpan("NonExistent"
    /* NonExistent */
    , NON_EXISTENT_LOCATION).wrap();
  }

  static load(source, serialized) {
    if (typeof serialized === 'number') {
      return SourceSpan.forCharPositions(source, serialized, serialized);
    } else if (typeof serialized === 'string') {
      return SourceSpan.synthetic(serialized);
    } else if (Array.isArray(serialized)) {
      return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);
    } else if (serialized === "NonExistent"
    /* NonExistent */
    ) {
        return SourceSpan.NON_EXISTENT;
      } else if (serialized === "Broken"
    /* Broken */
    ) {
        return SourceSpan.broken(BROKEN_LOCATION);
      }

    assertNever(serialized);
  }

  static forHbsLoc(source, loc) {
    let start = new HbsPosition(source, loc.start);
    let end = new HbsPosition(source, loc.end);
    return new HbsSpan(source, {
      start,
      end
    }, loc).wrap();
  }

  static forCharPositions(source, startPos, endPos) {
    let start = new CharPosition(source, startPos);
    let end = new CharPosition(source, endPos);
    return new CharPositionSpan(source, {
      start,
      end
    }).wrap();
  }

  static synthetic(chars) {
    return new InvisibleSpan("InternalsSynthetic"
    /* InternalsSynthetic */
    , NON_EXISTENT_LOCATION, chars).wrap();
  }

  static broken(pos = BROKEN_LOCATION) {
    return new InvisibleSpan("Broken"
    /* Broken */
    , pos).wrap();
  }

  getStart() {
    return this.data.getStart().wrap();
  }

  getEnd() {
    return this.data.getEnd().wrap();
  }

  get loc() {
    let span = this.data.toHbsSpan();
    return span === null ? BROKEN_LOCATION : span.toHbsLoc();
  }

  get module() {
    return this.data.getModule();
  }
  /**
   * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
   */


  get startPosition() {
    return this.loc.start;
  }
  /**
   * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.
   */


  get endPosition() {
    return this.loc.end;
  }
  /**
   * Support converting ASTv1 nodes into a serialized format using JSON.stringify.
   */


  toJSON() {
    return this.loc;
  }
  /**
   * Create a new span with the current span's end and a new beginning.
   */


  withStart(other) {
    return span(other.data, this.data.getEnd());
  }
  /**
   * Create a new span with the current span's beginning and a new ending.
   */


  withEnd(other) {
    return span(this.data.getStart(), other.data);
  }

  asString() {
    return this.data.asString();
  }
  /**
   * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks
   * that the byte offsets represented by this `SourceSpan` actually correspond to the expected
   * string.
   */


  toSlice(expected) {
    let chars = this.data.asString();

    if (DEBUG) {
      if (expected !== undefined && chars !== expected) {
        // eslint-disable-next-line no-console
        console.warn(`unexpectedly found ${JSON.stringify(chars)} when slicing source, but expected ${JSON.stringify(expected)}`);
      }
    }

    return new SourceSlice({
      loc: this,
      chars: expected || chars
    });
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use startPosition instead
   */


  get start() {
    return this.loc.start;
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use withStart instead
   */


  set start(position) {
    this.data.locDidUpdate({
      start: position
    });
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use endPosition instead
   */


  get end() {
    return this.loc.end;
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use withEnd instead
   */


  set end(position) {
    this.data.locDidUpdate({
      end: position
    });
  }
  /**
   * For compatibility with SourceLocation in AST plugins
   *
   * @deprecated use module instead
   */


  get source() {
    return this.module;
  }

  collapse(where) {
    switch (where) {
      case 'start':
        return this.getStart().collapsed();

      case 'end':
        return this.getEnd().collapsed();
    }
  }

  extend(other) {
    return span(this.data.getStart(), other.data.getEnd());
  }

  serialize() {
    return this.data.serialize();
  }

  slice({
    skipStart = 0,
    skipEnd = 0
  }) {
    return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);
  }

  sliceStartChars({
    skipStart = 0,
    chars
  }) {
    return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);
  }

  sliceEndChars({
    skipEnd = 0,
    chars
  }) {
    return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);
  }

}

class CharPositionSpan {
  constructor(source, charPositions) {
    this.source = source;
    this.charPositions = charPositions;
    this.kind = "CharPosition"
    /* CharPosition */
    ;
    this._locPosSpan = null;
  }

  wrap() {
    return new SourceSpan(this);
  }

  asString() {
    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);
  }

  getModule() {
    return this.source.module;
  }

  getStart() {
    return this.charPositions.start;
  }

  getEnd() {
    return this.charPositions.end;
  }

  locDidUpdate() {
    if (false
    /* LOCAL_DEBUG */
    ) {
      // eslint-disable-next-line no-console
      console.warn(`updating a location that came from a CharPosition span doesn't work reliably. Don't try to update locations after the plugin phase`);
    }
  }

  toHbsSpan() {
    let locPosSpan = this._locPosSpan;

    if (locPosSpan === null) {
      let start = this.charPositions.start.toHbsPos();
      let end = this.charPositions.end.toHbsPos();

      if (start === null || end === null) {
        locPosSpan = this._locPosSpan = BROKEN;
      } else {
        locPosSpan = this._locPosSpan = new HbsSpan(this.source, {
          start,
          end
        });
      }
    }

    return locPosSpan === BROKEN ? null : locPosSpan;
  }

  serialize() {
    let {
      start: {
        charPos: start
      },
      end: {
        charPos: end
      }
    } = this.charPositions;

    if (start === end) {
      return start;
    } else {
      return [start, end];
    }
  }

  toCharPosSpan() {
    return this;
  }

}

export class HbsSpan {
  constructor(source, hbsPositions, providedHbsLoc = null) {
    this.source = source;
    this.hbsPositions = hbsPositions;
    this.kind = "HbsPosition"
    /* HbsPosition */
    ;
    this._charPosSpan = null;
    this._providedHbsLoc = providedHbsLoc;
  }

  serialize() {
    let charPos = this.toCharPosSpan();
    return charPos === null ? "Broken"
    /* Broken */
    : charPos.wrap().serialize();
  }

  wrap() {
    return new SourceSpan(this);
  }

  updateProvided(pos, edge) {
    if (this._providedHbsLoc) {
      this._providedHbsLoc[edge] = pos;
    } // invalidate computed character offsets


    this._charPosSpan = null;
    this._providedHbsLoc = {
      start: pos,
      end: pos
    };
  }

  locDidUpdate({
    start,
    end
  }) {
    if (start !== undefined) {
      this.updateProvided(start, 'start');
      this.hbsPositions.start = new HbsPosition(this.source, start, null);
    }

    if (end !== undefined) {
      this.updateProvided(end, 'end');
      this.hbsPositions.end = new HbsPosition(this.source, end, null);
    }
  }

  asString() {
    let span = this.toCharPosSpan();
    return span === null ? '' : span.asString();
  }

  getModule() {
    return this.source.module;
  }

  getStart() {
    return this.hbsPositions.start;
  }

  getEnd() {
    return this.hbsPositions.end;
  }

  toHbsLoc() {
    return {
      start: this.hbsPositions.start.hbsPos,
      end: this.hbsPositions.end.hbsPos
    };
  }

  toHbsSpan() {
    return this;
  }

  toCharPosSpan() {
    let charPosSpan = this._charPosSpan;

    if (charPosSpan === null) {
      let start = this.hbsPositions.start.toCharPos();
      let end = this.hbsPositions.end.toCharPos();

      if (start && end) {
        charPosSpan = this._charPosSpan = new CharPositionSpan(this.source, {
          start,
          end
        });
      } else {
        charPosSpan = this._charPosSpan = BROKEN;
        return null;
      }
    }

    return charPosSpan === BROKEN ? null : charPosSpan;
  }

}

class InvisibleSpan {
  constructor(kind, // whatever was provided, possibly broken
  loc, // if the span represents a synthetic string
  string = null) {
    this.kind = kind;
    this.loc = loc;
    this.string = string;
  }

  serialize() {
    switch (this.kind) {
      case "Broken"
      /* Broken */
      :
      case "NonExistent"
      /* NonExistent */
      :
        return this.kind;

      case "InternalsSynthetic"
      /* InternalsSynthetic */
      :
        return this.string || '';
    }
  }

  wrap() {
    return new SourceSpan(this);
  }

  asString() {
    return this.string || '';
  }

  locDidUpdate({
    start,
    end
  }) {
    if (start !== undefined) {
      this.loc.start = start;
    }

    if (end !== undefined) {
      this.loc.end = end;
    }
  }

  getModule() {
    // TODO: Make this reflect the actual module this span originated from
    return 'an unknown module';
  }

  getStart() {
    return new InvisiblePosition(this.kind, this.loc.start);
  }

  getEnd() {
    return new InvisiblePosition(this.kind, this.loc.end);
  }

  toCharPosSpan() {
    return this;
  }

  toHbsSpan() {
    return null;
  }

  toHbsLoc() {
    return BROKEN_LOCATION;
  }

}

export const span = match(m => m.when("HbsPosition"
/* HbsPosition */
, "HbsPosition"
/* HbsPosition */
, (left, right) => new HbsSpan(left.source, {
  start: left,
  end: right
}).wrap()).when("CharPosition"
/* CharPosition */
, "CharPosition"
/* CharPosition */
, (left, right) => new CharPositionSpan(left.source, {
  start: left,
  end: right
}).wrap()).when("CharPosition"
/* CharPosition */
, "HbsPosition"
/* HbsPosition */
, (left, right) => {
  let rightCharPos = right.toCharPos();

  if (rightCharPos === null) {
    return new InvisibleSpan("Broken"
    /* Broken */
    , BROKEN_LOCATION).wrap();
  } else {
    return span(left, rightCharPos);
  }
}).when("HbsPosition"
/* HbsPosition */
, "CharPosition"
/* CharPosition */
, (left, right) => {
  let leftCharPos = left.toCharPos();

  if (leftCharPos === null) {
    return new InvisibleSpan("Broken"
    /* Broken */
    , BROKEN_LOCATION).wrap();
  } else {
    return span(leftCharPos, right);
  }
}).when(IsInvisible, MatchAny, left => new InvisibleSpan(left.kind, BROKEN_LOCATION).wrap()).when(MatchAny, IsInvisible, (_, right) => new InvisibleSpan(right.kind, BROKEN_LOCATION).wrap()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,