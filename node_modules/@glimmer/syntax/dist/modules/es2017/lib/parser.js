import { assert, assign } from '@glimmer/util';
import { EntityParser, EventedTokenizer, HTML5NamedCharRefs as namedCharRefs } from 'simple-html-tokenizer';
export class Parser {
  constructor(source, entityParser = new EntityParser(namedCharRefs), mode = 'precompile') {
    this.elementStack = [];
    this.currentAttribute = null;
    this.currentNode = null;
    this.source = source;
    this.lines = source.source.split(/(?:\r\n?|\n)/g);
    this.tokenizer = new EventedTokenizer(this, entityParser, mode);
  }

  offset() {
    let {
      line,
      column
    } = this.tokenizer;
    return this.source.offsetFor(line, column);
  }

  pos({
    line,
    column
  }) {
    return this.source.offsetFor(line, column);
  }

  finish(node) {
    return assign({}, node, {
      loc: node.loc.until(this.offset())
    }); // node.loc = node.loc.withEnd(end);
  }

  get currentAttr() {
    return this.currentAttribute;
  }

  get currentTag() {
    let node = this.currentNode;
    (false && assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag'));
    return node;
  }

  get currentStartTag() {
    let node = this.currentNode;
    (false && assert(node && node.type === 'StartTag', 'expected start tag'));
    return node;
  }

  get currentEndTag() {
    let node = this.currentNode;
    (false && assert(node && node.type === 'EndTag', 'expected end tag'));
    return node;
  }

  get currentComment() {
    let node = this.currentNode;
    (false && assert(node && node.type === 'CommentStatement', 'expected a comment'));
    return node;
  }

  get currentData() {
    let node = this.currentNode;
    (false && assert(node && node.type === 'TextNode', 'expected a text node'));
    return node;
  }

  acceptTemplate(node) {
    return this[node.type](node);
  }

  acceptNode(node) {
    return this[node.type](node);
  }

  currentElement() {
    return this.elementStack[this.elementStack.length - 1];
  }

  sourceForNode(node, endNode) {
    let firstLine = node.loc.start.line - 1;
    let currentLine = firstLine - 1;
    let firstColumn = node.loc.start.column;
    let string = [];
    let line;
    let lastLine;
    let lastColumn;

    if (endNode) {
      lastLine = endNode.loc.end.line - 1;
      lastColumn = endNode.loc.end.column;
    } else {
      lastLine = node.loc.end.line - 1;
      lastColumn = node.loc.end.column;
    }

    while (currentLine < lastLine) {
      currentLine++;
      line = this.lines[currentLine];

      if (currentLine === firstLine) {
        if (firstLine === lastLine) {
          string.push(line.slice(firstColumn, lastColumn));
        } else {
          string.push(line.slice(firstColumn));
        }
      } else if (currentLine === lastLine) {
        string.push(line.slice(0, lastColumn));
      } else {
        string.push(line);
      }
    }

    return string.join('\n');
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,