import { assert } from '@glimmer/util';
import { PathExpressionImplV1 } from './legacy-interop';
const DEFAULT_STRIP = {
  close: false,
  open: false
};
/**
 * The Parser Builder differentiates from the public builder API by:
 *
 * 1. Offering fewer different ways to instantiate nodes
 * 2. Mandating source locations
 */

class Builders {
  pos(line, column) {
    return {
      line,
      column
    };
  }

  blockItself({
    body,
    blockParams,
    chained = false,
    loc
  }) {
    return {
      type: 'Block',
      body: body || [],
      blockParams: blockParams || [],
      chained,
      loc
    };
  }

  template({
    body,
    blockParams,
    loc
  }) {
    return {
      type: 'Template',
      body: body || [],
      blockParams: blockParams || [],
      loc
    };
  }

  mustache({
    path,
    params,
    hash,
    trusting,
    loc,
    strip = DEFAULT_STRIP
  }) {
    return {
      type: 'MustacheStatement',
      path,
      params,
      hash,
      escaped: !trusting,
      trusting,
      loc,
      strip: strip || {
        open: false,
        close: false
      }
    };
  }

  block({
    path,
    params,
    hash,
    defaultBlock,
    elseBlock = null,
    loc,
    openStrip = DEFAULT_STRIP,
    inverseStrip = DEFAULT_STRIP,
    closeStrip = DEFAULT_STRIP
  }) {
    return {
      type: 'BlockStatement',
      path: path,
      params,
      hash,
      program: defaultBlock,
      inverse: elseBlock,
      loc: loc,
      openStrip: openStrip,
      inverseStrip: inverseStrip,
      closeStrip: closeStrip
    };
  }

  comment(value, loc) {
    return {
      type: 'CommentStatement',
      value: value,
      loc
    };
  }

  mustacheComment(value, loc) {
    return {
      type: 'MustacheCommentStatement',
      value: value,
      loc
    };
  }

  concat(parts, loc) {
    return {
      type: 'ConcatStatement',
      parts,
      loc
    };
  }

  element({
    tag,
    selfClosing,
    attrs,
    blockParams,
    modifiers,
    comments,
    children,
    loc
  }) {
    return {
      type: 'ElementNode',
      tag,
      selfClosing: selfClosing,
      attributes: attrs || [],
      blockParams: blockParams || [],
      modifiers: modifiers || [],
      comments: comments || [],
      children: children || [],
      loc
    };
  }

  elementModifier({
    path,
    params,
    hash,
    loc
  }) {
    return {
      type: 'ElementModifierStatement',
      path,
      params,
      hash,
      loc
    };
  }

  attr({
    name,
    value,
    loc
  }) {
    return {
      type: 'AttrNode',
      name: name,
      value: value,
      loc
    };
  }

  text({
    chars,
    loc
  }) {
    return {
      type: 'TextNode',
      chars,
      loc
    };
  }

  sexpr({
    path,
    params,
    hash,
    loc
  }) {
    return {
      type: 'SubExpression',
      path,
      params,
      hash,
      loc
    };
  }

  path({
    head,
    tail,
    loc
  }) {
    let {
      original: originalHead
    } = headToString(head);
    let original = [...originalHead, ...tail].join('.');
    return new PathExpressionImplV1(original, head, tail, loc);
  }

  head(head, loc) {
    if (head[0] === '@') {
      return this.atName(head, loc);
    } else if (head === 'this') {
      return this.this(loc);
    } else {
      return this.var(head, loc);
    }
  }

  this(loc) {
    return {
      type: 'ThisHead',
      loc
    };
  }

  atName(name, loc) {
    // the `@` should be included so we have a complete source range
    (false && assert(name[0] === '@', `call builders.at() with a string that starts with '@'`));
    return {
      type: 'AtHead',
      name,
      loc
    };
  }

  var(name, loc) {
    (false && assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`));
    (false && assert(name[0] !== '@', `You called builders.var() with '${name}'. Call builders.at('${name}') instead`));
    return {
      type: 'VarHead',
      name,
      loc
    };
  }

  hash(pairs, loc) {
    return {
      type: 'Hash',
      pairs: pairs || [],
      loc
    };
  }

  pair({
    key,
    value,
    loc
  }) {
    return {
      type: 'HashPair',
      key: key,
      value,
      loc
    };
  }

  literal({
    type,
    value,
    loc
  }) {
    return {
      type,
      value,
      original: value,
      loc
    };
  }

  undefined() {
    return this.literal({
      type: 'UndefinedLiteral',
      value: undefined
    });
  }

  null() {
    return this.literal({
      type: 'NullLiteral',
      value: null
    });
  }

  string(value, loc) {
    return this.literal({
      type: 'StringLiteral',
      value,
      loc
    });
  }

  boolean(value, loc) {
    return this.literal({
      type: 'BooleanLiteral',
      value,
      loc
    });
  }

  number(value, loc) {
    return this.literal({
      type: 'NumberLiteral',
      value,
      loc
    });
  }

} // Expressions


function headToString(head) {
  switch (head.type) {
    case 'AtHead':
      return {
        original: head.name,
        parts: [head.name]
      };

    case 'ThisHead':
      return {
        original: `this`,
        parts: []
      };

    case 'VarHead':
      return {
        original: head.name,
        parts: [head.name]
      };
  }
}

export default new Builders();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,