export function isKeyword(word) {
  return word in KEYWORDS_TYPES;
}
/**
 * This includes the full list of keywords currently in use in the template
 * language, and where their valid usages are.
 */

export var KEYWORDS_TYPES = {
  component: ['Call', 'Append', 'Block'],
  "debugger": ['Append'],
  'each-in': ['Block'],
  each: ['Block'],
  'has-block-params': ['Call', 'Append'],
  'has-block': ['Call', 'Append'],
  helper: ['Call', 'Append'],
  "if": ['Call', 'Append', 'Block'],
  'in-element': ['Block'],
  "let": ['Block'],
  'link-to': ['Append', 'Block'],
  log: ['Call', 'Append'],
  modifier: ['Call'],
  mount: ['Append'],
  mut: ['Call', 'Append'],
  outlet: ['Append'],
  'query-params': ['Call'],
  readonly: ['Call', 'Append'],
  unbound: ['Call', 'Append'],
  unless: ['Call', 'Append', 'Block'],
  "with": ['Block'],
  "yield": ['Append']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIva2V5d29yZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTSxTQUFBLFNBQUEsQ0FBQSxJQUFBLEVBQWdDO0FBQ3BDLFNBQU8sSUFBSSxJQUFYLGNBQUE7QUFDRDtBQUVEOzs7OztBQUlBLE9BQU8sSUFBTSxjQUFjLEdBQXFDO0FBQzlELEVBQUEsU0FBUyxFQUFFLENBQUEsTUFBQSxFQUFBLFFBQUEsRUFEbUQsT0FDbkQsQ0FEbUQ7QUFFOUQsY0FBVSxDQUZvRCxRQUVwRCxDQUZvRDtBQUc5RCxhQUFXLENBSG1ELE9BR25ELENBSG1EO0FBSTlELEVBQUEsSUFBSSxFQUFFLENBSndELE9BSXhELENBSndEO0FBSzlELHNCQUFvQixDQUFBLE1BQUEsRUFMMEMsUUFLMUMsQ0FMMEM7QUFNOUQsZUFBYSxDQUFBLE1BQUEsRUFOaUQsUUFNakQsQ0FOaUQ7QUFPOUQsRUFBQSxNQUFNLEVBQUUsQ0FBQSxNQUFBLEVBUHNELFFBT3RELENBUHNEO0FBUTlELFFBQUksQ0FBQSxNQUFBLEVBQUEsUUFBQSxFQVIwRCxPQVExRCxDQVIwRDtBQVM5RCxnQkFBYyxDQVRnRCxPQVNoRCxDQVRnRDtBQVU5RCxTQUFLLENBVnlELE9BVXpELENBVnlEO0FBVzlELGFBQVcsQ0FBQSxRQUFBLEVBWG1ELE9BV25ELENBWG1EO0FBWTlELEVBQUEsR0FBRyxFQUFFLENBQUEsTUFBQSxFQVp5RCxRQVl6RCxDQVp5RDtBQWE5RCxFQUFBLFFBQVEsRUFBRSxDQWJvRCxNQWFwRCxDQWJvRDtBQWM5RCxFQUFBLEtBQUssRUFBRSxDQWR1RCxRQWN2RCxDQWR1RDtBQWU5RCxFQUFBLEdBQUcsRUFBRSxDQUFBLE1BQUEsRUFmeUQsUUFlekQsQ0FmeUQ7QUFnQjlELEVBQUEsTUFBTSxFQUFFLENBaEJzRCxRQWdCdEQsQ0FoQnNEO0FBaUI5RCxrQkFBZ0IsQ0FqQjhDLE1BaUI5QyxDQWpCOEM7QUFrQjlELEVBQUEsUUFBUSxFQUFFLENBQUEsTUFBQSxFQWxCb0QsUUFrQnBELENBbEJvRDtBQW1COUQsRUFBQSxPQUFPLEVBQUUsQ0FBQSxNQUFBLEVBbkJxRCxRQW1CckQsQ0FuQnFEO0FBb0I5RCxFQUFBLE1BQU0sRUFBRSxDQUFBLE1BQUEsRUFBQSxRQUFBLEVBcEJzRCxPQW9CdEQsQ0FwQnNEO0FBcUI5RCxVQUFNLENBckJ3RCxPQXFCeEQsQ0FyQndEO0FBc0I5RCxXQUFPLENBQUEsUUFBQTtBQXRCdUQsQ0FBekQiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBLZXl3b3JkVHlwZSA9ICdDYWxsJyB8ICdNb2RpZmllcicgfCAnQXBwZW5kJyB8ICdCbG9jayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0tleXdvcmQod29yZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB3b3JkIGluIEtFWVdPUkRTX1RZUEVTO1xufVxuXG4vKipcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIGZ1bGwgbGlzdCBvZiBrZXl3b3JkcyBjdXJyZW50bHkgaW4gdXNlIGluIHRoZSB0ZW1wbGF0ZVxuICogbGFuZ3VhZ2UsIGFuZCB3aGVyZSB0aGVpciB2YWxpZCB1c2FnZXMgYXJlLlxuICovXG5leHBvcnQgY29uc3QgS0VZV09SRFNfVFlQRVM6IHsgW2tleTogc3RyaW5nXTogS2V5d29yZFR5cGVbXSB9ID0ge1xuICBjb21wb25lbnQ6IFsnQ2FsbCcsICdBcHBlbmQnLCAnQmxvY2snXSxcbiAgZGVidWdnZXI6IFsnQXBwZW5kJ10sXG4gICdlYWNoLWluJzogWydCbG9jayddLFxuICBlYWNoOiBbJ0Jsb2NrJ10sXG4gICdoYXMtYmxvY2stcGFyYW1zJzogWydDYWxsJywgJ0FwcGVuZCddLFxuICAnaGFzLWJsb2NrJzogWydDYWxsJywgJ0FwcGVuZCddLFxuICBoZWxwZXI6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgaWY6IFsnQ2FsbCcsICdBcHBlbmQnLCAnQmxvY2snXSxcbiAgJ2luLWVsZW1lbnQnOiBbJ0Jsb2NrJ10sXG4gIGxldDogWydCbG9jayddLFxuICAnbGluay10byc6IFsnQXBwZW5kJywgJ0Jsb2NrJ10sXG4gIGxvZzogWydDYWxsJywgJ0FwcGVuZCddLFxuICBtb2RpZmllcjogWydDYWxsJ10sXG4gIG1vdW50OiBbJ0FwcGVuZCddLFxuICBtdXQ6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgb3V0bGV0OiBbJ0FwcGVuZCddLFxuICAncXVlcnktcGFyYW1zJzogWydDYWxsJ10sXG4gIHJlYWRvbmx5OiBbJ0NhbGwnLCAnQXBwZW5kJ10sXG4gIHVuYm91bmQ6IFsnQ2FsbCcsICdBcHBlbmQnXSxcbiAgdW5sZXNzOiBbJ0NhbGwnLCAnQXBwZW5kJywgJ0Jsb2NrJ10sXG4gIHdpdGg6IFsnQmxvY2snXSxcbiAgeWllbGQ6IFsnQXBwZW5kJ10sXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==