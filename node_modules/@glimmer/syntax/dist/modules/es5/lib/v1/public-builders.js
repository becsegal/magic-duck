import { assert, assign, deprecate, isPresent } from '@glimmer/util';
import { SYNTHETIC_LOCATION } from '../source/location';
import { Source } from '../source/source';
import { SourceSpan } from '../source/span';
import { PathExpressionImplV1 } from './legacy-interop';

var _SOURCE;

function SOURCE() {
  if (!_SOURCE) {
    _SOURCE = new Source('', '(synthetic)');
  }

  return _SOURCE;
}

function buildMustache(path, params, hash, raw, loc, strip) {
  if (typeof path === 'string') {
    path = buildPath(path);
  }

  return {
    type: 'MustacheStatement',
    path: path,
    params: params || [],
    hash: hash || buildHash([]),
    escaped: !raw,
    trusting: !!raw,
    loc: buildLoc(loc || null),
    strip: strip || {
      open: false,
      close: false
    }
  };
}

function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
  var defaultBlock;
  var elseBlock;

  if (_defaultBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
        false && !false && deprecate("b.program is deprecated. Use b.blockItself instead.");
      }

    defaultBlock = assign({}, _defaultBlock, {
      type: 'Block'
    });
  } else {
    defaultBlock = _defaultBlock;
  }

  if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
        false && !false && deprecate("b.program is deprecated. Use b.blockItself instead.");
      }

    elseBlock = assign({}, _elseBlock, {
      type: 'Block'
    });
  } else {
    elseBlock = _elseBlock;
  }

  return {
    type: 'BlockStatement',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    program: defaultBlock || null,
    inverse: elseBlock || null,
    loc: buildLoc(loc || null),
    openStrip: openStrip || {
      open: false,
      close: false
    },
    inverseStrip: inverseStrip || {
      open: false,
      close: false
    },
    closeStrip: closeStrip || {
      open: false,
      close: false
    }
  };
}

function buildElementModifier(path, params, hash, loc) {
  return {
    type: 'ElementModifierStatement',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function buildPartial(name, params, hash, indent, loc) {
  return {
    type: 'PartialStatement',
    name: name,
    params: params || [],
    hash: hash || buildHash([]),
    indent: indent || '',
    strip: {
      open: false,
      close: false
    },
    loc: buildLoc(loc || null)
  };
}

function buildComment(value, loc) {
  return {
    type: 'CommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildMustacheComment(value, loc) {
  return {
    type: 'MustacheCommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildConcat(parts, loc) {
  if (!isPresent(parts)) {
    throw new Error("b.concat requires at least one part");
  }

  return {
    type: 'ConcatStatement',
    parts: parts || [],
    loc: buildLoc(loc || null)
  };
}

function buildElement(tag, options) {
  var attrs = options.attrs,
      blockParams = options.blockParams,
      modifiers = options.modifiers,
      comments = options.comments,
      children = options.children,
      loc = options.loc;
  var tagName; // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

  var selfClosing = false;

  if (typeof tag === 'object') {
    selfClosing = tag.selfClosing;
    tagName = tag.name;
  } else if (tag.slice(-1) === '/') {
    tagName = tag.slice(0, -1);
    selfClosing = true;
  } else {
    tagName = tag;
  }

  return {
    type: 'ElementNode',
    tag: tagName,
    selfClosing: selfClosing,
    attributes: attrs || [],
    blockParams: blockParams || [],
    modifiers: modifiers || [],
    comments: comments || [],
    children: children || [],
    loc: buildLoc(loc || null)
  };
}

function buildAttr(name, value, loc) {
  return {
    type: 'AttrNode',
    name: name,
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildText(chars, loc) {
  return {
    type: 'TextNode',
    chars: chars || '',
    loc: buildLoc(loc || null)
  };
} // Expressions


function buildSexpr(path, params, hash, loc) {
  return {
    type: 'SubExpression',
    path: buildPath(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function headToString(head) {
  switch (head.type) {
    case 'AtHead':
      return {
        original: head.name,
        parts: [head.name]
      };

    case 'ThisHead':
      return {
        original: "this",
        parts: []
      };

    case 'VarHead':
      return {
        original: head.name,
        parts: [head.name]
      };
  }
}

function buildHead(original, loc) {
  var _original$split = original.split('.'),
      head = _original$split[0],
      tail = _original$split.slice(1);

  var headNode;

  if (head === 'this') {
    headNode = {
      type: 'ThisHead',
      loc: buildLoc(loc || null)
    };
  } else if (head[0] === '@') {
    headNode = {
      type: 'AtHead',
      name: head,
      loc: buildLoc(loc || null)
    };
  } else {
    headNode = {
      type: 'VarHead',
      name: head,
      loc: buildLoc(loc || null)
    };
  }

  return {
    head: headNode,
    tail: tail
  };
}

function buildThis(loc) {
  return {
    type: 'ThisHead',
    loc: buildLoc(loc || null)
  };
}

function buildAtName(name, loc) {
  // the `@` should be included so we have a complete source range
  false && assert(name[0] === '@', "call builders.at() with a string that starts with '@'");
  return {
    type: 'AtHead',
    name: name,
    loc: buildLoc(loc || null)
  };
}

function buildVar(name, loc) {
  false && assert(name !== 'this', "You called builders.var() with 'this'. Call builders.this instead");
  false && assert(name[0] !== '@', "You called builders.var() with '" + name + "'. Call builders.at('" + name + "') instead");
  return {
    type: 'VarHead',
    name: name,
    loc: buildLoc(loc || null)
  };
}

function buildHeadFromString(head, loc) {
  if (head[0] === '@') {
    return buildAtName(head, loc);
  } else if (head === 'this') {
    return buildThis(loc);
  } else {
    return buildVar(head, loc);
  }
}

function buildNamedBlockName(name, loc) {
  return {
    type: 'NamedBlockName',
    name: name,
    loc: buildLoc(loc || null)
  };
}

function buildCleanPath(head, tail, loc) {
  var _headToString = headToString(head),
      originalHead = _headToString.original,
      headParts = _headToString.parts;

  var parts = [].concat(headParts, tail);
  var original = [].concat(originalHead, parts).join('.');
  return new PathExpressionImplV1(original, head, tail, buildLoc(loc || null));
}

function buildPath(path, loc) {
  if (typeof path !== 'string') {
    if ('type' in path) {
      return path;
    } else {
      var _buildHead = buildHead(path.head, SourceSpan.broken()),
          _head = _buildHead.head,
          _tail = _buildHead.tail;

      false && assert(_tail.length === 0, "builder.path({ head, tail }) should not be called with a head with dots in it");

      var _headToString2 = headToString(_head),
          originalHead = _headToString2.original;

      return new PathExpressionImplV1([originalHead].concat(_tail).join('.'), _head, _tail, buildLoc(loc || null));
    }
  }

  var _buildHead2 = buildHead(path, SourceSpan.broken()),
      head = _buildHead2.head,
      tail = _buildHead2.tail;

  return new PathExpressionImplV1(path, head, tail, buildLoc(loc || null));
}

function buildLiteral(type, value, loc) {
  return {
    type: type,
    value: value,
    original: value,
    loc: buildLoc(loc || null)
  };
} // Miscellaneous


function buildHash(pairs, loc) {
  return {
    type: 'Hash',
    pairs: pairs || [],
    loc: buildLoc(loc || null)
  };
}

function buildPair(key, value, loc) {
  return {
    type: 'HashPair',
    key: key,
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildProgram(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildBlockItself(body, blockParams, chained, loc) {
  if (chained === void 0) {
    chained = false;
  }

  return {
    type: 'Block',
    body: body || [],
    blockParams: blockParams || [],
    chained: chained,
    loc: buildLoc(loc || null)
  };
}

function buildTemplate(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildPosition(line, column) {
  return {
    line: line,
    column: column
  };
}

function buildLoc() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 1) {
    var loc = args[0];

    if (loc && typeof loc === 'object') {
      return SourceSpan.forHbsLoc(SOURCE(), loc);
    } else {
      return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);
    }
  } else {
    var startLine = args[0],
        startColumn = args[1],
        endLine = args[2],
        endColumn = args[3],
        _source = args[4];
    var source = _source ? new Source('', _source) : SOURCE();
    return SourceSpan.forHbsLoc(source, {
      start: {
        line: startLine,
        column: startColumn
      },
      end: {
        line: endLine,
        column: endColumn
      }
    });
  }
}

export default {
  mustache: buildMustache,
  block: buildBlock,
  partial: buildPartial,
  comment: buildComment,
  mustacheComment: buildMustacheComment,
  element: buildElement,
  elementModifier: buildElementModifier,
  attr: buildAttr,
  text: buildText,
  sexpr: buildSexpr,
  concat: buildConcat,
  hash: buildHash,
  pair: buildPair,
  literal: buildLiteral,
  program: buildProgram,
  blockItself: buildBlockItself,
  template: buildTemplate,
  loc: buildLoc,
  pos: buildPosition,
  path: buildPath,
  fullPath: buildCleanPath,
  head: buildHeadFromString,
  at: buildAtName,
  "var": buildVar,
  "this": buildThis,
  blockName: buildNamedBlockName,
  string: literal('StringLiteral'),
  "boolean": literal('BooleanLiteral'),
  number: literal('NumberLiteral'),
  undefined: function (_undefined) {
    function undefined() {
      return _undefined.apply(this, arguments);
    }

    undefined.toString = function () {
      return _undefined.toString();
    };

    return undefined;
  }(function () {
    return buildLiteral('UndefinedLiteral', undefined);
  }),
  "null": function _null() {
    return buildLiteral('NullLiteral', null);
  }
};

function literal(type) {
  return function (value, loc) {
    return buildLiteral(type, value, loc);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,