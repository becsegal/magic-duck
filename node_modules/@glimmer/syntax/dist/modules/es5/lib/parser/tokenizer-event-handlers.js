function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

import { assertPresent, assign } from '@glimmer/util';
import { parse, parseWithoutProcessing } from '@handlebars/parser';
import { EntityParser } from 'simple-html-tokenizer';
import print from '../generation/print';
import { voidMap } from '../generation/printer';
import { Source } from '../source/source';
import { SourceSpan } from '../source/span';
import { generateSyntaxError } from '../syntax-error';
import traverse from '../traversal/traverse';
import Walker from '../traversal/walker';
import { appendChild, parseElementBlockParams } from '../utils';
import b from '../v1/parser-builders';
import publicBuilder from '../v1/public-builders';
import { HandlebarsNodeVisitors } from './handlebars-node-visitors';
export var TokenizerEventHandlers = /*#__PURE__*/function (_HandlebarsNodeVisito) {
  _inheritsLoose(TokenizerEventHandlers, _HandlebarsNodeVisito);

  function TokenizerEventHandlers() {
    var _this;

    _this = _HandlebarsNodeVisito.apply(this, arguments) || this;
    _this.tagOpenLine = 0;
    _this.tagOpenColumn = 0;
    return _this;
  }

  var _proto = TokenizerEventHandlers.prototype;

  _proto.reset = function reset() {
    this.currentNode = null;
  } // Comment
  ;

  _proto.beginComment = function beginComment() {
    this.currentNode = b.comment('', this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn));
  };

  _proto.appendToCommentData = function appendToCommentData(_char) {
    this.currentComment.value += _char;
  };

  _proto.finishComment = function finishComment() {
    appendChild(this.currentElement(), this.finish(this.currentComment));
  } // Data
  ;

  _proto.beginData = function beginData() {
    this.currentNode = b.text({
      chars: '',
      loc: this.offset().collapsed()
    });
  };

  _proto.appendToData = function appendToData(_char2) {
    this.currentData.chars += _char2;
  };

  _proto.finishData = function finishData() {
    this.currentData.loc = this.currentData.loc.withEnd(this.offset());
    appendChild(this.currentElement(), this.currentData);
  } // Tags - basic
  ;

  _proto.tagOpen = function tagOpen() {
    this.tagOpenLine = this.tokenizer.line;
    this.tagOpenColumn = this.tokenizer.column;
  };

  _proto.beginStartTag = function beginStartTag() {
    this.currentNode = {
      type: 'StartTag',
      name: '',
      attributes: [],
      modifiers: [],
      comments: [],
      selfClosing: false,
      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
    };
  };

  _proto.beginEndTag = function beginEndTag() {
    this.currentNode = {
      type: 'EndTag',
      name: '',
      attributes: [],
      modifiers: [],
      comments: [],
      selfClosing: false,
      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn)
    };
  };

  _proto.finishTag = function finishTag() {
    var tag = this.finish(this.currentTag);

    if (tag.type === 'StartTag') {
      this.finishStartTag();

      if (tag.name === ':') {
        throw generateSyntaxError('Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter', this.source.spanFor({
          start: this.currentTag.loc.toJSON(),
          end: this.offset().toJSON()
        }));
      }

      if (voidMap[tag.name] || tag.selfClosing) {
        this.finishEndTag(true);
      }
    } else if (tag.type === 'EndTag') {
      this.finishEndTag(false);
    }
  };

  _proto.finishStartTag = function finishStartTag() {
    var _this$finish = this.finish(this.currentStartTag),
        name = _this$finish.name,
        attrs = _this$finish.attributes,
        modifiers = _this$finish.modifiers,
        comments = _this$finish.comments,
        selfClosing = _this$finish.selfClosing,
        loc = _this$finish.loc;

    var element = b.element({
      tag: name,
      selfClosing: selfClosing,
      attrs: attrs,
      modifiers: modifiers,
      comments: comments,
      children: [],
      blockParams: [],
      loc: loc
    });
    this.elementStack.push(element);
  };

  _proto.finishEndTag = function finishEndTag(isVoid) {
    var tag = this.finish(this.currentTag);
    var element = this.elementStack.pop();
    var parent = this.currentElement();
    this.validateEndTag(tag, element, isVoid);
    element.loc = element.loc.withEnd(this.offset());
    parseElementBlockParams(element);
    appendChild(parent, element);
  };

  _proto.markTagAsSelfClosing = function markTagAsSelfClosing() {
    this.currentTag.selfClosing = true;
  } // Tags - name
  ;

  _proto.appendToTagName = function appendToTagName(_char3) {
    this.currentTag.name += _char3;
  } // Tags - attributes
  ;

  _proto.beginAttribute = function beginAttribute() {
    var offset = this.offset();
    this.currentAttribute = {
      name: '',
      parts: [],
      currentPart: null,
      isQuoted: false,
      isDynamic: false,
      start: offset,
      valueSpan: offset.collapsed()
    };
  };

  _proto.appendToAttributeName = function appendToAttributeName(_char4) {
    this.currentAttr.name += _char4;
  };

  _proto.beginAttributeValue = function beginAttributeValue(isQuoted) {
    this.currentAttr.isQuoted = isQuoted;
    this.startTextPart();
    this.currentAttr.valueSpan = this.offset().collapsed();
  };

  _proto.appendToAttributeValue = function appendToAttributeValue(_char5) {
    var parts = this.currentAttr.parts;
    var lastPart = parts[parts.length - 1];
    var current = this.currentAttr.currentPart;

    if (current) {
      current.chars += _char5; // update end location for each added char

      current.loc = current.loc.withEnd(this.offset());
    } else {
      // initially assume the text node is a single char
      var loc = this.offset(); // the tokenizer line/column have already been advanced, correct location info

      if (_char5 === '\n') {
        loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();
      } else {
        loc = loc.move(-1);
      }

      this.currentAttr.currentPart = b.text({
        chars: _char5,
        loc: loc.collapsed()
      });
    }
  };

  _proto.finishAttributeValue = function finishAttributeValue() {
    this.finalizeTextPart();
    var tag = this.currentTag;
    var tokenizerPos = this.offset();

    if (tag.type === 'EndTag') {
      throw generateSyntaxError("Invalid end tag: closing tag must not have attributes", this.source.spanFor({
        start: tag.loc.toJSON(),
        end: tokenizerPos.toJSON()
      }));
    }

    var _this$currentAttr = this.currentAttr,
        name = _this$currentAttr.name,
        parts = _this$currentAttr.parts,
        start = _this$currentAttr.start,
        isQuoted = _this$currentAttr.isQuoted,
        isDynamic = _this$currentAttr.isDynamic,
        valueSpan = _this$currentAttr.valueSpan;
    var value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));
    value.loc = valueSpan.withEnd(tokenizerPos);
    var attribute = b.attr({
      name: name,
      value: value,
      loc: start.until(tokenizerPos)
    });
    this.currentStartTag.attributes.push(attribute);
  };

  _proto.reportSyntaxError = function reportSyntaxError(message) {
    throw generateSyntaxError(message, this.offset().collapsed());
  };

  _proto.assembleConcatenatedValue = function assembleConcatenatedValue(parts) {
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];

      if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {
        throw generateSyntaxError('Unsupported node in quoted attribute value: ' + part['type'], part.loc);
      }
    }

    assertPresent(parts, "the concatenation parts of an element should not be empty");
    var first = parts[0];
    var last = parts[parts.length - 1];
    return b.concat(parts, this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)));
  };

  _proto.validateEndTag = function validateEndTag(tag, element, selfClosing) {
    var error;

    if (voidMap[tag.name] && !selfClosing) {
      // EngTag is also called by StartTag for void and self-closing tags (i.e.
      // <input> or <br />, so we need to check for that here. Otherwise, we would
      // throw an error for those cases.
      error = "<" + tag.name + "> elements do not need end tags. You should remove it";
    } else if (element.tag === undefined) {
      error = "Closing tag </" + tag.name + "> without an open tag";
    } else if (element.tag !== tag.name) {
      error = "Closing tag </" + tag.name + "> did not match last open tag <" + element.tag + "> (on line " + element.loc.startPosition.line + ")";
    }

    if (error) {
      throw generateSyntaxError(error, tag.loc);
    }
  };

  _proto.assembleAttributeValue = function assembleAttributeValue(parts, isQuoted, isDynamic, span) {
    if (isDynamic) {
      if (isQuoted) {
        return this.assembleConcatenatedValue(parts);
      } else {
        if (parts.length === 1 || parts.length === 2 && parts[1].type === 'TextNode' && parts[1].chars === '/') {
          return parts[0];
        } else {
          throw generateSyntaxError("An unquoted attribute value must be a string or a mustache, " + "preceded by whitespace or a '=' character, and " + "followed by whitespace, a '>' character, or '/>'", span);
        }
      }
    } else {
      return parts.length > 0 ? parts[0] : b.text({
        chars: '',
        loc: span
      });
    }
  };

  return TokenizerEventHandlers;
}(HandlebarsNodeVisitors);
var syntax = {
  parse: preprocess,
  builders: publicBuilder,
  print: print,
  traverse: traverse,
  Walker: Walker
};

var CodemodEntityParser = /*#__PURE__*/function (_EntityParser) {
  _inheritsLoose(CodemodEntityParser, _EntityParser);

  // match upstream types, but never match an entity
  function CodemodEntityParser() {
    return _EntityParser.call(this, {}) || this;
  }

  var _proto2 = CodemodEntityParser.prototype;

  _proto2.parse = function parse() {
    return undefined;
  };

  return CodemodEntityParser;
}(EntityParser);

export function preprocess(input, options) {
  if (options === void 0) {
    options = {};
  }

  var _a, _b, _c;

  var mode = options.mode || 'precompile';
  var source;
  var ast;

  if (typeof input === 'string') {
    source = new Source(input, (_a = options.meta) === null || _a === void 0 ? void 0 : _a.moduleName);

    if (mode === 'codemod') {
      ast = parseWithoutProcessing(input, options.parseOptions);
    } else {
      ast = parse(input, options.parseOptions);
    }
  } else if (input instanceof Source) {
    source = input;

    if (mode === 'codemod') {
      ast = parseWithoutProcessing(input.source, options.parseOptions);
    } else {
      ast = parse(input.source, options.parseOptions);
    }
  } else {
    source = new Source('', (_b = options.meta) === null || _b === void 0 ? void 0 : _b.moduleName);
    ast = input;
  }

  var entityParser = undefined;

  if (mode === 'codemod') {
    entityParser = new CodemodEntityParser();
  }

  var offsets = SourceSpan.forCharPositions(source, 0, source.source.length);
  ast.loc = {
    source: '(program)',
    start: offsets.startPosition,
    end: offsets.endPosition
  };
  var program = new TokenizerEventHandlers(source, entityParser, mode).acceptTemplate(ast);

  if (options.strictMode) {
    program.blockParams = (_c = options.locals) !== null && _c !== void 0 ? _c : [];
  }

  if (options && options.plugins && options.plugins.ast) {
    for (var i = 0, l = options.plugins.ast.length; i < l; i++) {
      var transform = options.plugins.ast[i];
      var env = assign({}, options, {
        syntax: syntax
      }, {
        plugins: undefined
      });
      var pluginResult = transform(env);
      traverse(program, pluginResult.visitor);
    }
  }

  return program;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,