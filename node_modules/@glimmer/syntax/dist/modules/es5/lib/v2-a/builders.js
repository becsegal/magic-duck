var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import { assert, assertPresent, assign } from '@glimmer/util';
import { SourceSlice } from '../source/slice';
import { SpanList } from '../source/span-list';
import * as ASTv2 from './api';
export var Builder = /*#__PURE__*/function () {
  function Builder() {}

  var _proto = Builder.prototype;

  // TEMPLATE //
  _proto.template = function template(symbols, body, loc) {
    return new ASTv2.Template({
      table: symbols,
      body: body,
      loc: loc
    });
  } // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //
  ;

  _proto.block = function block(symbols, body, loc) {
    return new ASTv2.Block({
      scope: symbols,
      body: body,
      loc: loc
    });
  };

  _proto.namedBlock = function namedBlock(name, block, loc) {
    return new ASTv2.NamedBlock({
      name: name,
      block: block,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      loc: loc
    });
  };

  _proto.simpleNamedBlock = function simpleNamedBlock(name, block, loc) {
    return new BuildElement({
      selfClosing: false,
      attrs: [],
      componentArgs: [],
      modifiers: [],
      comments: []
    }).named(name, block, loc);
  };

  _proto.slice = function slice(chars, loc) {
    return new SourceSlice({
      loc: loc,
      chars: chars
    });
  };

  _proto.args = function args(positional, named, loc) {
    return new ASTv2.Args({
      loc: loc,
      positional: positional,
      named: named
    });
  };

  _proto.positional = function positional(exprs, loc) {
    return new ASTv2.PositionalArguments({
      loc: loc,
      exprs: exprs
    });
  };

  _proto.namedArgument = function namedArgument(key, value) {
    return new ASTv2.NamedArgument({
      name: key,
      value: value
    });
  };

  _proto.named = function named(entries, loc) {
    return new ASTv2.NamedArguments({
      loc: loc,
      entries: entries
    });
  };

  _proto.attr = function attr(_ref, loc) {
    var name = _ref.name,
        value = _ref.value,
        trusting = _ref.trusting;
    return new ASTv2.HtmlAttr({
      loc: loc,
      name: name,
      value: value,
      trusting: trusting
    });
  };

  _proto.splatAttr = function splatAttr(symbol, loc) {
    return new ASTv2.SplatAttr({
      symbol: symbol,
      loc: loc
    });
  };

  _proto.arg = function arg(_ref2, loc) {
    var name = _ref2.name,
        value = _ref2.value,
        trusting = _ref2.trusting;
    return new ASTv2.ComponentArg({
      name: name,
      value: value,
      trusting: trusting,
      loc: loc
    });
  } // EXPRESSIONS //
  ;

  _proto.path = function path(head, tail, loc) {
    return new ASTv2.PathExpression({
      loc: loc,
      ref: head,
      tail: tail
    });
  };

  _proto.self = function self(loc) {
    return new ASTv2.ThisReference({
      loc: loc
    });
  };

  _proto.at = function at(name, symbol, loc) {
    // the `@` should be included so we have a complete source range
    false && assert(name[0] === '@', "call builders.at() with a string that starts with '@'");
    return new ASTv2.ArgReference({
      loc: loc,
      name: new SourceSlice({
        loc: loc,
        chars: name
      }),
      symbol: symbol
    });
  };

  _proto.freeVar = function freeVar(_ref3) {
    var name = _ref3.name,
        context = _ref3.context,
        symbol = _ref3.symbol,
        loc = _ref3.loc;
    false && assert(name !== 'this', "You called builders.freeVar() with 'this'. Call builders.this instead");
    false && assert(name[0] !== '@', "You called builders.freeVar() with '" + name + "'. Call builders.at('" + name + "') instead");
    return new ASTv2.FreeVarReference({
      name: name,
      resolution: context,
      symbol: symbol,
      loc: loc
    });
  };

  _proto.localVar = function localVar(name, symbol, isTemplateLocal, loc) {
    false && assert(name !== 'this', "You called builders.var() with 'this'. Call builders.this instead");
    false && assert(name[0] !== '@', "You called builders.var() with '" + name + "'. Call builders.at('" + name + "') instead");
    return new ASTv2.LocalVarReference({
      loc: loc,
      name: name,
      isTemplateLocal: isTemplateLocal,
      symbol: symbol
    });
  };

  _proto.sexp = function sexp(parts, loc) {
    return new ASTv2.CallExpression({
      loc: loc,
      callee: parts.callee,
      args: parts.args
    });
  };

  _proto.deprecatedCall = function deprecatedCall(arg, callee, loc) {
    return new ASTv2.DeprecatedCallExpression({
      loc: loc,
      arg: arg,
      callee: callee
    });
  };

  _proto.interpolate = function interpolate(parts, loc) {
    assertPresent(parts);
    return new ASTv2.InterpolateExpression({
      loc: loc,
      parts: parts
    });
  };

  _proto.literal = function literal(value, loc) {
    return new ASTv2.LiteralExpression({
      loc: loc,
      value: value
    });
  } // STATEMENTS //
  ;

  _proto.append = function append(_ref4, loc) {
    var table = _ref4.table,
        trusting = _ref4.trusting,
        value = _ref4.value;
    return new ASTv2.AppendContent({
      table: table,
      trusting: trusting,
      value: value,
      loc: loc
    });
  };

  _proto.modifier = function modifier(_ref5, loc) {
    var callee = _ref5.callee,
        args = _ref5.args;
    return new ASTv2.ElementModifier({
      loc: loc,
      callee: callee,
      args: args
    });
  };

  _proto.namedBlocks = function namedBlocks(blocks, loc) {
    return new ASTv2.NamedBlocks({
      loc: loc,
      blocks: blocks
    });
  };

  _proto.blockStatement = function blockStatement(_a, loc) {
    var symbols = _a.symbols,
        program = _a.program,
        _a$inverse = _a.inverse,
        inverse = _a$inverse === void 0 ? null : _a$inverse,
        call = __rest(_a, ["symbols", "program", "inverse"]);

    var blocksLoc = program.loc;
    var blocks = [this.namedBlock(SourceSlice.synthetic('default'), program, program.loc)];

    if (inverse) {
      blocksLoc = blocksLoc.extend(inverse.loc);
      blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));
    }

    return new ASTv2.InvokeBlock({
      loc: loc,
      blocks: this.namedBlocks(blocks, blocksLoc),
      callee: call.callee,
      args: call.args
    });
  };

  _proto.element = function element(options) {
    return new BuildElement(options);
  };

  return Builder;
}();
export var BuildElement = /*#__PURE__*/function () {
  function BuildElement(base) {
    this.base = base;
    this.builder = new Builder();
  }

  var _proto2 = BuildElement.prototype;

  _proto2.simple = function simple(tag, body, loc) {
    return new ASTv2.SimpleElement(assign({
      tag: tag,
      body: body,
      componentArgs: [],
      loc: loc
    }, this.base));
  };

  _proto2.named = function named(name, block, loc) {
    return new ASTv2.NamedBlock(assign({
      name: name,
      block: block,
      componentArgs: [],
      loc: loc
    }, this.base));
  };

  _proto2.selfClosingComponent = function selfClosingComponent(callee, loc) {
    return new ASTv2.InvokeComponent(assign({
      loc: loc,
      callee: callee,
      // point the empty named blocks at the `/` self-closing tag
      blocks: new ASTv2.NamedBlocks({
        blocks: [],
        loc: loc.sliceEndChars({
          skipEnd: 1,
          chars: 1
        })
      })
    }, this.base));
  };

  _proto2.componentWithDefaultBlock = function componentWithDefaultBlock(callee, children, symbols, loc) {
    var block = this.builder.block(symbols, children, loc);
    var namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);

    return new ASTv2.InvokeComponent(assign({
      loc: loc,
      callee: callee,
      blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc)
    }, this.base));
  };

  _proto2.componentWithNamedBlocks = function componentWithNamedBlocks(callee, blocks, loc) {
    return new ASTv2.InvokeComponent(assign({
      loc: loc,
      callee: callee,
      blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks))
    }, this.base));
  };

  return BuildElement;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,