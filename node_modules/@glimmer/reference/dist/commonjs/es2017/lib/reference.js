"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPrimitiveRef = createPrimitiveRef;
exports.createConstRef = createConstRef;
exports.createUnboundRef = createUnboundRef;
exports.createComputeRef = createComputeRef;
exports.createReadOnlyRef = createReadOnlyRef;
exports.isInvokableRef = isInvokableRef;
exports.createInvokableRef = createInvokableRef;
exports.isConstRef = isConstRef;
exports.isUpdatableRef = isUpdatableRef;
exports.valueForRef = valueForRef;
exports.updateRef = updateRef;
exports.childRefFor = childRefFor;
exports.childRefFromParts = childRefFromParts;
exports.createDebugAliasRef = exports.FALSE_REFERENCE = exports.TRUE_REFERENCE = exports.NULL_REFERENCE = exports.UNDEFINED_REFERENCE = exports.REFERENCE = void 0;

var _env = require("@glimmer/env");

var _globalContext = require("@glimmer/global-context");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

const REFERENCE = (0, _util.symbol)('REFERENCE');
exports.REFERENCE = REFERENCE;

class ReferenceImpl {
  constructor(type) {
    this.tag = null;
    this.lastRevision = _validator.INITIAL;
    this.children = null;
    this.compute = null;
    this.update = null;
    this[REFERENCE] = type;
  }

}

function createPrimitiveRef(value) {
  let ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.tag = _validator.CONSTANT_TAG;
  ref.lastValue = value;

  if (_env.DEBUG) {
    ref.debugLabel = String(value);
  }

  return ref;
}

const UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
const NULL_REFERENCE = createPrimitiveRef(null);
exports.NULL_REFERENCE = NULL_REFERENCE;
const TRUE_REFERENCE = createPrimitiveRef(true);
exports.TRUE_REFERENCE = TRUE_REFERENCE;
const FALSE_REFERENCE = createPrimitiveRef(false);
exports.FALSE_REFERENCE = FALSE_REFERENCE;

function createConstRef(value, debugLabel) {
  let ref = new ReferenceImpl(0
  /* Constant */
  );
  ref.lastValue = value;
  ref.tag = _validator.CONSTANT_TAG;

  if (_env.DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}

function createUnboundRef(value, debugLabel) {
  let ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.lastValue = value;
  ref.tag = _validator.CONSTANT_TAG;

  if (_env.DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}

function createComputeRef(compute, update = null, debugLabel = 'unknown') {
  let ref = new ReferenceImpl(1
  /* Compute */
  );
  ref.compute = compute;
  ref.update = update;

  if (_env.DEBUG) {
    ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
  }

  return ref;
}

function createReadOnlyRef(ref) {
  if (!isUpdatableRef(ref)) return ref;
  return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
}

function isInvokableRef(ref) {
  return ref[REFERENCE] === 3
  /* Invokable */
  ;
}

function createInvokableRef(inner) {
  let ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
  ref.debugLabel = inner.debugLabel;
  ref[REFERENCE] = 3
  /* Invokable */
  ;
  return ref;
}

function isConstRef(_ref) {
  let ref = _ref;
  return ref.tag === _validator.CONSTANT_TAG;
}

function isUpdatableRef(_ref) {
  let ref = _ref;
  return ref.update !== null;
}

function valueForRef(_ref) {
  let ref = _ref;
  let {
    tag
  } = ref;

  if (tag === _validator.CONSTANT_TAG) {
    return ref.lastValue;
  }

  let {
    lastRevision
  } = ref;
  let lastValue;

  if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
    let {
      compute
    } = ref;
    tag = ref.tag = (0, _validator.track)(() => {
      lastValue = ref.lastValue = compute();
    }, _env.DEBUG && ref.debugLabel);
    ref.lastRevision = (0, _validator.valueForTag)(tag);
  } else {
    lastValue = ref.lastValue;
  }

  (0, _validator.consumeTag)(tag);
  return lastValue;
}

function updateRef(_ref, value) {
  let ref = _ref;
  let update = ref.update;
  update(value);
}

function childRefFor(_parentRef, path) {
  let parentRef = _parentRef;
  let type = parentRef[REFERENCE];
  let children = parentRef.children;
  let child;

  if (children === null) {
    children = parentRef.children = new Map();
  } else {
    child = children.get(path);

    if (child !== undefined) {
      return child;
    }
  }

  if (type === 2
  /* Unbound */
  ) {
      let parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        child = createUnboundRef(parent[path], _env.DEBUG && `${parentRef.debugLabel}.${path}`);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
    child = createComputeRef(() => {
      let parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        return (0, _globalContext.getProp)(parent, path);
      }
    }, val => {
      let parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        return (0, _globalContext.setProp)(parent, path, val);
      }
    });

    if (_env.DEBUG) {
      child.debugLabel = `${parentRef.debugLabel}.${path}`;
    }
  }

  children.set(path, child);
  return child;
}

function childRefFromParts(root, parts) {
  let reference = root;

  for (let i = 0; i < parts.length; i++) {
    reference = childRefFor(reference, parts[i]);
  }

  return reference;
}

let createDebugAliasRef;
exports.createDebugAliasRef = createDebugAliasRef;

if (_env.DEBUG) {
  exports.createDebugAliasRef = createDebugAliasRef = (debugLabel, inner) => {
    let update = isUpdatableRef(inner) ? value => updateRef(inner, value) : null;
    let ref = createComputeRef(() => valueForRef(inner), update);
    ref[REFERENCE] = inner[REFERENCE];
    ref.debugLabel = debugLabel;
    return ref;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,