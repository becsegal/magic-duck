"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPrimitiveRef = createPrimitiveRef;
exports.createConstRef = createConstRef;
exports.createUnboundRef = createUnboundRef;
exports.createComputeRef = createComputeRef;
exports.createReadOnlyRef = createReadOnlyRef;
exports.isInvokableRef = isInvokableRef;
exports.createInvokableRef = createInvokableRef;
exports.isConstRef = isConstRef;
exports.isUpdatableRef = isUpdatableRef;
exports.valueForRef = valueForRef;
exports.updateRef = updateRef;
exports.childRefFor = childRefFor;
exports.childRefFromParts = childRefFromParts;
exports.createDebugAliasRef = exports.FALSE_REFERENCE = exports.TRUE_REFERENCE = exports.NULL_REFERENCE = exports.UNDEFINED_REFERENCE = exports.REFERENCE = void 0;

var _env = require("@glimmer/env");

var _globalContext = require("@glimmer/global-context");

var _util = require("@glimmer/util");

var _validator = require("@glimmer/validator");

var REFERENCE = (0, _util.symbol)('REFERENCE');
exports.REFERENCE = REFERENCE;

var ReferenceImpl = function ReferenceImpl(type) {
  this.tag = null;
  this.lastRevision = _validator.INITIAL;
  this.children = null;
  this.compute = null;
  this.update = null;
  this[REFERENCE] = type;
};

function createPrimitiveRef(value) {
  var ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.tag = _validator.CONSTANT_TAG;
  ref.lastValue = value;

  if (_env.DEBUG) {
    ref.debugLabel = String(value);
  }

  return ref;
}

var UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
var NULL_REFERENCE = createPrimitiveRef(null);
exports.NULL_REFERENCE = NULL_REFERENCE;
var TRUE_REFERENCE = createPrimitiveRef(true);
exports.TRUE_REFERENCE = TRUE_REFERENCE;
var FALSE_REFERENCE = createPrimitiveRef(false);
exports.FALSE_REFERENCE = FALSE_REFERENCE;

function createConstRef(value, debugLabel) {
  var ref = new ReferenceImpl(0
  /* Constant */
  );
  ref.lastValue = value;
  ref.tag = _validator.CONSTANT_TAG;

  if (_env.DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}

function createUnboundRef(value, debugLabel) {
  var ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.lastValue = value;
  ref.tag = _validator.CONSTANT_TAG;

  if (_env.DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}

function createComputeRef(compute, update, debugLabel) {
  if (update === void 0) {
    update = null;
  }

  if (debugLabel === void 0) {
    debugLabel = 'unknown';
  }

  var ref = new ReferenceImpl(1
  /* Compute */
  );
  ref.compute = compute;
  ref.update = update;

  if (_env.DEBUG) {
    ref.debugLabel = "(result of a `" + debugLabel + "` helper)";
  }

  return ref;
}

function createReadOnlyRef(ref) {
  if (!isUpdatableRef(ref)) return ref;
  return createComputeRef(function () {
    return valueForRef(ref);
  }, null, ref.debugLabel);
}

function isInvokableRef(ref) {
  return ref[REFERENCE] === 3
  /* Invokable */
  ;
}

function createInvokableRef(inner) {
  var ref = createComputeRef(function () {
    return valueForRef(inner);
  }, function (value) {
    return updateRef(inner, value);
  });
  ref.debugLabel = inner.debugLabel;
  ref[REFERENCE] = 3
  /* Invokable */
  ;
  return ref;
}

function isConstRef(_ref) {
  var ref = _ref;
  return ref.tag === _validator.CONSTANT_TAG;
}

function isUpdatableRef(_ref) {
  var ref = _ref;
  return ref.update !== null;
}

function valueForRef(_ref) {
  var ref = _ref;
  var tag = ref.tag;

  if (tag === _validator.CONSTANT_TAG) {
    return ref.lastValue;
  }

  var lastRevision = ref.lastRevision;
  var lastValue;

  if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
    var compute = ref.compute;
    tag = ref.tag = (0, _validator.track)(function () {
      lastValue = ref.lastValue = compute();
    }, _env.DEBUG && ref.debugLabel);
    ref.lastRevision = (0, _validator.valueForTag)(tag);
  } else {
    lastValue = ref.lastValue;
  }

  (0, _validator.consumeTag)(tag);
  return lastValue;
}

function updateRef(_ref, value) {
  var ref = _ref;
  var update = ref.update;
  update(value);
}

function childRefFor(_parentRef, path) {
  var parentRef = _parentRef;
  var type = parentRef[REFERENCE];
  var children = parentRef.children;
  var child;

  if (children === null) {
    children = parentRef.children = new Map();
  } else {
    child = children.get(path);

    if (child !== undefined) {
      return child;
    }
  }

  if (type === 2
  /* Unbound */
  ) {
      var parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        child = createUnboundRef(parent[path], _env.DEBUG && parentRef.debugLabel + "." + path);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
    child = createComputeRef(function () {
      var parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        return (0, _globalContext.getProp)(parent, path);
      }
    }, function (val) {
      var parent = valueForRef(parentRef);

      if ((0, _util.isDict)(parent)) {
        return (0, _globalContext.setProp)(parent, path, val);
      }
    });

    if (_env.DEBUG) {
      child.debugLabel = parentRef.debugLabel + "." + path;
    }
  }

  children.set(path, child);
  return child;
}

function childRefFromParts(root, parts) {
  var reference = root;

  for (var i = 0; i < parts.length; i++) {
    reference = childRefFor(reference, parts[i]);
  }

  return reference;
}

var createDebugAliasRef;
exports.createDebugAliasRef = createDebugAliasRef;

if (_env.DEBUG) {
  exports.createDebugAliasRef = createDebugAliasRef = function createDebugAliasRef(debugLabel, inner) {
    var update = isUpdatableRef(inner) ? function (value) {
      return updateRef(inner, value);
    } : null;
    var ref = createComputeRef(function () {
      return valueForRef(inner);
    }, update);
    ref[REFERENCE] = inner[REFERENCE];
    ref.debugLabel = debugLabel;
    return ref;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,