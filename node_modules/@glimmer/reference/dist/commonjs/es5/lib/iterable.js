"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIteratorRef = createIteratorRef;
exports.createIteratorItemRef = createIteratorItemRef;

var _globalContext = require("@glimmer/global-context");

var _util = require("@glimmer/util");

var _env = require("@glimmer/env");

var _validator = require("@glimmer/validator");

var _reference = require("./reference");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var NULL_IDENTITY = {};

var KEY = function KEY(_, index) {
  return index;
};

var INDEX = function INDEX(_, index) {
  return String(index);
};

var IDENTITY = function IDENTITY(item) {
  if (item === null) {
    // Returning null as an identity will cause failures since the iterator
    // can't tell that it's actually supposed to be null
    return NULL_IDENTITY;
  }

  return item;
};

function keyForPath(path) {
  if (_env.DEBUG && path[0] === '@') {
    throw new Error("invalid keypath: '" + path + "', valid keys: @index, @identity, or a path");
  }

  return uniqueKeyFor(function (item) {
    return (0, _globalContext.getPath)(item, path);
  });
}

function makeKeyFor(key) {
  switch (key) {
    case '@key':
      return uniqueKeyFor(KEY);

    case '@index':
      return uniqueKeyFor(INDEX);

    case '@identity':
      return uniqueKeyFor(IDENTITY);

    default:
      return keyForPath(key);
  }
}

var WeakMapWithPrimitives = /*#__PURE__*/function () {
  function WeakMapWithPrimitives() {}

  var _proto = WeakMapWithPrimitives.prototype;

  _proto.set = function set(key, value) {
    if ((0, _util.isObject)(key)) {
      this.weakMap.set(key, value);
    } else {
      this.primitiveMap.set(key, value);
    }
  };

  _proto.get = function get(key) {
    if ((0, _util.isObject)(key)) {
      return this.weakMap.get(key);
    } else {
      return this.primitiveMap.get(key);
    }
  };

  _createClass(WeakMapWithPrimitives, [{
    key: "weakMap",
    get: function get() {
      if (this._weakMap === undefined) {
        this._weakMap = new WeakMap();
      }

      return this._weakMap;
    }
  }, {
    key: "primitiveMap",
    get: function get() {
      if (this._primitiveMap === undefined) {
        this._primitiveMap = new Map();
      }

      return this._primitiveMap;
    }
  }]);

  return WeakMapWithPrimitives;
}();

var IDENTITIES = new WeakMapWithPrimitives();

function identityForNthOccurence(value, count) {
  var identities = IDENTITIES.get(value);

  if (identities === undefined) {
    identities = [];
    IDENTITIES.set(value, identities);
  }

  var identity = identities[count];

  if (identity === undefined) {
    identity = {
      value: value,
      count: count
    };
    identities[count] = identity;
  }

  return identity;
}
/**
 * When iterating over a list, it's possible that an item with the same unique
 * key could be encountered twice:
 *
 * ```js
 * let arr = ['same', 'different', 'same', 'same'];
 * ```
 *
 * In general, we want to treat these items as _unique within the list_. To do
 * this, we track the occurences of every item as we iterate the list, and when
 * an item occurs more than once, we generate a new unique key just for that
 * item, and that occurence within the list. The next time we iterate the list,
 * and encounter an item for the nth time, we can get the _same_ key, and let
 * Glimmer know that it should reuse the DOM for the previous nth occurence.
 */


function uniqueKeyFor(keyFor) {
  var seen = new WeakMapWithPrimitives();
  return function (value, memo) {
    var key = keyFor(value, memo);
    var count = seen.get(key) || 0;
    seen.set(key, count + 1);

    if (count === 0) {
      return key;
    }

    return identityForNthOccurence(key, count);
  };
}

function createIteratorRef(listRef, key) {
  return (0, _reference.createComputeRef)(function () {
    var iterable = (0, _reference.valueForRef)(listRef);
    var keyFor = makeKeyFor(key);

    if (Array.isArray(iterable)) {
      return new ArrayIterator(iterable, keyFor);
    }

    var maybeIterator = (0, _globalContext.toIterator)(iterable);

    if (maybeIterator === null) {
      return new ArrayIterator(_util.EMPTY_ARRAY, function () {
        return null;
      });
    }

    return new IteratorWrapper(maybeIterator, keyFor);
  });
}

function createIteratorItemRef(_value) {
  var value = _value;
  var tag = (0, _validator.createTag)();
  return (0, _reference.createComputeRef)(function () {
    (0, _validator.consumeTag)(tag);
    return value;
  }, function (newValue) {
    if (value !== newValue) {
      value = newValue;
      (0, _validator.dirtyTag)(tag);
    }
  });
}

var IteratorWrapper = /*#__PURE__*/function () {
  function IteratorWrapper(inner, keyFor) {
    this.inner = inner;
    this.keyFor = keyFor;
  }

  var _proto2 = IteratorWrapper.prototype;

  _proto2.isEmpty = function isEmpty() {
    return this.inner.isEmpty();
  };

  _proto2.next = function next() {
    var nextValue = this.inner.next();

    if (nextValue !== null) {
      nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
    }

    return nextValue;
  };

  return IteratorWrapper;
}();

var ArrayIterator = /*#__PURE__*/function () {
  function ArrayIterator(iterator, keyFor) {
    this.iterator = iterator;
    this.keyFor = keyFor;
    this.pos = 0;

    if (iterator.length === 0) {
      this.current = {
        kind: 'empty'
      };
    } else {
      this.current = {
        kind: 'first',
        value: iterator[this.pos]
      };
    }
  }

  var _proto3 = ArrayIterator.prototype;

  _proto3.isEmpty = function isEmpty() {
    return this.current.kind === 'empty';
  };

  _proto3.next = function next() {
    var value;
    var current = this.current;

    if (current.kind === 'first') {
      this.current = {
        kind: 'progress'
      };
      value = current.value;
    } else if (this.pos >= this.iterator.length - 1) {
      return null;
    } else {
      value = this.iterator[++this.pos];
    }

    var keyFor = this.keyFor;
    var key = keyFor(value, this.pos);
    var memo = this.pos;
    return {
      key: key,
      value: value,
      memo: memo
    };
  };

  return ArrayIterator;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,