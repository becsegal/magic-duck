import { DEBUG } from '@glimmer/env';
import { getProp, setProp } from '@glimmer/global-context';
import { isDict, symbol } from '@glimmer/util';
import { CONSTANT_TAG, consumeTag, INITIAL, track, validateTag, valueForTag } from '@glimmer/validator';
export var REFERENCE = symbol('REFERENCE');

var ReferenceImpl = function ReferenceImpl(type) {
  this.tag = null;
  this.lastRevision = INITIAL;
  this.children = null;
  this.compute = null;
  this.update = null;
  this[REFERENCE] = type;
};

export function createPrimitiveRef(value) {
  var ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.tag = CONSTANT_TAG;
  ref.lastValue = value;

  if (DEBUG) {
    ref.debugLabel = String(value);
  }

  return ref;
}
export var UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
export var NULL_REFERENCE = createPrimitiveRef(null);
export var TRUE_REFERENCE = createPrimitiveRef(true);
export var FALSE_REFERENCE = createPrimitiveRef(false);
export function createConstRef(value, debugLabel) {
  var ref = new ReferenceImpl(0
  /* Constant */
  );
  ref.lastValue = value;
  ref.tag = CONSTANT_TAG;

  if (DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}
export function createUnboundRef(value, debugLabel) {
  var ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.lastValue = value;
  ref.tag = CONSTANT_TAG;

  if (DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}
export function createComputeRef(compute, update, debugLabel) {
  if (update === void 0) {
    update = null;
  }

  if (debugLabel === void 0) {
    debugLabel = 'unknown';
  }

  var ref = new ReferenceImpl(1
  /* Compute */
  );
  ref.compute = compute;
  ref.update = update;

  if (DEBUG) {
    ref.debugLabel = "(result of a `" + debugLabel + "` helper)";
  }

  return ref;
}
export function createReadOnlyRef(ref) {
  if (!isUpdatableRef(ref)) return ref;
  return createComputeRef(function () {
    return valueForRef(ref);
  }, null, ref.debugLabel);
}
export function isInvokableRef(ref) {
  return ref[REFERENCE] === 3
  /* Invokable */
  ;
}
export function createInvokableRef(inner) {
  var ref = createComputeRef(function () {
    return valueForRef(inner);
  }, function (value) {
    return updateRef(inner, value);
  });
  ref.debugLabel = inner.debugLabel;
  ref[REFERENCE] = 3
  /* Invokable */
  ;
  return ref;
}
export function isConstRef(_ref) {
  var ref = _ref;
  return ref.tag === CONSTANT_TAG;
}
export function isUpdatableRef(_ref) {
  var ref = _ref;
  return ref.update !== null;
}
export function valueForRef(_ref) {
  var ref = _ref;
  var tag = ref.tag;

  if (tag === CONSTANT_TAG) {
    return ref.lastValue;
  }

  var lastRevision = ref.lastRevision;
  var lastValue;

  if (tag === null || !validateTag(tag, lastRevision)) {
    var compute = ref.compute;
    tag = ref.tag = track(function () {
      lastValue = ref.lastValue = compute();
    }, DEBUG && ref.debugLabel);
    ref.lastRevision = valueForTag(tag);
  } else {
    lastValue = ref.lastValue;
  }

  consumeTag(tag);
  return lastValue;
}
export function updateRef(_ref, value) {
  var ref = _ref;
  var update = ref.update;
  update(value);
}
export function childRefFor(_parentRef, path) {
  var parentRef = _parentRef;
  var type = parentRef[REFERENCE];
  var children = parentRef.children;
  var child;

  if (children === null) {
    children = parentRef.children = new Map();
  } else {
    child = children.get(path);

    if (child !== undefined) {
      return child;
    }
  }

  if (type === 2
  /* Unbound */
  ) {
      var parent = valueForRef(parentRef);

      if (isDict(parent)) {
        child = createUnboundRef(parent[path], DEBUG && parentRef.debugLabel + "." + path);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
    child = createComputeRef(function () {
      var parent = valueForRef(parentRef);

      if (isDict(parent)) {
        return getProp(parent, path);
      }
    }, function (val) {
      var parent = valueForRef(parentRef);

      if (isDict(parent)) {
        return setProp(parent, path, val);
      }
    });

    if (DEBUG) {
      child.debugLabel = parentRef.debugLabel + "." + path;
    }
  }

  children.set(path, child);
  return child;
}
export function childRefFromParts(root, parts) {
  var reference = root;

  for (var i = 0; i < parts.length; i++) {
    reference = childRefFor(reference, parts[i]);
  }

  return reference;
}
export var createDebugAliasRef;

if (DEBUG) {
  createDebugAliasRef = function createDebugAliasRef(debugLabel, inner) {
    var update = isUpdatableRef(inner) ? function (value) {
      return updateRef(inner, value);
    } : null;
    var ref = createComputeRef(function () {
      return valueForRef(inner);
    }, update);
    ref[REFERENCE] = inner[REFERENCE];
    ref.debugLabel = debugLabel;
    return ref;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,