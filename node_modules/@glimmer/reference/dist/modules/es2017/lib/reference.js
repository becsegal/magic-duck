import { DEBUG } from '@glimmer/env';
import { getProp, setProp } from '@glimmer/global-context';
import { isDict, symbol } from '@glimmer/util';
import { CONSTANT_TAG, consumeTag, INITIAL, track, validateTag, valueForTag } from '@glimmer/validator';
export const REFERENCE = symbol('REFERENCE');

class ReferenceImpl {
  constructor(type) {
    this.tag = null;
    this.lastRevision = INITIAL;
    this.children = null;
    this.compute = null;
    this.update = null;
    this[REFERENCE] = type;
  }

}

export function createPrimitiveRef(value) {
  let ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.tag = CONSTANT_TAG;
  ref.lastValue = value;

  if (DEBUG) {
    ref.debugLabel = String(value);
  }

  return ref;
}
export const UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
export const NULL_REFERENCE = createPrimitiveRef(null);
export const TRUE_REFERENCE = createPrimitiveRef(true);
export const FALSE_REFERENCE = createPrimitiveRef(false);
export function createConstRef(value, debugLabel) {
  let ref = new ReferenceImpl(0
  /* Constant */
  );
  ref.lastValue = value;
  ref.tag = CONSTANT_TAG;

  if (DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}
export function createUnboundRef(value, debugLabel) {
  let ref = new ReferenceImpl(2
  /* Unbound */
  );
  ref.lastValue = value;
  ref.tag = CONSTANT_TAG;

  if (DEBUG) {
    ref.debugLabel = debugLabel;
  }

  return ref;
}
export function createComputeRef(compute, update = null, debugLabel = 'unknown') {
  let ref = new ReferenceImpl(1
  /* Compute */
  );
  ref.compute = compute;
  ref.update = update;

  if (DEBUG) {
    ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
  }

  return ref;
}
export function createReadOnlyRef(ref) {
  if (!isUpdatableRef(ref)) return ref;
  return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
}
export function isInvokableRef(ref) {
  return ref[REFERENCE] === 3
  /* Invokable */
  ;
}
export function createInvokableRef(inner) {
  let ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
  ref.debugLabel = inner.debugLabel;
  ref[REFERENCE] = 3
  /* Invokable */
  ;
  return ref;
}
export function isConstRef(_ref) {
  let ref = _ref;
  return ref.tag === CONSTANT_TAG;
}
export function isUpdatableRef(_ref) {
  let ref = _ref;
  return ref.update !== null;
}
export function valueForRef(_ref) {
  let ref = _ref;
  let {
    tag
  } = ref;

  if (tag === CONSTANT_TAG) {
    return ref.lastValue;
  }

  let {
    lastRevision
  } = ref;
  let lastValue;

  if (tag === null || !validateTag(tag, lastRevision)) {
    let {
      compute
    } = ref;
    tag = ref.tag = track(() => {
      lastValue = ref.lastValue = compute();
    }, DEBUG && ref.debugLabel);
    ref.lastRevision = valueForTag(tag);
  } else {
    lastValue = ref.lastValue;
  }

  consumeTag(tag);
  return lastValue;
}
export function updateRef(_ref, value) {
  let ref = _ref;
  let update = ref.update;
  update(value);
}
export function childRefFor(_parentRef, path) {
  let parentRef = _parentRef;
  let type = parentRef[REFERENCE];
  let children = parentRef.children;
  let child;

  if (children === null) {
    children = parentRef.children = new Map();
  } else {
    child = children.get(path);

    if (child !== undefined) {
      return child;
    }
  }

  if (type === 2
  /* Unbound */
  ) {
      let parent = valueForRef(parentRef);

      if (isDict(parent)) {
        child = createUnboundRef(parent[path], DEBUG && `${parentRef.debugLabel}.${path}`);
      } else {
        child = UNDEFINED_REFERENCE;
      }
    } else {
    child = createComputeRef(() => {
      let parent = valueForRef(parentRef);

      if (isDict(parent)) {
        return getProp(parent, path);
      }
    }, val => {
      let parent = valueForRef(parentRef);

      if (isDict(parent)) {
        return setProp(parent, path, val);
      }
    });

    if (DEBUG) {
      child.debugLabel = `${parentRef.debugLabel}.${path}`;
    }
  }

  children.set(path, child);
  return child;
}
export function childRefFromParts(root, parts) {
  let reference = root;

  for (let i = 0; i < parts.length; i++) {
    reference = childRefFor(reference, parts[i]);
  }

  return reference;
}
export let createDebugAliasRef;

if (DEBUG) {
  createDebugAliasRef = (debugLabel, inner) => {
    let update = isUpdatableRef(inner) ? value => updateRef(inner, value) : null;
    let ref = createComputeRef(() => valueForRef(inner), update);
    ref[REFERENCE] = inner[REFERENCE];
    ref.debugLabel = debugLabel;
    return ref;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,