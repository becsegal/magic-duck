import { symbolFor, getGlobal } from './lib/utils';
const GLIMMER_VALIDATOR_REGISTRATION = symbolFor('GLIMMER_VALIDATOR_REGISTRATION');
const globalObj = getGlobal();

if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
  throw new Error('The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.');
}

globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
export { ALLOW_CYCLES, bump, combine, COMPUTE, CONSTANT_TAG, CONSTANT, createTag, createUpdatableTag, CurrentTag, CURRENT_TAG, DIRTY_TAG as dirtyTag, INITIAL, isConstTag, UPDATE_TAG as updateTag, validateTag, valueForTag, VolatileTag, VOLATILE_TAG, VOLATILE } from './lib/validators';
export { dirtyTagFor, tagFor, tagMetaFor } from './lib/meta';
export { beginTrackFrame, endTrackFrame, beginUntrackFrame, endUntrackFrame, resetTracking, consumeTag, isTracking, track, untrack, createCache, isConst, getValue } from './lib/tracking';
export { trackedData } from './lib/tracked-data';
export { logTrackingStack, setTrackingTransactionEnv, runInTrackingTransaction, beginTrackingTransaction, endTrackingTransaction } from './lib/debug';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFNBQVQsRUFBb0IsU0FBcEIsUUFBcUMsYUFBckM7QUFFQSxNQUFNLDhCQUE4QixHQUFHLFNBQVMsQ0FBQyxnQ0FBRCxDQUFoRDtBQUVBLE1BQU0sU0FBUyxHQUFHLFNBQVMsRUFBM0I7O0FBRUEsSUFBSSxTQUFTLENBQUMsOEJBQUQsQ0FBVCxLQUE4QyxJQUFsRCxFQUF3RDtBQUN0RCxRQUFNLElBQUksS0FBSixDQUNKLHNaQURJLENBQU47QUFHRDs7QUFFRCxTQUFTLENBQUMsOEJBQUQsQ0FBVCxHQUE0QyxJQUE1QztBQUVBLFNBQ0UsWUFERixFQUVFLElBRkYsRUFJRSxPQUpGLEVBS0UsT0FMRixFQU1FLFlBTkYsRUFPRSxRQVBGLEVBU0UsU0FURixFQVVFLGtCQVZGLEVBV0UsVUFYRixFQVlFLFdBWkYsRUFhRSxTQUFTLElBQUksUUFiZixFQWdCRSxPQWhCRixFQWlCRSxVQWpCRixFQXFCRSxVQUFVLElBQUksU0FyQmhCLEVBc0JFLFdBdEJGLEVBdUJFLFdBdkJGLEVBd0JFLFdBeEJGLEVBeUJFLFlBekJGLEVBMEJFLFFBMUJGLFFBMkJPLGtCQTNCUDtBQTZCQSxTQUFTLFdBQVQsRUFBc0IsTUFBdEIsRUFBOEIsVUFBOUIsUUFBeUQsWUFBekQ7QUFFQSxTQUNFLGVBREYsRUFFRSxhQUZGLEVBR0UsaUJBSEYsRUFJRSxlQUpGLEVBS0UsYUFMRixFQU1FLFVBTkYsRUFPRSxVQVBGLEVBUUUsS0FSRixFQVNFLE9BVEYsRUFXRSxXQVhGLEVBWUUsT0FaRixFQWFFLFFBYkYsUUFjTyxnQkFkUDtBQWdCQSxTQUFTLFdBQVQsUUFBNEIsb0JBQTVCO0FBRUEsU0FDRSxnQkFERixFQUVFLHlCQUZGLEVBR0Usd0JBSEYsRUFJRSx3QkFKRixFQUtFLHNCQUxGLFFBTU8sYUFOUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN5bWJvbEZvciwgZ2V0R2xvYmFsIH0gZnJvbSAnLi9saWIvdXRpbHMnO1xuXG5jb25zdCBHTElNTUVSX1ZBTElEQVRPUl9SRUdJU1RSQVRJT04gPSBzeW1ib2xGb3IoJ0dMSU1NRVJfVkFMSURBVE9SX1JFR0lTVFJBVElPTicpO1xuXG5jb25zdCBnbG9iYWxPYmogPSBnZXRHbG9iYWwoKTtcblxuaWYgKGdsb2JhbE9ialtHTElNTUVSX1ZBTElEQVRPUl9SRUdJU1RSQVRJT05dID09PSB0cnVlKSB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAnVGhlIGBAZ2xpbW1lci92YWxpZGF0b3JgIGxpYnJhcnkgaGFzIGJlZW4gaW5jbHVkZWQgdHdpY2UgaW4gdGhpcyBhcHBsaWNhdGlvbi4gSXQgY291bGQgYmUgZGlmZmVyZW50IHZlcnNpb25zIG9mIHRoZSBwYWNrYWdlLCBvciB0aGUgc2FtZSB2ZXJzaW9uIGluY2x1ZGVkIHR3aWNlIGJ5IG1pc3Rha2UuIGBAZ2xpbW1lci92YWxpZGF0b3JgIGRlcGVuZHMgb24gaGF2aW5nIGEgc2luZ2xlIGNvcHkgb2YgdGhlIHBhY2thZ2UgaW4gdXNlIGF0IGFueSB0aW1lIGluIGFuIGFwcGxpY2F0aW9uLCBldmVuIGlmIHRoZXkgYXJlIHRoZSBzYW1lIHZlcnNpb24uIFlvdSBtdXN0IGRlZHVwZSB5b3VyIGJ1aWxkIHRvIHJlbW92ZSB0aGUgZHVwbGljYXRlIHBhY2thZ2VzIGluIG9yZGVyIHRvIHByZXZlbnQgdGhpcyBlcnJvci4nXG4gICk7XG59XG5cbmdsb2JhbE9ialtHTElNTUVSX1ZBTElEQVRPUl9SRUdJU1RSQVRJT05dID0gdHJ1ZTtcblxuZXhwb3J0IHtcbiAgQUxMT1dfQ1lDTEVTLFxuICBidW1wLFxuICBDb21iaW5hdG9yVGFnLFxuICBjb21iaW5lLFxuICBDT01QVVRFLFxuICBDT05TVEFOVF9UQUcsXG4gIENPTlNUQU5ULFxuICBDb25zdGFudFRhZyxcbiAgY3JlYXRlVGFnLFxuICBjcmVhdGVVcGRhdGFibGVUYWcsXG4gIEN1cnJlbnRUYWcsXG4gIENVUlJFTlRfVEFHLFxuICBESVJUWV9UQUcgYXMgZGlydHlUYWcsXG4gIERpcnR5YWJsZVRhZyxcbiAgRW50aXR5VGFnLFxuICBJTklUSUFMLFxuICBpc0NvbnN0VGFnLFxuICBSZXZpc2lvbixcbiAgVGFnLFxuICBVcGRhdGFibGVUYWcsXG4gIFVQREFURV9UQUcgYXMgdXBkYXRlVGFnLFxuICB2YWxpZGF0ZVRhZyxcbiAgdmFsdWVGb3JUYWcsXG4gIFZvbGF0aWxlVGFnLFxuICBWT0xBVElMRV9UQUcsXG4gIFZPTEFUSUxFLFxufSBmcm9tICcuL2xpYi92YWxpZGF0b3JzJztcblxuZXhwb3J0IHsgZGlydHlUYWdGb3IsIHRhZ0ZvciwgdGFnTWV0YUZvciwgVGFnTWV0YSB9IGZyb20gJy4vbGliL21ldGEnO1xuXG5leHBvcnQge1xuICBiZWdpblRyYWNrRnJhbWUsXG4gIGVuZFRyYWNrRnJhbWUsXG4gIGJlZ2luVW50cmFja0ZyYW1lLFxuICBlbmRVbnRyYWNrRnJhbWUsXG4gIHJlc2V0VHJhY2tpbmcsXG4gIGNvbnN1bWVUYWcsXG4gIGlzVHJhY2tpbmcsXG4gIHRyYWNrLFxuICB1bnRyYWNrLFxuICBDYWNoZSxcbiAgY3JlYXRlQ2FjaGUsXG4gIGlzQ29uc3QsXG4gIGdldFZhbHVlLFxufSBmcm9tICcuL2xpYi90cmFja2luZyc7XG5cbmV4cG9ydCB7IHRyYWNrZWREYXRhIH0gZnJvbSAnLi9saWIvdHJhY2tlZC1kYXRhJztcblxuZXhwb3J0IHtcbiAgbG9nVHJhY2tpbmdTdGFjayxcbiAgc2V0VHJhY2tpbmdUcmFuc2FjdGlvbkVudixcbiAgcnVuSW5UcmFja2luZ1RyYW5zYWN0aW9uLFxuICBiZWdpblRyYWNraW5nVHJhbnNhY3Rpb24sXG4gIGVuZFRyYWNraW5nVHJhbnNhY3Rpb24sXG59IGZyb20gJy4vbGliL2RlYnVnJztcbiJdLCJzb3VyY2VSb290IjoiIn0=