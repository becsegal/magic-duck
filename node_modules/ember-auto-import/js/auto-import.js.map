{"version":3,"file":"auto-import.js","sourceRoot":"","sources":["../ts/auto-import.ts"],"names":[],"mappings":"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","sourcesContent":["import Splitter from './splitter';\nimport { Bundler, debugBundler } from './bundler';\nimport Analyzer from './analyzer';\nimport type { TreeType } from './analyzer';\nimport Package from './package';\nimport { buildDebugCallback } from 'broccoli-debug';\nimport BundleConfig from './bundle-config';\nimport type { Node } from 'broccoli-node-api';\nimport { LeaderChooser } from './leader';\nimport {\n  AddonInstance,\n  AppInstance,\n  findTopmostAddon,\n  isDeepAddonInstance,\n} from '@embroider/shared-internals';\nimport WebpackBundler from './webpack';\nimport { Memoize } from 'typescript-memoize';\nimport { WatchedDir } from 'broccoli-source';\nimport { Inserter } from './inserter';\nimport mergeTrees from 'broccoli-merge-trees';\nimport resolve from 'resolve';\nimport type webpackType from 'webpack';\nimport resolvePackagePath from 'resolve-package-path';\nimport semver from 'semver';\nimport type { TransformOptions } from '@babel/core';\nimport { MARKER } from './analyzer-syntax';\n\nconst debugTree = buildDebugCallback('ember-auto-import');\n\n// This interface must be stable across all versions of ember-auto-import that\n// speak the same leader-election protocol. So don't change this unless you know\n// what you're doing.\nexport interface AutoImportSharedAPI {\n  isPrimary(addonInstance: AddonInstance): boolean;\n  analyze(\n    tree: Node,\n    addon: AddonInstance,\n    treeType?: TreeType,\n    supportsFastAnalyzer?: true\n  ): Node;\n  included(addonInstance: AddonInstance): void;\n  addTo(tree: Node): Node;\n  registerV2Addon(packageName: string, packageRoot: string): void;\n}\n\nexport default class AutoImport implements AutoImportSharedAPI {\n  private packages: Set<Package> = new Set();\n  private env: 'development' | 'test' | 'production';\n  private consoleWrite: (msg: string) => void;\n  private analyzers: Map<Analyzer, Package> = new Map();\n  private bundles: BundleConfig;\n\n  // maps packageName to packageRoot\n  private v2Addons = new Map<string, string>();\n\n  static register(addon: AddonInstance) {\n    LeaderChooser.for(addon).register(addon, () => new AutoImport(addon));\n  }\n\n  static lookup(addon: AddonInstance): AutoImportSharedAPI {\n    return LeaderChooser.for(addon).leader;\n  }\n\n  constructor(addonInstance: AddonInstance) {\n    let topmostAddon = findTopmostAddon(addonInstance);\n    this.packages.add(Package.lookupParentOf(topmostAddon));\n    let host = topmostAddon.app;\n    this.env = host.env;\n    this.bundles = new BundleConfig(host.options.outputPaths);\n    if (!this.env) {\n      throw new Error('Bug in ember-auto-import: did not discover environment');\n    }\n\n    this.consoleWrite = (...args) => addonInstance.project.ui.write(...args);\n  }\n\n  // we don't actually call this ourselves anymore, but earlier versions of\n  // ember-auto-import will still call it on us. For them the answer is always\n  // false.\n  isPrimary(_addon: AddonInstance) {\n    return false;\n  }\n\n  analyze(\n    tree: Node,\n    addon: AddonInstance,\n    treeType?: TreeType,\n    supportsFastAnalyzer?: true\n  ) {\n    let pack = Package.lookupParentOf(addon);\n    this.packages.add(pack);\n    let analyzer = new Analyzer(\n      debugTree(tree, `preprocessor:input-${this.analyzers.size}`),\n      pack,\n      treeType,\n      supportsFastAnalyzer\n    );\n    this.analyzers.set(analyzer, pack);\n    return analyzer;\n  }\n\n  registerV2Addon(packageName: string, packageRoot: string): void {\n    this.v2Addons.set(packageName, packageRoot);\n  }\n\n  private makeBundler(allAppTree: Node): Bundler {\n    // this is a concession to compatibility with ember-cli's treeForApp\n    // merging. Addons are allowed to inject modules into the app, and it's\n    // extremely common that those modules want to import from the addons\n    // themselves, even though this jumps arbitrarily many levels in the\n    // dependency graph.\n    //\n    // Since we handle v2 addons, we need to make sure all v2 addons function as\n    // \"dependencies\" of the app even though they're not really.\n    this.rootPackage.magicDeps = this.v2Addons;\n\n    // The Splitter takes the set of imports from the Analyzer and\n    // decides which ones to include in which bundles\n    let splitter = new Splitter({\n      analyzers: this.analyzers,\n      bundles: this.bundles,\n    });\n\n    let webpack: typeof webpackType;\n    const pkg = resolvePackagePath('webpack', this.rootPackage.root);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    if (pkg && semver.satisfies(require(pkg).version, '^5.0.0')) {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      webpack = require(resolve.sync('webpack', {\n        basedir: this.rootPackage.root,\n      })) as typeof webpackType;\n    } else {\n      throw new Error(\n        `[ember-auto-import] this version of ember-auto-import requires the app to have a dependency on webpack 5`\n      );\n    }\n\n    // The Bundler asks the splitter for deps it should include and\n    // is responsible for packaging those deps up.\n    return new WebpackBundler(depsFor(allAppTree, this.packages), {\n      splitter,\n      environment: this.env,\n      packages: this.packages,\n      appRoot: this.rootPackage.root,\n      consoleWrite: this.consoleWrite,\n      bundles: this.bundles,\n      babelConfig: this.rootPackage.cleanBabelConfig(),\n      browserslist: this.rootPackage.browserslist(),\n      publicAssetURL: this.rootPackage.publicAssetURL(),\n      webpack,\n      hasFastboot: this.rootPackage.isFastBootEnabled,\n    });\n  }\n\n  @Memoize()\n  private get rootPackage(): Package {\n    let rootPackage = [...this.packages.values()].find((pkg) => !pkg.isAddon);\n    if (!rootPackage) {\n      throw new Error(\n        `bug in ember-auto-import, there should always be a Package representing the app`\n      );\n    }\n    return rootPackage;\n  }\n\n  addTo(allAppTree: Node): Node {\n    let bundler = debugBundler(this.makeBundler(allAppTree), 'output');\n    let inserter = new Inserter(allAppTree, bundler, this.bundles, {\n      publicAssetURL: this.rootPackage.publicAssetURL(),\n      insertScriptsAt: this.rootPackage.insertScriptsAt,\n      insertStylesAt: this.rootPackage.insertStylesAt,\n    });\n    let trees = [allAppTree, bundler, inserter];\n    return mergeTrees(trees, { overwrite: true });\n  }\n\n  // CAUTION: versions <= 2.1.0 only invoked this method on the app's copy of\n  // ember-auto-import, whereas we now invoke it on every copy. That means you\n  // can't guarantee this will be called for an addon that is using one of those\n  // older versions.\n  included(addonInstance: AddonInstance) {\n    this.installBabelPlugin(addonInstance);\n    if (!isDeepAddonInstance(addonInstance)) {\n      this.configureFingerprints(addonInstance.app);\n    }\n  }\n\n  private installBabelPlugin(addonInstance: AddonInstance): void {\n    let parent: AppInstance | AddonInstance;\n    if (isDeepAddonInstance(addonInstance)) {\n      parent = addonInstance.parent;\n    } else {\n      parent = addonInstance.app;\n    }\n\n    let babelOptions: TransformOptions = (parent.options.babel =\n      parent.options.babel || {});\n    let babelPlugins = (babelOptions.plugins = babelOptions.plugins || []);\n    if (!babelPlugins.some(isAnalyzerPlugin)) {\n      // the MARKER is included so that babel caches will invalidate if the\n      // MARKER changes\n      babelPlugins.unshift([require.resolve('./analyzer-plugin'), { MARKER }]);\n    }\n  }\n\n  // We need to disable fingerprinting of chunks, because (1) they already\n  // have their own webpack-generated hashes and (2) the runtime loader code\n  // can't easily be told about broccoli-asset-rev's hashes.\n  private configureFingerprints(host: AppInstance) {\n    let patterns = ['assets/chunk.*.js', 'assets/chunk.*.css'];\n    if (!host.options.fingerprint) {\n      host.options.fingerprint = {};\n    }\n    if (!('exclude' in host.options.fingerprint)) {\n      host.options.fingerprint.exclude = patterns;\n    } else {\n      for (let pattern of patterns) {\n        host.options.fingerprint.exclude.push(pattern);\n      }\n    }\n  }\n}\n\nfunction depsFor(allAppTree: Node, packages: Set<Package>) {\n  let deps = [allAppTree];\n  for (let pkg of packages) {\n    let watched = pkg.watchedDirectories;\n    if (watched) {\n      deps = deps.concat(watched.map((dir) => new WatchedDir(dir)));\n    }\n  }\n  return deps;\n}\n\nfunction isAnalyzerPlugin(entry: unknown) {\n  const suffix = 'ember-auto-import/js/analyzer-plugin.js';\n  return (\n    (typeof entry === 'string' && entry.endsWith(suffix)) ||\n    (Array.isArray(entry) &&\n      typeof entry[0] === 'string' &&\n      entry[0].endsWith(suffix))\n  );\n}\n"]}