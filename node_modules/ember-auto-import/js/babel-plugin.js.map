{"version":3,"file":"babel-plugin.js","sourceRoot":"","sources":["../ts/babel-plugin.ts"],"names":[],"mappings":";;;;AAAA,aAAa;AACb,4GAAwD;AAGxD,wDAAgC;AAEhC,SAAS,eAAe,CAAC,KAAmB;IAC1C,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;IACpB,OAAO;QACL,QAAQ,EAAE,4CAAM;QAChB,OAAO,EAAE;YACP,MAAM,CAAC,IAAwB;gBAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,UAAwC,CAAC;gBACzD,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe,EAAE;oBAChC,IAAI,GAAG,GAAG,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACxC,IAAI,GAAG,KAAK,KAAK,EAAE;wBACjB,IAAI,CAAC,WAAW,CACd,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAChE,CAAC;qBACH;iBACF;qBAAM,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE;oBACzC,IAAI,GAAG,GAAG,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAO,EAAE,IAAI,CAAC,CAAC;oBAChE,IAAI,GAAG,KAAK,KAAK,EAAE;wBACjB,IAAI,CAAC,WAAW,CACd,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE;4BACvD,CAAC,CAAC,aAAa,CACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CACnD;4BACD,GAAI,GAAG,CAAC,WAA8B;yBACvC,CAAC,CACH,CAAC;qBACH;iBACF;YACH,CAAC;YACD,cAAc,CAAC,IAAgC;gBAC7C,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAEhC,IACE,MAAM,CAAC,YAAY,EAAE;oBACrB,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,YAAY,CAAC,EAC1D;oBACA,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACjC,IAAI,GAAG,CAAC,IAAI,KAAK,eAAe,EAAE;wBAChC,IAAI,GAAG,GAAG,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBACxC,IAAI,GAAG,KAAK,KAAK,EAAE;4BACjB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;yBAC5D;wBACD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;qBAC7C;yBAAM,IAAI,GAAG,CAAC,IAAI,KAAK,iBAAiB,EAAE;wBACzC,IAAI,GAAG,GAAG,iBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAO,EAAE,IAAI,CAAC,CAAC;wBAChE,IAAI,GAAG,KAAK,KAAK,EAAE;4BACjB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;yBAC5D;wBACD,IAAI,CAAC,WAAW,CACd,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,qBAAqB,CAAC,EAAE;4BACpD,CAAC,CAAC,aAAa,CACb,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CACnD;4BACD,GAAI,GAAG,CAAC,WAA8B;yBACvC,CAAC,CACH,CAAC;qBACH;iBACF;YACH,CAAC;SACF;KACF,CAAC;AACJ,CAAC;AAED,eAAe,CAAC,OAAO,GAAG;IACxB,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,iBAAS,eAAe,CAAC","sourcesContent":["// @ts-ignore\nimport syntax from 'babel-plugin-syntax-dynamic-import';\nimport type * as Babel from '@babel/core';\nimport type { types as t, NodePath } from '@babel/core';\nimport Package from './package';\n\nfunction emberAutoImport(babel: typeof Babel) {\n  let t = babel.types;\n  return {\n    inherits: syntax,\n    visitor: {\n      Import(path: NodePath<t.Import>) {\n        let call = path.parentPath as NodePath<t.CallExpression>;\n        let arg = call.node.arguments[0];\n        if (arg.type === 'StringLiteral') {\n          let cat = Package.categorize(arg.value);\n          if (cat === 'dep') {\n            call.replaceWith(\n              t.callExpression(t.identifier('emberAutoImportDynamic'), [arg])\n            );\n          }\n        } else if (arg.type === 'TemplateLiteral') {\n          let cat = Package.categorize(arg.quasis[0].value.cooked!, true);\n          if (cat === 'dep') {\n            call.replaceWith(\n              t.callExpression(t.identifier('emberAutoImportDynamic'), [\n                t.stringLiteral(\n                  arg.quasis.map((q) => q.value.cooked).join('${e}')\n                ),\n                ...(arg.expressions as t.Expression[]),\n              ])\n            );\n          }\n        }\n      },\n      CallExpression(path: NodePath<t.CallExpression>) {\n        let callee = path.get('callee');\n\n        if (\n          callee.isIdentifier() &&\n          callee.referencesImport('@embroider/macros', 'importSync')\n        ) {\n          let arg = path.node.arguments[0];\n          if (arg.type === 'StringLiteral') {\n            let cat = Package.categorize(arg.value);\n            if (cat === 'url') {\n              throw new Error('You cannot use importSync() with a URL.');\n            }\n            callee.replaceWith(t.identifier('require'));\n          } else if (arg.type === 'TemplateLiteral') {\n            let cat = Package.categorize(arg.quasis[0].value.cooked!, true);\n            if (cat === 'url') {\n              throw new Error('You cannot use importSync() with a URL.');\n            }\n            path.replaceWith(\n              t.callExpression(t.identifier('emberAutoImportSync'), [\n                t.stringLiteral(\n                  arg.quasis.map((q) => q.value.cooked).join('${e}')\n                ),\n                ...(arg.expressions as t.Expression[]),\n              ])\n            );\n          }\n        }\n      },\n    },\n  };\n}\n\nemberAutoImport.baseDir = function () {\n  return __dirname;\n};\n\nexport = emberAutoImport;\n"]}