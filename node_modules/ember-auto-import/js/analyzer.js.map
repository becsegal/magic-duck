{"version":3,"file":"analyzer.js","sourceRoot":"","sources":["../ts/analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Node } from 'broccoli-node-api';\nimport { Funnel } from 'broccoli-funnel';\nimport walkSync from 'walk-sync';\nimport { createReadStream, readFileSync } from 'fs';\nimport FSTree from 'fs-tree-diff';\nimport makeDebug from 'debug';\nimport { join, extname } from 'path';\nimport { isEqual, flatten } from 'lodash';\nimport type Package from './package';\nimport {\n  deserialize,\n  ImportSyntax,\n  LiteralImportSyntax,\n  TemplateImportSyntax,\n} from './analyzer-syntax';\nimport { Memoize } from 'typescript-memoize';\n\nmakeDebug.formatters.m = (modules: Import[]) => {\n  return JSON.stringify(\n    modules.map((m) => {\n      if ('specifier' in m) {\n        return {\n          specifier: m.specifier,\n          path: m.path,\n          isDynamic: m.isDynamic,\n          package: m.package.name,\n          treeType: m.treeType,\n        };\n      } else {\n        return {\n          cookedQuasis: m.cookedQuasis,\n          expressionNameHints: m.expressionNameHints,\n          path: m.path,\n          isDynamic: m.isDynamic,\n          package: m.package.name,\n          treeType: m.treeType,\n        };\n      }\n    }),\n    null,\n    2\n  );\n};\n\nconst debug = makeDebug('ember-auto-import:analyzer');\n\nexport type TreeType =\n  | 'app'\n  | 'addon'\n  | 'addon-templates'\n  | 'addon-test-support'\n  | 'styles'\n  | 'templates'\n  | 'test';\n\ninterface PackageContext {\n  path: string;\n  package: Package;\n  treeType: TreeType | undefined;\n}\n\nexport type LiteralImport = LiteralImportSyntax & PackageContext;\nexport type TemplateImport = TemplateImportSyntax & PackageContext;\nexport type Import = LiteralImport | TemplateImport;\n\n/*\n  Analyzer discovers and maintains info on all the module imports that\n  appear in a broccoli tree.\n*/\nexport default class Analyzer extends Funnel {\n  private previousTree = new FSTree();\n  private modules: Import[] | null = [];\n  private paths: Map<string, Import[]> = new Map();\n\n  constructor(\n    inputTree: Node,\n    private pack: Package,\n    private treeType: TreeType | undefined,\n    private supportsFastAnalyzer: true | undefined\n  ) {\n    super(inputTree, {\n      annotation: 'ember-auto-import-analyzer',\n    });\n  }\n\n  get imports(): Import[] {\n    if (!this.modules) {\n      this.modules = flatten([...this.paths.values()]);\n      debug('imports %m', this.modules);\n    }\n    return this.modules;\n  }\n\n  async build(...args: unknown[]) {\n    await super.build(...args);\n    for (let [operation, relativePath] of this.getPatchset()) {\n      switch (operation) {\n        case 'unlink':\n          if (this.matchesExtension(relativePath)) {\n            this.removeImports(relativePath);\n          }\n          break;\n        case 'change':\n        case 'create': {\n          if (this.matchesExtension(relativePath)) {\n            await this.updateImports(relativePath);\n          }\n        }\n      }\n    }\n  }\n\n  private getPatchset() {\n    let input = walkSync.entries(this.inputPaths[0]);\n    let previous = this.previousTree;\n    let next = (this.previousTree = FSTree.fromEntries(input));\n    return previous.calculatePatch(next);\n  }\n\n  private matchesExtension(path: string) {\n    return this.pack.fileExtensions.includes(extname(path).slice(1));\n  }\n\n  removeImports(relativePath: string) {\n    debug(`removing imports for ${relativePath}`);\n    let imports = this.paths.get(relativePath);\n    if (imports) {\n      if (imports.length > 0) {\n        this.modules = null; // invalidates cache\n      }\n      this.paths.delete(relativePath);\n    }\n  }\n\n  async updateImports(relativePath: string): Promise<void> {\n    let meta: ImportSyntax[];\n    if (this.supportsFastAnalyzer) {\n      debug(`updating imports for ${relativePath}`);\n      let stream = createReadStream(join(this.inputPaths[0], relativePath), {\n        encoding: 'utf8',\n        // @ts-ignore\n        emitClose: true, // Needs to be specified for Node 12, as default is false\n      });\n      meta = await deserialize(stream);\n    } else {\n      debug(`updating imports (the slower way) for ${relativePath}`);\n      let parse = await this.parser();\n      meta = parse(\n        readFileSync(join(this.inputPaths[0], relativePath), 'utf8'),\n        relativePath\n      );\n    }\n\n    let newImports = meta.map((m) => ({\n      path: relativePath,\n      package: this.pack,\n      treeType: this.treeType,\n      ...m,\n    }));\n\n    if (!isEqual(this.paths.get(relativePath), newImports)) {\n      this.paths.set(relativePath, newImports);\n      this.modules = null; // invalidates cache\n    }\n  }\n\n  @Memoize()\n  async parser(): Promise<\n    (source: string, relativePath: string) => ImportSyntax[]\n  > {\n    if (this.pack.babelMajorVersion !== 7) {\n      throw new Error(\n        `don't know how to setup a parser for Babel version ${this.pack.babelMajorVersion} (used by ${this.pack.name})`\n      );\n    }\n    const { transformSync } = await import('@babel/core');\n    const analyzerPlugin = require.resolve('./analyzer-plugin');\n\n    return (source: string, relativePath: string) => {\n      let options = Object.assign({}, this.pack.babelOptions);\n      options.code = false;\n      options.filename = relativePath;\n      if (options.plugins) {\n        options.plugins = options.plugins.slice();\n      } else {\n        options.plugins = [];\n      }\n      let analyzerOptions: { imports: ImportSyntax[] } = {\n        imports: [],\n      };\n      options.plugins.unshift([analyzerPlugin, analyzerOptions]);\n      try {\n        transformSync(source, options);\n      } catch (err) {\n        if (err.name !== 'SyntaxError') {\n          throw err;\n        }\n        debug('Ignoring an unparseable file');\n      }\n      return analyzerOptions.imports;\n    };\n  }\n}\n"]}