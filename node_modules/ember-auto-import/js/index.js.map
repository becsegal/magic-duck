{"version":3,"file":"index.js","sourceRoot":"","sources":["../ts/index.ts"],"names":[],"mappings":";;;;;AAAA,gEAAuC;AAEvC,aAAa;AACb,yDAA6B;AAE7B,MAAM,CAAC,OAAO,GAAG;IACf,IAAI,EAAE,iBAAG,CAAC,IAAI;IAEd,IAAI,CAAC,GAAG,IAAW;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,qBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED,yBAAyB,CAAC,IAAY,EAAE,QAAa;QACnD,8DAA8D;QAC9D,kEAAkE;QAClE,8DAA8D;QAC9D,IAAI,IAAI,KAAK,QAAQ,EAAE;YACrB,OAAO;SACR;QAED,gEAAgE;QAChE,yDAAyD;QACzD,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE;YACjB,IAAI,EAAE,4BAA4B;YAClC,MAAM,EAAE,CACN,IAAU,EACV,UAAkB,EAClB,WAAmB,EACnB,OAAY,EACZ,EAAE;gBACF,IAAI,QAAQ,CAAC;gBAEb,IACE,OAAO,OAAO,KAAK,QAAQ;oBAC3B,OAAO,KAAK,IAAI;oBAChB,OAAO,CAAC,QAAQ,EAChB;oBACA,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;iBAC7B;gBAED,OAAO,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YACrE,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,QAAQ,CAAC,GAAG,IAAe;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;QAC1C,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,oDAAoD;IACpD,eAAe,CAAC,WAAmB,EAAE,WAAmB;QACtD,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC;IAED,+DAA+D;IAC/D,mCAAmC;IACnC,eAAe,CAAC,KAAa,EAAE,IAAU;QACvC,IAAI,KAAK,KAAK,KAAK,EAAE;YACnB,OAAO,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC5C;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF,CAAC","sourcesContent":["import AutoImport from './auto-import';\nimport type { Node } from 'broccoli-node-api';\n// @ts-ignore\nimport pkg from '../package';\n\nmodule.exports = {\n  name: pkg.name,\n\n  init(...args: any[]) {\n    this._super.init.apply(this, args);\n    AutoImport.register(this);\n  },\n\n  setupPreprocessorRegistry(type: string, registry: any) {\n    // we register on our parent registry (so we will process code\n    // from the app or addon that chose to include us) rather than our\n    // own registry (which would cause us to process our own code)\n    if (type !== 'parent') {\n      return;\n    }\n\n    // This is where we hook our analyzer into the build pipeline so\n    // it will see all the consumer app or addon's javascript\n    registry.add('js', {\n      name: 'ember-auto-import-analyzer',\n      toTree: (\n        tree: Node,\n        _inputPath: string,\n        _outputPath: string,\n        options: any\n      ) => {\n        let treeType;\n\n        if (\n          typeof options === 'object' &&\n          options !== null &&\n          options.treeType\n        ) {\n          treeType = options.treeType;\n        }\n\n        return AutoImport.lookup(this).analyze(tree, this, treeType, true);\n      },\n    });\n  },\n\n  included(...args: unknown[]) {\n    this._super.included.apply(this, ...args);\n    AutoImport.lookup(this).included(this);\n  },\n\n  // this exists to be called by @embroider/addon-shim\n  registerV2Addon(packageName: string, packageRoot: string) {\n    AutoImport.lookup(this).registerV2Addon(packageName, packageRoot);\n  },\n\n  // this only runs on top-level addons, so we don't need our own\n  // !isDeepAddonInstance check here.\n  postprocessTree(which: string, tree: Node): Node {\n    if (which === 'all') {\n      return AutoImport.lookup(this).addTo(tree);\n    } else {\n      return tree;\n    }\n  },\n};\n"]}