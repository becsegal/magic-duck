{"version":3,"file":"bundler.js","sourceRoot":"","sources":["../ts/bundler.ts"],"names":[],"mappings":";;;AAKA,mDAAoD;AAIpD,MAAM,SAAS,GAAG,mCAAkB,CAAC,mBAAmB,CAAC,CAAC;AA4B1D,gFAAgF;AAChF,wDAAwD;AACxD,SAAgB,YAAY,CAAC,OAAgB,EAAE,KAAa;IAC1D,IAAI,UAAU,GAAG,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC3C,IAAI,UAAU,KAAK,OAAO,EAAE;QAC1B,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,aAAa,EAAE;YAC/C,GAAG;gBACD,OAAO,OAAO,CAAC,WAAW,CAAC;YAC7B,CAAC;SACF,CAAC,CAAC;KACJ;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAVD,oCAUC","sourcesContent":["import type Plugin from 'broccoli-plugin';\nimport type Splitter from './splitter';\nimport type Package from './package';\nimport type BundleConfig from './bundle-config';\nimport type { BundleName } from './bundle-config';\nimport { buildDebugCallback } from 'broccoli-debug';\nimport type { TransformOptions } from '@babel/core';\nimport type webpack from 'webpack';\n\nconst debugTree = buildDebugCallback('ember-auto-import');\n\nexport interface BundlerOptions {\n  consoleWrite: (msg: string) => void;\n  environment: 'development' | 'test' | 'production';\n  splitter: Splitter;\n  packages: Set<Package>;\n  appRoot: string;\n  bundles: BundleConfig;\n  babelConfig: TransformOptions;\n  publicAssetURL: string | undefined;\n  browserslist: string;\n  webpack: typeof webpack;\n  hasFastboot: boolean;\n}\n\nexport interface BuildResult {\n  // the keys here include both our well-known BundleName's (which are defined\n  // automatically by ember-auto-import) as well as arbitrary string bundle\n  // names (because users can also add more entrypoints to the webpack config)\n  entrypoints: Map<BundleName | string, string[]>;\n  lazyAssets: string[];\n}\n\nexport type Bundler = Plugin & {\n  buildResult: BuildResult;\n};\n\n// a Bundler is a broccoli transform node that also has an added property, so to\n// wrap it in broccoli-debug we need a little extra work\nexport function debugBundler(bundler: Bundler, label: string): Bundler {\n  let outputTree = debugTree(bundler, label);\n  if (outputTree !== bundler) {\n    Object.defineProperty(outputTree, 'buildResult', {\n      get() {\n        return bundler.buildResult;\n      },\n    });\n  }\n  return outputTree;\n}\n"]}