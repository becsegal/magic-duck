import { next } from '@ember/runloop';
import { expectTypeOf } from 'expect-type';

class Foo {
  test(_foo, _bar, _baz) {
    return 1;
  }

}

let foo = new Foo(); // With only function

expectTypeOf(next((_foo, _bar, _baz) => {
  return 1;
}, 1, true, undefined)).toEqualTypeOf();
expectTypeOf(next((_foo, _bar, _baz) => {
  return 1;
}, 1, true, 'string')).toEqualTypeOf();
next(_foo => {
  return 1; // @ts-expect-error invalid argument
}, 'string'); // With target and function

expectTypeOf(next(foo, function (_foo, _bar, _baz) {
  expectTypeOf(this).toEqualTypeOf();
  return 1;
}, 1, true)).toEqualTypeOf();
expectTypeOf(next(foo, function (_foo, _bar, _baz) {
  return 1;
}, 1, true, 'string')).toEqualTypeOf(); // @ts-expect-error invalid args

next(foo, function (_foo, _bar, _baz) {
  return 1;
}, 1, 'string', true); // With function string reference

expectTypeOf(next(foo, 'test', 1, true, 'string')).toEqualTypeOf();
expectTypeOf(next(foo, 'test', 1, true)).toEqualTypeOf(); // @ts-expect-error Invalid args

next(foo, 'test', 'string');