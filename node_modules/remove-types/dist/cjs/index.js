"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTypes = void 0;
const core_1 = require("@babel/core");
const prettier_1 = require("prettier");
const plugin_transform_typescript_1 = require("@babel/plugin-transform-typescript");
const babelTsTransform = (0, core_1.createConfigItem)(plugin_transform_typescript_1.default);
const plugin_syntax_decorators_1 = require("@babel/plugin-syntax-decorators");
const babelDecoratorSyntax = (0, core_1.createConfigItem)([plugin_syntax_decorators_1.default, { legacy: true }]);
async function removeTypes(code, prettierConfig = true) {
    code = code.replace(/\n\n+/g, '/* ___NEWLINE___ */\n');
    const removeComments = {
        enter(nodePath) {
            if (!nodePath.node.leadingComments)
                return;
            for (let i = nodePath.node.leadingComments.length - 1; i >= 0; i--) {
                const comment = nodePath.node.leadingComments[i];
                if (code.slice(comment.end).match(/^\s*\n\s*\n/) ||
                    comment.value.includes('___NEWLINE___')) {
                    break;
                }
                comment.value = '___REMOVE_ME___';
            }
        },
    };
    const transformed = await (0, core_1.transformAsync)(code, {
        plugins: [
            {
                name: 'comment-remover',
                visitor: {
                    TSTypeAliasDeclaration: removeComments,
                    TSInterfaceDeclaration: removeComments,
                    TSDeclareFunction: removeComments,
                    TSDeclareMethod: removeComments,
                    TSImportType: removeComments,
                    TSModuleDeclaration: removeComments,
                },
            },
            babelTsTransform,
            babelDecoratorSyntax,
        ],
        generatorOpts: {
            retainLines: true,
            shouldPrintComment: (comment) => comment !== '___REMOVE_ME___',
        },
    });
    if (!transformed || !transformed.code) {
        throw new Error('There was an issue with the Babel transform.');
    }
    const fixed = transformed.code.replace(/\/\* ___NEWLINE___ \*\//g, '\n');
    if (prettierConfig === false) {
        return fixed;
    }
    const standardPrettierOptions = {
        parser: 'babel',
        singleQuote: true,
    };
    if (prettierConfig === true) {
        return (0, prettier_1.format)(fixed, standardPrettierOptions);
    }
    const mergedPrettierOptions = {
        ...standardPrettierOptions,
        ...prettierConfig,
    };
    return (0, prettier_1.format)(fixed, mergedPrettierOptions);
}
exports.removeTypes = removeTypes;
exports.default = removeTypes;
//# sourceMappingURL=index.js.map